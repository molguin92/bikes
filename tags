!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ACC	src/veins/modules/application/platooning/CC_Const.h	/^{DRIVER = 0, ACC = 1, CACC = 2, FAKED_CACC = 3, PLOEG = 4};$/;"	e	enum:Plexe::ACTIVE_CONTROLLER
ACK	src/veins/modules/application/platooning/messages/UnicastMessage_m.h	/^    ACK = 1$/;"	e	enum:UnicastMessageType
ACTIVE	src/veins/base/utils/HostState.h	/^          ACTIVE,	\/** Host is active and fully working*\/$/;"	e	enum:HostState::States
ACTIVE_CONTROLLER	src/veins/modules/application/platooning/CC_Const.h	/^enum ACTIVE_CONTROLLER$/;"	g	namespace:Plexe
AC_BE	src/veins/modules/mac/ieee80211p/Mac1609_4.h	/^			AC_BE = 1,$/;"	e	enum:Mac1609_4::t_access_category
AC_BK	src/veins/modules/mac/ieee80211p/Mac1609_4.h	/^			AC_BK = 0,$/;"	e	enum:Mac1609_4::t_access_category
AC_VI	src/veins/modules/mac/ieee80211p/Mac1609_4.h	/^			AC_VI = 2,$/;"	e	enum:Mac1609_4::t_access_category
AC_VO	src/veins/modules/mac/ieee80211p/Mac1609_4.h	/^			AC_VO = 3$/;"	e	enum:Mac1609_4::t_access_category
ADD	src/veins/modules/mobility/traci/TraCIConstants.h	709;"	d
ADDL_TARGETS	Makefile	/^ADDL_TARGETS =$/;"	m
ADDRESSINGINTERFACE_H_	src/veins/base/modules/AddressingInterface.h	9;"	d
AIR_FRAME	src/veins/base/phyLayer/MacToPhyInterface.h	/^		AIR_FRAME,$/;"	e	enum:MacToPhyInterface::BasePhyMessageKinds
ANALOGUEMODEL_	src/veins/base/phyLayer/AnalogueModel.h	2;"	d
ANALOGUEMODEL_TWORAYINTERFERENCEMODEL_H	src/veins/modules/analogueModel/TwoRayInterferenceModel.h	22;"	d
ASSERTS_H_	src/veins/base/utils/asserts.h	2;"	d
AccessModuleWrap	src/veins/base/utils/FindModule.h	/^		AccessModuleWrap() : pModule(NULL)$/;"	f	class:AccessModuleWrap
AccessModuleWrap	src/veins/base/utils/FindModule.h	/^class AccessModuleWrap$/;"	c
AddressingInterface	src/veins/base/modules/AddressingInterface.h	/^class MIXIM_API AddressingInterface {$/;"	c
AirFrame	src/veins/base/messages/AirFrame_m.cc	/^AirFrame::AirFrame(const AirFrame& other) : ::cPacket(other)$/;"	f	class:Veins::AirFrame
AirFrame	src/veins/base/messages/AirFrame_m.cc	/^AirFrame::AirFrame(const char *name, int kind) : ::cPacket(name,kind)$/;"	f	class:Veins::AirFrame
AirFrame	src/veins/base/messages/AirFrame_m.h	/^class AirFrame : public ::cPacket$/;"	c	namespace:Veins
AirFrame11p	src/veins/modules/messages/AirFrame11p_m.cc	/^AirFrame11p::AirFrame11p(const AirFrame11p& other) : ::AirFrame(other)$/;"	f	class:AirFrame11p
AirFrame11p	src/veins/modules/messages/AirFrame11p_m.cc	/^AirFrame11p::AirFrame11p(const char *name, int kind) : ::AirFrame(name,kind)$/;"	f	class:AirFrame11p
AirFrame11p	src/veins/modules/messages/AirFrame11p_m.cc	/^Register_Class(AirFrame11p);$/;"	v
AirFrame11p	src/veins/modules/messages/AirFrame11p_m.h	/^class AirFrame11p : public ::AirFrame$/;"	c
AirFrame11pDescriptor	src/veins/modules/messages/AirFrame11p_m.cc	/^AirFrame11pDescriptor::AirFrame11pDescriptor() : cClassDescriptor("AirFrame11p", "AirFrame")$/;"	f	class:AirFrame11pDescriptor
AirFrame11pDescriptor	src/veins/modules/messages/AirFrame11p_m.cc	/^Register_ClassDescriptor(AirFrame11pDescriptor);$/;"	v
AirFrame11pDescriptor	src/veins/modules/messages/AirFrame11p_m.cc	/^class AirFrame11pDescriptor : public cClassDescriptor$/;"	c	file:
AirFrameDescriptor	src/veins/base/messages/AirFrame_m.cc	/^AirFrameDescriptor::AirFrameDescriptor() : cClassDescriptor("Veins::AirFrame", "cPacket")$/;"	f	class:Veins::AirFrameDescriptor
AirFrameDescriptor	src/veins/base/messages/AirFrame_m.cc	/^class AirFrameDescriptor : public cClassDescriptor$/;"	c	namespace:Veins	file:
AirFrameMatrix	src/veins/base/phyLayer/ChannelInfo.h	/^	typedef std::map<simtime_t, AirFrameTimeList > AirFrameMatrix;$/;"	t	class:ChannelInfo
AirFrameStartMap	src/veins/base/phyLayer/ChannelInfo.h	/^	typedef std::map<AirFrame*, simtime_t> AirFrameStartMap;$/;"	t	class:ChannelInfo
AirFrameStates	src/veins/base/phyLayer/BasePhyLayer.h	/^	enum AirFrameStates {$/;"	g	class:BasePhyLayer
AirFrameTimeList	src/veins/base/phyLayer/ChannelInfo.h	/^	typedef std::list<AirFrameTimePair> AirFrameTimeList;$/;"	t	class:ChannelInfo
AirFrameTimePair	src/veins/base/phyLayer/ChannelInfo.h	/^	typedef std::pair<simtime_t, AirFrame*> AirFrameTimePair;$/;"	t	class:ChannelInfo
AirFrameVector	src/veins/base/phyLayer/ChannelInfo.h	/^	typedef std::list<AirFrame*> AirFrameVector;$/;"	t	class:ChannelInfo
AirFrameVector	src/veins/base/phyLayer/Decider.h	/^	typedef DeciderToPhyInterface::AirFrameVector AirFrameVector;$/;"	t	class:Decider
AirFrameVector	src/veins/base/phyLayer/DeciderToPhyInterface.h	/^	typedef std::list<AirFrame*> AirFrameVector;$/;"	t	class:DeciderToPhyInterface
AnalogueModel	src/veins/base/phyLayer/AnalogueModel.h	/^class MIXIM_API AnalogueModel {$/;"	c
AnalogueModelList	src/veins/base/phyLayer/BasePhyLayer.h	/^	typedef std::vector<AnalogueModel*> AnalogueModelList;$/;"	t	class:BasePhyLayer
Annotation	src/veins/modules/world/annotations/AnnotationManager.h	/^				Annotation()$/;"	f	class:Veins::AnnotationManager::Annotation
Annotation	src/veins/modules/world/annotations/AnnotationManager.h	/^		class Annotation {$/;"	c	class:Veins::AnnotationManager
AnnotationDummy	src/veins/modules/world/annotations/AnnotationDummy.h	/^class AnnotationDummy : public cSimpleModule$/;"	c	namespace:Veins
AnnotationManager	src/veins/modules/world/annotations/AnnotationManager.cc	/^Define_Module(Veins::AnnotationManager);$/;"	v
AnnotationManager	src/veins/modules/world/annotations/AnnotationManager.h	/^class AnnotationManager : public cSimpleModule$/;"	c	namespace:Veins
AnnotationManagerAccess	src/veins/modules/world/annotations/AnnotationManager.h	/^class AnnotationManagerAccess$/;"	c	namespace:Veins
Annotations	src/veins/modules/world/annotations/AnnotationManager.h	/^		typedef std::list<Annotation*> Annotations;$/;"	t	class:Veins::AnnotationManager
Argument	src/veins/base/phyLayer/MappingBase.cc	/^Argument::Argument(const DimensionSet & dims, simtime_t_cref timeVal):$/;"	f	class:Argument
Argument	src/veins/base/phyLayer/MappingBase.cc	/^Argument::Argument(simtime_t_cref timeVal):$/;"	f	class:Argument
Argument	src/veins/base/phyLayer/MappingBase.h	/^class MIXIM_API Argument {$/;"	c
BASEAPP_H_	src/veins/modules/application/platooning/apps/BaseApp.h	19;"	d
BASECONNECTIONMANAGER_H_	src/veins/base/connectionManager/BaseConnectionManager.h	2;"	d
BASEDECIDER_H_	src/veins/base/phyLayer/BaseDecider.h	9;"	d
BASEPHYLAYER_	src/veins/base/phyLayer/BasePhyLayer.h	2;"	d
BASEPROTOCOL_H_	src/veins/modules/application/platooning/protocols/BaseProtocol.h	19;"	d
BASEWAVEAPPLLAYER_H_	src/veins/modules/application/ieee80211p/BaseWaveApplLayer.h	22;"	d
BASE_APPL_LAYER_H	src/veins/base/modules/BaseApplLayer.h	24;"	d
BASE_BATTERY_H	src/veins/base/modules/BaseBattery.h	2;"	d
BASE_LAYER_H	src/veins/base/modules/BaseLayer.h	24;"	d
BASE_MAC_LAYER_H	src/veins/base/modules/BaseMacLayer.h	22;"	d
BASE_MOBILITY_H	src/veins/base/modules/BaseMobility.h	24;"	d
BASE_MODULE_H	src/veins/base/modules/BaseModule.h	23;"	d
BASE_WORLD_UTIL_H	src/veins/base/modules/BaseWorldUtility.h	22;"	d
BATTERYACCESS_H_	src/veins/base/modules/BatteryAccess.h	9;"	d
BEACON_TYPE	src/veins/modules/application/platooning/protocols/BaseProtocol.h	/^		static const int BEACON_TYPE = 12345;$/;"	m	class:BaseProtocol
BIKE	src/veins/modules/application/platooning/bikeplatoons/BikesApp.h	/^		enum ROLES {LEADER, FOLLOWER, LEAVER, BIKE};$/;"	e	enum:BikesApp::ROLES
BIKE	src/veins/modules/application/platooning/bikes/BikeManeuver.h	/^		enum ROLE { LEADER, FOLLOWER, BIKE };$/;"	e	enum:BikeManeuver::ROLE
BIKESAPP_H_	src/veins/modules/application/platooning/bikeplatoons/BikesApp.h	17;"	d
BIKE_MSGS	src/veins/modules/application/platooning/bikeplatoons/BikesApp.h	/^        enum BIKE_MSGS {$/;"	g	class:BikesApp
BIKE_STATES	src/veins/modules/application/platooning/bikeplatoons/BikesApp.h	/^        } BIKE_STATES;$/;"	t	class:BikesApp	typeref:enum:BikesApp::_BIKE_STATES
BIKE_STATES	src/veins/modules/application/platooning/bikes/BikeManeuver.h	/^		} BIKE_STATES;$/;"	t	class:BikeManeuver	typeref:enum:BikeManeuver::_BIKE_STATES
BITERROR	src/veins/modules/phy/Decider80211p.h	/^			BITERROR,       \/\/the phy has recognized a bit error in the packet$/;"	e	enum:Decider80211p::Decider80211ControlKinds
BITRATES_80211P	src/veins/modules/utility/Consts80211p.h	/^const uint64_t BITRATES_80211P[] = {$/;"	v
BK	src/veins/modules/application/platooning/bikeplatoons/BikesApp.h	30;"	d
BREAKPOINTPATHLOSSMODEL_H_	src/veins/modules/analogueModel/BreakpointPathlossModel.h	2;"	d
BROKEN	src/veins/base/utils/HostState.h	/^          BROKEN,	\/** Host is not active because of some failure$/;"	e	enum:HostState::States
BS_IDLE	src/veins/modules/application/platooning/bikeplatoons/BikesApp.h	/^            BS_IDLE = FSM_Steady(1), \/\/normal riding$/;"	e	enum:BikesApp::_BIKE_STATES
BS_IDLE	src/veins/modules/application/platooning/bikes/BikeManeuver.h	/^			BS_IDLE = FSM_Steady( 1 ),$/;"	e	enum:BikeManeuver::_BIKE_STATES
BS_INIT	src/veins/modules/application/platooning/bikeplatoons/BikesApp.h	/^            BS_INIT = 0,$/;"	e	enum:BikesApp::_BIKE_STATES
BS_INIT	src/veins/modules/application/platooning/bikes/BikeManeuver.h	/^			BS_INIT = 0,$/;"	e	enum:BikeManeuver::_BIKE_STATES
BS_STOP	src/veins/modules/application/platooning/bikeplatoons/BikesApp.h	/^            BS_STOP = FSM_Steady(2)  \/\/received a signal to stop from a follower vehicle$/;"	e	enum:BikesApp::_BIKE_STATES
BS_WARNING	src/veins/modules/application/platooning/bikes/BikeManeuver.h	/^			BS_WARNING = FSM_Steady( 2 )$/;"	e	enum:BikeManeuver::_BIKE_STATES
BW_OFDM_10_MHZ	src/veins/modules/utility/ConstsPhy.h	/^	BW_OFDM_10_MHZ,$/;"	e	enum:Bandwidth
BW_OFDM_20_MHZ	src/veins/modules/utility/ConstsPhy.h	/^	BW_OFDM_20_MHZ$/;"	e	enum:Bandwidth
BW_OFDM_5_MHZ	src/veins/modules/utility/ConstsPhy.h	/^	BW_OFDM_5_MHZ,$/;"	e	enum:Bandwidth
Bandwidth	src/veins/modules/utility/ConstsPhy.h	/^enum Bandwidth {$/;"	g
Base	src/veins/base/phyLayer/ChannelInfo.h	/^										 AirFrameTimeList::iterator> Base;$/;"	t	class:ChannelInfo::IntersectionIterator
BaseApp	src/veins/modules/application/platooning/apps/BaseApp.cc	/^Define_Module(BaseApp);$/;"	v
BaseApp	src/veins/modules/application/platooning/apps/BaseApp.h	/^		BaseApp()$/;"	f	class:BaseApp
BaseApp	src/veins/modules/application/platooning/apps/BaseApp.h	/^class BaseApp : public BaseApplLayer$/;"	c
BaseApplControlKinds	src/veins/base/modules/BaseApplLayer.h	/^	enum BaseApplControlKinds {$/;"	g	class:BaseApplLayer
BaseApplLayer	src/veins/base/modules/BaseApplLayer.h	/^	BaseApplLayer() : BaseLayer()$/;"	f	class:BaseApplLayer
BaseApplLayer	src/veins/base/modules/BaseApplLayer.h	/^	BaseApplLayer(unsigned stacksize) : BaseLayer(stacksize)$/;"	f	class:BaseApplLayer
BaseApplLayer	src/veins/base/modules/BaseApplLayer.h	/^class MIXIM_API BaseApplLayer : public BaseLayer$/;"	c
BaseApplMessageKinds	src/veins/base/modules/BaseApplLayer.h	/^	enum BaseApplMessageKinds {$/;"	g	class:BaseApplLayer
BaseBattery	src/veins/base/modules/BaseBattery.h	/^	BaseBattery() : BaseModule()$/;"	f	class:BaseBattery
BaseBattery	src/veins/base/modules/BaseBattery.h	/^	BaseBattery(unsigned stacksize) : BaseModule(stacksize)$/;"	f	class:BaseBattery
BaseBattery	src/veins/base/modules/BaseBattery.h	/^class MIXIM_API BaseBattery : public BaseModule {$/;"	c
BaseConnectionManager	src/veins/base/connectionManager/BaseConnectionManager.h	/^class MIXIM_API BaseConnectionManager : public cSimpleModule$/;"	c
BaseDecider	src/veins/base/phyLayer/BaseDecider.h	/^	BaseDecider(DeciderToPhyInterface* phy, double sensitivity,$/;"	f	class:BaseDecider
BaseDecider	src/veins/base/phyLayer/BaseDecider.h	/^class MIXIM_API BaseDecider: public Decider {$/;"	c
BaseDeciderControlKinds	src/veins/base/phyLayer/BaseDecider.h	/^	enum BaseDeciderControlKinds {$/;"	g	class:BaseDecider
BaseDelayedIterator	src/veins/base/phyLayer/MappingUtils.h	/^	BaseDelayedIterator(Iterator* it, simtime_t_cref delay):$/;"	f	class:BaseDelayedIterator
BaseDelayedIterator	src/veins/base/phyLayer/MappingUtils.h	/^class BaseDelayedIterator: public Base {$/;"	c
BaseDelayedMapping	src/veins/base/phyLayer/MappingUtils.h	/^	BaseDelayedMapping(Base* mapping, simtime_t_cref delay):$/;"	f	class:BaseDelayedMapping
BaseDelayedMapping	src/veins/base/phyLayer/MappingUtils.h	/^class BaseDelayedMapping: public Base {$/;"	c
BaseFilteredIterator	src/veins/base/phyLayer/MappingUtils.h	/^	BaseFilteredIterator(Base* orig):$/;"	f	class:BaseFilteredIterator
BaseFilteredIterator	src/veins/base/phyLayer/MappingUtils.h	/^class BaseFilteredIterator : public Base {$/;"	c
BaseIntersectionIterator	src/veins/base/phyLayer/ChannelInfo.h	/^		BaseIntersectionIterator(C* airFrames, simtime_t_cref from, simtime_t_cref to) :$/;"	f	class:ChannelInfo::BaseIntersectionIterator
BaseIntersectionIterator	src/veins/base/phyLayer/ChannelInfo.h	/^	class BaseIntersectionIterator$/;"	c	class:ChannelInfo
BaseLayer	src/veins/base/modules/BaseLayer.h	/^    BaseLayer()$/;"	f	class:BaseLayer
BaseLayer	src/veins/base/modules/BaseLayer.h	/^    BaseLayer(unsigned stacksize)$/;"	f	class:BaseLayer
BaseLayer	src/veins/base/modules/BaseLayer.h	/^class MIXIM_API BaseLayer : public BatteryAccess$/;"	c
BaseMacControlKinds	src/veins/base/modules/BaseMacLayer.h	/^    enum BaseMacControlKinds {$/;"	g	class:BaseMacLayer
BaseMacLayer	src/veins/base/modules/BaseMacLayer.h	/^    BaseMacLayer() $/;"	f	class:BaseMacLayer
BaseMacLayer	src/veins/base/modules/BaseMacLayer.h	/^    BaseMacLayer(unsigned stacksize) $/;"	f	class:BaseMacLayer
BaseMacLayer	src/veins/base/modules/BaseMacLayer.h	/^class MIXIM_API BaseMacLayer : public BaseLayer$/;"	c
BaseMacMessageKinds	src/veins/base/modules/BaseMacLayer.h	/^    enum BaseMacMessageKinds {$/;"	g	class:BaseMacLayer
BaseMobility	src/veins/base/modules/BaseMobility.cc	/^BaseMobility::BaseMobility():$/;"	f	class:BaseMobility
BaseMobility	src/veins/base/modules/BaseMobility.cc	/^BaseMobility::BaseMobility(unsigned stacksize):$/;"	f	class:BaseMobility
BaseMobility	src/veins/base/modules/BaseMobility.cc	/^Define_Module(BaseMobility);$/;"	v
BaseMobility	src/veins/base/modules/BaseMobility.h	/^class MIXIM_API BaseMobility : public BatteryAccess$/;"	c
BaseMobilityMsgKinds	src/veins/base/modules/BaseMobility.h	/^    enum BaseMobilityMsgKinds {$/;"	g	class:BaseMobility
BaseModule	src/veins/base/modules/BaseModule.cc	/^BaseModule::BaseModule():$/;"	f	class:BaseModule
BaseModule	src/veins/base/modules/BaseModule.cc	/^BaseModule::BaseModule(unsigned stacksize):$/;"	f	class:BaseModule
BaseModule	src/veins/base/modules/BaseModule.h	/^class MIXIM_API BaseModule: public cSimpleModule, public cListener {$/;"	c
BasePhyLayer	src/veins/base/phyLayer/BasePhyLayer.cc	/^BasePhyLayer::BasePhyLayer():$/;"	f	class:BasePhyLayer
BasePhyLayer	src/veins/base/phyLayer/BasePhyLayer.h	/^class MIXIM_API BasePhyLayer: public ChannelAccess,$/;"	c
BasePhyMessageKinds	src/veins/base/phyLayer/MacToPhyInterface.h	/^	enum BasePhyMessageKinds {$/;"	g	class:MacToPhyInterface
BasePhyMessageKinds	src/veins/modules/mac/ieee80211p/Mac80211pToPhy11pInterface.h	/^		enum BasePhyMessageKinds {$/;"	g	class:Mac80211pToPhy11pInterface
BaseProtocol	src/veins/modules/application/platooning/protocols/BaseProtocol.h	/^		BaseProtocol() {$/;"	f	class:BaseProtocol
BaseProtocol	src/veins/modules/application/platooning/protocols/BaseProtocol.h	/^class BaseProtocol : public BaseApplLayer {$/;"	c
BaseWaveApplLayer	src/veins/modules/application/ieee80211p/BaseWaveApplLayer.h	/^class BaseWaveApplLayer : public BaseApplLayer {$/;"	c
BaseWorldUtility	src/veins/base/modules/BaseWorldUtility.cc	/^BaseWorldUtility::BaseWorldUtility():$/;"	f	class:BaseWorldUtility
BaseWorldUtility	src/veins/base/modules/BaseWorldUtility.cc	/^Define_Module(BaseWorldUtility);$/;"	v
BaseWorldUtility	src/veins/base/modules/BaseWorldUtility.h	/^class MIXIM_API BaseWorldUtility : public cSimpleModule$/;"	c
BatteryAccess	src/veins/base/modules/BatteryAccess.cc	/^BatteryAccess::BatteryAccess():$/;"	f	class:BatteryAccess
BatteryAccess	src/veins/base/modules/BatteryAccess.cc	/^BatteryAccess::BatteryAccess(unsigned stacksize):$/;"	f	class:BatteryAccess
BatteryAccess	src/veins/base/modules/BatteryAccess.h	/^class MIXIM_API BatteryAccess: public BaseModule {$/;"	c	namespace:Veins
BikeManeuver	src/veins/modules/application/platooning/bikes/BikeManeuver.cc	/^Define_Module( BikeManeuver );$/;"	v
BikeManeuver	src/veins/modules/application/platooning/bikes/BikeManeuver.h	/^		BikeManeuver()$/;"	f	class:BikeManeuver
BikeManeuver	src/veins/modules/application/platooning/bikes/BikeManeuver.h	/^class BikeManeuver : public BaseApp$/;"	c
BikeManeuver_H_	src/veins/modules/application/platooning/bikes/BikeManeuver.h	2;"	d
BikesApp	src/veins/modules/application/platooning/bikeplatoons/BikesApp.cc	/^Define_Module( BikesApp );$/;"	v
BikesApp	src/veins/modules/application/platooning/bikeplatoons/BikesApp.h	/^		BikesApp()	{$/;"	f	class:BikesApp
BikesApp	src/veins/modules/application/platooning/bikeplatoons/BikesApp.h	/^class BikesApp : public BaseApp$/;"	c
BikesMessage	src/veins/modules/application/platooning/messages/BikesMessage_m.cc	/^BikesMessage::BikesMessage(const BikesMessage& other) : ::cPacket(other)$/;"	f	class:BikesMessage
BikesMessage	src/veins/modules/application/platooning/messages/BikesMessage_m.cc	/^BikesMessage::BikesMessage(const char *name, int kind) : ::cPacket(name,kind)$/;"	f	class:BikesMessage
BikesMessage	src/veins/modules/application/platooning/messages/BikesMessage_m.cc	/^Register_Class(BikesMessage);$/;"	v
BikesMessage	src/veins/modules/application/platooning/messages/BikesMessage_m.h	/^class BikesMessage : public ::cPacket$/;"	c
BikesMessageDescriptor	src/veins/modules/application/platooning/messages/BikesMessage_m.cc	/^BikesMessageDescriptor::BikesMessageDescriptor() : cClassDescriptor("BikesMessage", "cPacket")$/;"	f	class:BikesMessageDescriptor
BikesMessageDescriptor	src/veins/modules/application/platooning/messages/BikesMessage_m.cc	/^Register_ClassDescriptor(BikesMessageDescriptor);$/;"	v
BikesMessageDescriptor	src/veins/modules/application/platooning/messages/BikesMessage_m.cc	/^class BikesMessageDescriptor : public cClassDescriptor$/;"	c	file:
BorderHandling	src/veins/base/modules/BaseMobility.h	/^    enum BorderHandling {$/;"	g	class:BaseMobility
BorderMsg	src/veins/base/messages/BorderMsg_m.cc	/^BorderMsg::BorderMsg(const BorderMsg& other) : ::cPacket(other)$/;"	f	class:BorderMsg
BorderMsg	src/veins/base/messages/BorderMsg_m.cc	/^BorderMsg::BorderMsg(const char *name, int kind) : ::cPacket(name,kind)$/;"	f	class:BorderMsg
BorderMsg	src/veins/base/messages/BorderMsg_m.cc	/^Register_Class(BorderMsg);$/;"	v
BorderMsg	src/veins/base/messages/BorderMsg_m.h	/^class BorderMsg : public ::cPacket$/;"	c
BorderMsgDescriptor	src/veins/base/messages/BorderMsg_m.cc	/^BorderMsgDescriptor::BorderMsgDescriptor() : cClassDescriptor("BorderMsg", "cPacket")$/;"	f	class:BorderMsgDescriptor
BorderMsgDescriptor	src/veins/base/messages/BorderMsg_m.cc	/^Register_ClassDescriptor(BorderMsgDescriptor);$/;"	v
BorderMsgDescriptor	src/veins/base/messages/BorderMsg_m.cc	/^class BorderMsgDescriptor : public cClassDescriptor$/;"	c	file:
BorderPolicy	src/veins/base/modules/BaseMobility.h	/^    enum BorderPolicy {$/;"	g	class:BaseMobility
BreakpointPathlossModel	src/veins/modules/analogueModel/BreakpointPathlossModel.h	/^	BreakpointPathlossModel(double L01, double L02, double alpha1, double alpha2, double breakpointDistance,$/;"	f	class:BreakpointPathlossModel
BreakpointPathlossModel	src/veins/modules/analogueModel/BreakpointPathlossModel.h	/^class MIXIM_API BreakpointPathlossModel : public AnalogueModel$/;"	c
CACC	src/veins/modules/application/platooning/CC_Const.h	/^{DRIVER = 0, ACC = 1, CACC = 2, FAKED_CACC = 3, PLOEG = 4};$/;"	e	enum:Plexe::ACTIVE_CONTROLLER
CCDataHeader	src/veins/modules/application/platooning/CC_Const.h	/^struct CCDataHeader {$/;"	s	namespace:Plexe
CCH	src/veins/modules/utility/Consts80211p.h	/^	CCH = 178,$/;"	e	enum:Channels::ChannelNumber
CC_CONST_H	src/veins/modules/application/platooning/CC_Const.h	19;"	d
CC_GET_VEHICLE_DATA	src/veins/modules/application/platooning/CC_Const.h	74;"	d
CC_SET_CACC_C1	src/veins/modules/application/platooning/CC_Const.h	79;"	d
CC_SET_CACC_OMEGA_N	src/veins/modules/application/platooning/CC_Const.h	78;"	d
CC_SET_CACC_XI	src/veins/modules/application/platooning/CC_Const.h	77;"	d
CC_SET_ENGINE_TAU	src/veins/modules/application/platooning/CC_Const.h	80;"	d
CC_SET_PLATOON_SIZE	src/veins/modules/application/platooning/CC_Const.h	73;"	d
CC_SET_PLOEG_H	src/veins/modules/application/platooning/CC_Const.h	82;"	d
CC_SET_PLOEG_KD	src/veins/modules/application/platooning/CC_Const.h	84;"	d
CC_SET_PLOEG_KP	src/veins/modules/application/platooning/CC_Const.h	83;"	d
CC_SET_VEHICLE_DATA	src/veins/modules/application/platooning/CC_Const.h	71;"	d
CC_SET_VEHICLE_POSITION	src/veins/modules/application/platooning/CC_Const.h	72;"	d
CHANNELINFO_H_	src/veins/base/phyLayer/ChannelInfo.h	2;"	d
CHANNEL_ACCESS_H	src/veins/base/connectionManager/ChannelAccess.h	25;"	d
CHANNEL_BUSY	src/veins/modules/mac/ieee80211p/Mac80211pToPhy11pInterface.h	/^			CHANNEL_BUSY,$/;"	e	enum:Mac80211pToPhy11pInterface::BasePhyMessageKinds
CHANNEL_IDLE	src/veins/modules/mac/ieee80211p/Mac80211pToPhy11pInterface.h	/^			CHANNEL_IDLE,$/;"	e	enum:Mac80211pToPhy11pInterface::BasePhyMessageKinds
CHANNEL_SENSE_REQUEST	src/veins/base/phyLayer/MacToPhyInterface.h	/^		CHANNEL_SENSE_REQUEST,$/;"	e	enum:MacToPhyInterface::BasePhyMessageKinds
CMD_CHANGELANE	src/veins/modules/mobility/traci/TraCIConstants.h	55;"	d
CMD_CHANGETARGET	src/veins/modules/mobility/traci/TraCIConstants.h	61;"	d
CMD_CLEAR_PENDING_VEHICLES	src/veins/modules/mobility/traci/TraCIConstants.h	703;"	d
CMD_CLOSE	src/veins/modules/mobility/traci/TraCIConstants.h	64;"	d
CMD_FILE_SEND	src/veins/modules/mobility/traci/TraCIScenarioManagerLaunchd.cc	24;"	d	file:
CMD_GETVERSION	src/veins/modules/mobility/traci/TraCIConstants.h	43;"	d
CMD_GET_AREAL_DETECTOR_VARIABLE	src/veins/modules/mobility/traci/TraCIConstants.h	86;"	d
CMD_GET_EDGE_VARIABLE	src/veins/modules/mobility/traci/TraCIConstants.h	234;"	d
CMD_GET_GUI_VARIABLE	src/veins/modules/mobility/traci/TraCIConstants.h	264;"	d
CMD_GET_INDUCTIONLOOP_VARIABLE	src/veins/modules/mobility/traci/TraCIConstants.h	72;"	d
CMD_GET_JUNCTION_VARIABLE	src/veins/modules/mobility/traci/TraCIConstants.h	219;"	d
CMD_GET_LANE_VARIABLE	src/veins/modules/mobility/traci/TraCIConstants.h	129;"	d
CMD_GET_MULTI_ENTRY_EXIT_DETECTOR_VARIABLE	src/veins/modules/mobility/traci/TraCIConstants.h	100;"	d
CMD_GET_POI_VARIABLE	src/veins/modules/mobility/traci/TraCIConstants.h	189;"	d
CMD_GET_POLYGON_VARIABLE	src/veins/modules/mobility/traci/TraCIConstants.h	204;"	d
CMD_GET_ROUTE_VARIABLE	src/veins/modules/mobility/traci/TraCIConstants.h	174;"	d
CMD_GET_SIM_VARIABLE	src/veins/modules/mobility/traci/TraCIConstants.h	249;"	d
CMD_GET_TL_VARIABLE	src/veins/modules/mobility/traci/TraCIConstants.h	114;"	d
CMD_GET_VEHICLETYPE_VARIABLE	src/veins/modules/mobility/traci/TraCIConstants.h	159;"	d
CMD_GET_VEHICLE_VARIABLE	src/veins/modules/mobility/traci/TraCIConstants.h	144;"	d
CMD_REROUTE_EFFORT	src/veins/modules/mobility/traci/TraCIConstants.h	727;"	d
CMD_REROUTE_TRAVELTIME	src/veins/modules/mobility/traci/TraCIConstants.h	724;"	d
CMD_RESUME	src/veins/modules/mobility/traci/TraCIConstants.h	52;"	d
CMD_SET_EDGE_VARIABLE	src/veins/modules/mobility/traci/TraCIConstants.h	238;"	d
CMD_SET_GUI_VARIABLE	src/veins/modules/mobility/traci/TraCIConstants.h	268;"	d
CMD_SET_JUNCTION_VARIABLE	src/veins/modules/mobility/traci/TraCIConstants.h	223;"	d
CMD_SET_LANE_VARIABLE	src/veins/modules/mobility/traci/TraCIConstants.h	133;"	d
CMD_SET_POI_VARIABLE	src/veins/modules/mobility/traci/TraCIConstants.h	193;"	d
CMD_SET_POLYGON_VARIABLE	src/veins/modules/mobility/traci/TraCIConstants.h	208;"	d
CMD_SET_ROUTE_VARIABLE	src/veins/modules/mobility/traci/TraCIConstants.h	178;"	d
CMD_SET_SIM_VARIABLE	src/veins/modules/mobility/traci/TraCIConstants.h	253;"	d
CMD_SET_TL_VARIABLE	src/veins/modules/mobility/traci/TraCIConstants.h	118;"	d
CMD_SET_VEHICLETYPE_VARIABLE	src/veins/modules/mobility/traci/TraCIConstants.h	163;"	d
CMD_SET_VEHICLE_VARIABLE	src/veins/modules/mobility/traci/TraCIConstants.h	148;"	d
CMD_SIMSTEP2	src/veins/modules/mobility/traci/TraCIConstants.h	46;"	d
CMD_SLOWDOWN	src/veins/modules/mobility/traci/TraCIConstants.h	58;"	d
CMD_STOP	src/veins/modules/mobility/traci/TraCIConstants.h	49;"	d
CMD_SUBSCRIBE_AREAL_DETECTOR_CONTEXT	src/veins/modules/mobility/traci/TraCIConstants.h	82;"	d
CMD_SUBSCRIBE_AREAL_DETECTOR_VARIABLE	src/veins/modules/mobility/traci/TraCIConstants.h	90;"	d
CMD_SUBSCRIBE_EDGE_CONTEXT	src/veins/modules/mobility/traci/TraCIConstants.h	230;"	d
CMD_SUBSCRIBE_EDGE_VARIABLE	src/veins/modules/mobility/traci/TraCIConstants.h	240;"	d
CMD_SUBSCRIBE_GUI_CONTEXT	src/veins/modules/mobility/traci/TraCIConstants.h	260;"	d
CMD_SUBSCRIBE_GUI_VARIABLE	src/veins/modules/mobility/traci/TraCIConstants.h	270;"	d
CMD_SUBSCRIBE_INDUCTIONLOOP_CONTEXT	src/veins/modules/mobility/traci/TraCIConstants.h	68;"	d
CMD_SUBSCRIBE_INDUCTIONLOOP_VARIABLE	src/veins/modules/mobility/traci/TraCIConstants.h	76;"	d
CMD_SUBSCRIBE_JUNCTION_CONTEXT	src/veins/modules/mobility/traci/TraCIConstants.h	215;"	d
CMD_SUBSCRIBE_JUNCTION_VARIABLE	src/veins/modules/mobility/traci/TraCIConstants.h	225;"	d
CMD_SUBSCRIBE_LANE_CONTEXT	src/veins/modules/mobility/traci/TraCIConstants.h	125;"	d
CMD_SUBSCRIBE_LANE_VARIABLE	src/veins/modules/mobility/traci/TraCIConstants.h	135;"	d
CMD_SUBSCRIBE_MULTI_ENTRY_EXIT_DETECTOR_CONTEXT	src/veins/modules/mobility/traci/TraCIConstants.h	96;"	d
CMD_SUBSCRIBE_MULTI_ENTRY_EXIT_DETECTOR_VARIABLE	src/veins/modules/mobility/traci/TraCIConstants.h	104;"	d
CMD_SUBSCRIBE_POI_CONTEXT	src/veins/modules/mobility/traci/TraCIConstants.h	185;"	d
CMD_SUBSCRIBE_POI_VARIABLE	src/veins/modules/mobility/traci/TraCIConstants.h	195;"	d
CMD_SUBSCRIBE_POLYGON_CONTEXT	src/veins/modules/mobility/traci/TraCIConstants.h	200;"	d
CMD_SUBSCRIBE_POLYGON_VARIABLE	src/veins/modules/mobility/traci/TraCIConstants.h	210;"	d
CMD_SUBSCRIBE_ROUTE_CONTEXT	src/veins/modules/mobility/traci/TraCIConstants.h	170;"	d
CMD_SUBSCRIBE_ROUTE_VARIABLE	src/veins/modules/mobility/traci/TraCIConstants.h	180;"	d
CMD_SUBSCRIBE_SIM_CONTEXT	src/veins/modules/mobility/traci/TraCIConstants.h	245;"	d
CMD_SUBSCRIBE_SIM_VARIABLE	src/veins/modules/mobility/traci/TraCIConstants.h	255;"	d
CMD_SUBSCRIBE_TL_CONTEXT	src/veins/modules/mobility/traci/TraCIConstants.h	110;"	d
CMD_SUBSCRIBE_TL_VARIABLE	src/veins/modules/mobility/traci/TraCIConstants.h	120;"	d
CMD_SUBSCRIBE_VEHICLETYPE_CONTEXT	src/veins/modules/mobility/traci/TraCIConstants.h	155;"	d
CMD_SUBSCRIBE_VEHICLETYPE_VARIABLE	src/veins/modules/mobility/traci/TraCIConstants.h	165;"	d
CMD_SUBSCRIBE_VEHICLE_CONTEXT	src/veins/modules/mobility/traci/TraCIConstants.h	140;"	d
CMD_SUBSCRIBE_VEHICLE_VARIABLE	src/veins/modules/mobility/traci/TraCIConstants.h	150;"	d
COLLISION	src/veins/modules/phy/Decider80211p.h	/^		enum PACKET_OK_RESULT {DECODED, NOT_DECODED, COLLISION};$/;"	e	enum:Decider80211p::PACKET_OK_RESULT
CONFIGFILE	src/Makefile	/^CONFIGFILE = $(OMNETPP_CONFIGFILE)$/;"	m
CONFIGFILE	src/Makefile	/^CONFIGFILE = $(OMNETPP_ROOT)\/Makefile.inc$/;"	m
CONFIGFILE	src/Makefile	/^CONFIGFILE = $(shell opp_configfilepath)$/;"	m
CONNECTIONMANAGER_H_	src/veins/base/connectionManager/ConnectionManager.h	2;"	d
CONSTANTS_802_11p	src/veins/modules/utility/Consts80211p.h	22;"	d
CONSTANTS_PHY	src/veins/modules/utility/ConstsPhy.h	22;"	d
COPTS	src/Makefile	/^COPTS = $(CFLAGS)  $(INCLUDE_PATH) -I$(OMNETPP_INCL_DIR)$/;"	m
COPTS_FILE	src/Makefile	/^COPTS_FILE = $O\/.last-copts$/;"	m
CRIT_SOL	src/veins/modules/utility/Consts80211p.h	/^	CRIT_SOL = 172,$/;"	e	enum:Channels::ChannelNumber
CSRInfo	src/veins/base/phyLayer/BaseDecider.h	/^	} CSRInfo;$/;"	t	class:BaseDecider	typeref:struct:BaseDecider::__anon1
CURRENT	src/veins/base/modules/BaseBattery.h	/^		CURRENT, 	\/** @brief Current in mA over time. *\/$/;"	e	enum:DrawAmount::PowerType
CWMAX_11P	src/veins/modules/utility/Consts80211p.h	/^const unsigned CWMAX_11P = 1023;$/;"	v
CWMIN_11P	src/veins/modules/utility/Consts80211p.h	/^const unsigned CWMIN_11P = 15;$/;"	v
CacheEntries	src/veins/modules/obstacle/ObstacleControl.h	/^		typedef std::map<CacheKey, double> CacheEntries;$/;"	t	class:Veins::ObstacleControl
CacheKey	src/veins/modules/obstacle/ObstacleControl.h	/^			CacheKey(const Coord& senderPos, const Coord& receiverPos) :$/;"	f	struct:Veins::ObstacleControl::CacheKey
CacheKey	src/veins/modules/obstacle/ObstacleControl.h	/^		struct CacheKey {$/;"	s	class:Veins::ObstacleControl
ChannelAccess	src/veins/base/connectionManager/ChannelAccess.h	/^class MIXIM_API ChannelAccess : public BatteryAccess, protected ChannelMobilityAccessType$/;"	c	namespace:Veins
ChannelInfo	src/veins/base/phyLayer/ChannelInfo.h	/^	ChannelInfo():$/;"	f	class:ChannelInfo
ChannelInfo	src/veins/base/phyLayer/ChannelInfo.h	/^class MIXIM_API ChannelInfo {$/;"	c
ChannelMobilityAccessType	src/veins/base/connectionManager/ChannelAccess.h	/^typedef AccessModuleWrap<BaseMobility>                ChannelMobilityAccessType;$/;"	t
ChannelMobilityPtrType	src/veins/base/connectionManager/ChannelAccess.h	/^typedef ChannelMobilityAccessType::wrapType* ChannelMobilityPtrType;$/;"	t
ChannelNumber	src/veins/modules/utility/Consts80211p.h	/^enum ChannelNumber {$/;"	g	namespace:Channels
ChannelSenseRequest	src/veins/base/messages/ChannelSenseRequest_m.cc	/^ChannelSenseRequest::ChannelSenseRequest(const ChannelSenseRequest& other) : ::cPacket(other)$/;"	f	class:ChannelSenseRequest
ChannelSenseRequest	src/veins/base/messages/ChannelSenseRequest_m.cc	/^ChannelSenseRequest::ChannelSenseRequest(const char *name, int kind) : ::cPacket(name,kind)$/;"	f	class:ChannelSenseRequest
ChannelSenseRequest	src/veins/base/messages/ChannelSenseRequest_m.cc	/^Register_Class(ChannelSenseRequest);$/;"	v
ChannelSenseRequest	src/veins/base/messages/ChannelSenseRequest_m.h	/^class ChannelSenseRequest : public ::cPacket$/;"	c
ChannelSenseRequestDescriptor	src/veins/base/messages/ChannelSenseRequest_m.cc	/^ChannelSenseRequestDescriptor::ChannelSenseRequestDescriptor() : cClassDescriptor("ChannelSenseRequest", "cPacket")$/;"	f	class:ChannelSenseRequestDescriptor
ChannelSenseRequestDescriptor	src/veins/base/messages/ChannelSenseRequest_m.cc	/^Register_ClassDescriptor(ChannelSenseRequestDescriptor);$/;"	v
ChannelSenseRequestDescriptor	src/veins/base/messages/ChannelSenseRequest_m.cc	/^class ChannelSenseRequestDescriptor : public cClassDescriptor$/;"	c	file:
ChannelState	src/veins/base/phyLayer/ChannelState.h	/^	ChannelState(bool isIdle = false, double rssi = 0.0) :$/;"	f	class:ChannelState
ChannelState	src/veins/base/phyLayer/ChannelState.h	/^class MIXIM_API ChannelState$/;"	c
Channels	src/veins/modules/utility/Consts80211p.h	/^namespace Channels {$/;"	n
ConcatConstMapping	src/veins/base/phyLayer/MappingUtils.h	/^	ConcatConstMapping(ConstMapping* refMapping, ConstMapping* other,$/;"	f	class:ConcatConstMapping
ConcatConstMapping	src/veins/base/phyLayer/MappingUtils.h	/^	ConcatConstMapping(ConstMapping* refMapping,$/;"	f	class:ConcatConstMapping
ConcatConstMapping	src/veins/base/phyLayer/MappingUtils.h	/^class ConcatConstMapping: public ConstMapping {$/;"	c
ConcatConstMappingIterator	src/veins/base/phyLayer/MappingUtils.h	/^	ConcatConstMappingIterator(ConstMapping* baseMapping):$/;"	f	class:ConcatConstMappingIterator
ConcatConstMappingIterator	src/veins/base/phyLayer/MappingUtils.h	/^	ConcatConstMappingIterator(ConstMapping* baseMapping, const Argument& pos):$/;"	f	class:ConcatConstMappingIterator
ConcatConstMappingIterator	src/veins/base/phyLayer/MappingUtils.h	/^class MIXIM_API ConcatConstMappingIterator : public FilteredConstMappingIterator{$/;"	c
ConnectionManager	src/veins/base/connectionManager/ConnectionManager.cc	/^Define_Module( ConnectionManager );$/;"	v
ConnectionManager	src/veins/base/connectionManager/ConnectionManager.h	/^class MIXIM_API ConnectionManager : public BaseConnectionManager$/;"	c
ConstDelayedMapping	src/veins/base/phyLayer/MappingUtils.h	/^	ConstDelayedMapping(ConstMapping* mapping, simtime_t_cref delay):$/;"	f	class:ConstDelayedMapping
ConstDelayedMapping	src/veins/base/phyLayer/MappingUtils.h	/^class MIXIM_API ConstDelayedMapping: public BaseDelayedMapping<ConstMapping> {$/;"	c
ConstDelayedMappingIterator	src/veins/base/phyLayer/MappingUtils.h	/^typedef BaseDelayedIterator<FilteredConstMappingIterator, ConstMappingIterator> ConstDelayedMappingIterator;$/;"	t
ConstInterpolateableIterator	src/veins/base/phyLayer/Interpolation.h	/^	ConstInterpolateableIterator(const used_iterator& first, const used_iterator& last, const interpolator_type& intpl):$/;"	f	class:ConstInterpolateableIterator
ConstInterpolateableIterator	src/veins/base/phyLayer/Interpolation.h	/^class ConstInterpolateableIterator {$/;"	c
ConstIntersectionIterator	src/veins/base/phyLayer/ChannelInfo.h	/^				 AirFrameTimeList::const_iterator> ConstIntersectionIterator;$/;"	t	class:ChannelInfo
ConstMapping	src/veins/base/phyLayer/MappingBase.h	/^	ConstMapping():$/;"	f	class:ConstMapping
ConstMapping	src/veins/base/phyLayer/MappingBase.h	/^	ConstMapping(const DimensionSet& dimSet):$/;"	f	class:ConstMapping
ConstMapping	src/veins/base/phyLayer/MappingBase.h	/^class MIXIM_API ConstMapping {$/;"	c
ConstMappingIterator	src/veins/base/phyLayer/MappingBase.h	/^class MIXIM_API ConstMappingIterator {$/;"	c
ConstMappingIteratorWrapper	src/veins/base/phyLayer/MappingUtils.h	/^	ConstMappingIteratorWrapper(ConstMappingIterator* it):$/;"	f	class:ConstMappingIteratorWrapper
ConstMappingIteratorWrapper	src/veins/base/phyLayer/MappingUtils.h	/^class MIXIM_API ConstMappingIteratorWrapper : public MappingIterator {$/;"	c
ConstMappingList	src/veins/base/phyLayer/Signal_.h	/^	typedef std::list<ConstMapping*> ConstMappingList;$/;"	t	class:Signal
ConstMappingWrapper	src/veins/base/phyLayer/MappingUtils.h	/^	ConstMappingWrapper(const ConstMapping* m):$/;"	f	class:ConstMappingWrapper
ConstMappingWrapper	src/veins/base/phyLayer/MappingUtils.h	/^class MIXIM_API ConstMappingWrapper : public Mapping {$/;"	c
ConstantSimpleConstMapping	src/veins/base/phyLayer/MappingUtils.h	/^	ConstantSimpleConstMapping(const DimensionSet&   dims,$/;"	f	class:ConstantSimpleConstMapping
ConstantSimpleConstMapping	src/veins/base/phyLayer/MappingUtils.h	/^	ConstantSimpleConstMapping(const DimensionSet& dims, argument_value_cref_t val):$/;"	f	class:ConstantSimpleConstMapping
ConstantSimpleConstMapping	src/veins/base/phyLayer/MappingUtils.h	/^class MIXIM_API ConstantSimpleConstMapping : public SimpleConstMapping {$/;"	c
ControlMessageCommand	src/veins/modules/application/platooning/UnicastProtocol.h	/^enum ControlMessageCommand$/;"	g
Coord	src/veins/base/utils/Coord.h	/^    Coord()$/;"	f	class:Coord
Coord	src/veins/base/utils/Coord.h	/^    Coord(const Coord& other)$/;"	f	class:Coord
Coord	src/veins/base/utils/Coord.h	/^    Coord(double x, double y, double z = 0.0)$/;"	f	class:Coord
Coord	src/veins/base/utils/Coord.h	/^class MIXIM_API Coord : public cObject$/;"	c
CoordSet	src/veins/base/connectionManager/BaseConnectionManager.h	/^		CoordSet(unsigned sz)$/;"	f	class:BaseConnectionManager::CoordSet
CoordSet	src/veins/base/connectionManager/BaseConnectionManager.h	/^	class CoordSet {$/;"	c	class:BaseConnectionManager
Coords	src/veins/modules/obstacle/Obstacle.h	/^		typedef std::vector<Coord> Coords;$/;"	t	class:Veins::Obstacle
CurrList	src/veins/base/phyLayer/PhyUtils.h	/^	typedef std::list<RadioStateAnalogueModel::ListEntry> CurrList;$/;"	t	class:RSAMConstMappingIterator
DATA	src/veins/modules/application/platooning/messages/UnicastMessage_m.h	/^    DATA = 0,$/;"	e	enum:UnicastMessageType
DBG	src/veins/modules/application/ieee80211p/BaseWaveApplLayer.h	32;"	d
DBG	src/veins/modules/phy/PhyLayer80211p.h	38;"	d
DBG_D11P	src/veins/modules/phy/Decider80211p.h	33;"	d
DBG_MAC	src/veins/modules/mac/ieee80211p/Mac1609_4.cc	28;"	d	file:
DECIDER80211PTOPHY80211PINTERFACE_H_	src/veins/modules/phy/Decider80211pToPhy80211pInterface.h	22;"	d
DECIDER80211p_H_	src/veins/modules/phy/Decider80211p.h	23;"	d
DECIDERRESULT80211_H_	src/veins/modules/phy/DeciderResult80211.h	11;"	d
DECIDER_H_	src/veins/base/phyLayer/Decider.h	8;"	d
DECIDER_TO_PHY_INTERFACE_H_	src/veins/base/phyLayer/DeciderToPhyInterface.h	8;"	d
DECODED	src/veins/modules/phy/Decider80211p.h	/^		enum PACKET_OK_RESULT {DECODED, NOT_DECODED, COLLISION};$/;"	e	enum:Decider80211p::PACKET_OK_RESULT
DEPART_LANE_BEST_FREE	src/veins/modules/mobility/traci/TraCICommandInterface.h	/^			DEPART_LANE_BEST_FREE = 5,$/;"	e	enum:Veins::TraCICommandInterface::DepartDefs
DEPART_NOW	src/veins/modules/mobility/traci/TraCICommandInterface.h	/^			DEPART_NOW = 2,$/;"	e	enum:Veins::TraCICommandInterface::DepartDefs
DEPART_POS_BASE	src/veins/modules/mobility/traci/TraCICommandInterface.h	/^			DEPART_POS_BASE = 4,$/;"	e	enum:Veins::TraCICommandInterface::DepartDefs
DEPART_SPEED_MAX	src/veins/modules/mobility/traci/TraCICommandInterface.h	/^			DEPART_SPEED_MAX = 3$/;"	e	enum:Veins::TraCICommandInterface::DepartDefs
DISABLE_ACKS	src/veins/modules/application/platooning/UnicastProtocol.h	/^	DISABLE_ACKS,$/;"	e	enum:ControlMessageCommand
DISTANCE_REQUEST	src/veins/modules/mobility/traci/TraCIConstants.h	718;"	d
DRIVER	src/veins/modules/application/platooning/CC_Const.h	/^{DRIVER = 0, ACC = 1, CACC = 2, FAKED_CACC = 3, PLOEG = 4};$/;"	e	enum:Plexe::ACTIVE_CONTROLLER
DRIVER_CHOICE	src/veins/modules/application/platooning/CC_Const.h	/^    DRIVER_CHOICE = 0,        \/\/the platooning management is not active, so just let the driver choose the lane$/;"	e	enum:Plexe::PLATOONING_LANE_CHANGE_ACTION
Decider	src/veins/base/phyLayer/Decider.cc	/^Decider::Decider(DeciderToPhyInterface* phy):$/;"	f	class:Decider
Decider	src/veins/base/phyLayer/Decider.h	/^class MIXIM_API Decider$/;"	c
Decider80211ControlKinds	src/veins/modules/phy/Decider80211p.h	/^		enum Decider80211ControlKinds {$/;"	g	class:Decider80211p
Decider80211p	src/veins/modules/phy/Decider80211p.h	/^		Decider80211p(DeciderToPhyInterface* phy,$/;"	f	class:Decider80211p
Decider80211p	src/veins/modules/phy/Decider80211p.h	/^class Decider80211p: public BaseDecider {$/;"	c
Decider80211pToPhy80211pInterface	src/veins/modules/phy/Decider80211pToPhy80211pInterface.h	/^class Decider80211pToPhy80211pInterface {$/;"	c
DeciderResult	src/veins/base/phyLayer/Decider.h	/^	DeciderResult(bool isCorrect = true):$/;"	f	class:DeciderResult
DeciderResult	src/veins/base/phyLayer/Decider.h	/^class MIXIM_API DeciderResult$/;"	c
DeciderResult80211	src/veins/modules/phy/DeciderResult80211.h	/^	DeciderResult80211(bool isCorrect, double bitrate, double snr, double recvPower_dBm = 0, bool collision = false):$/;"	f	class:DeciderResult80211
DeciderResult80211	src/veins/modules/phy/DeciderResult80211.h	/^class MIXIM_API DeciderResult80211 : public DeciderResult{$/;"	c
DeciderToPhyInterface	src/veins/base/phyLayer/DeciderToPhyInterface.h	/^class MIXIM_API DeciderToPhyInterface$/;"	c
DelayedMapping	src/veins/base/phyLayer/MappingUtils.h	/^	DelayedMapping(Mapping* mapping, simtime_t_cref delay):$/;"	f	class:DelayedMapping
DelayedMapping	src/veins/base/phyLayer/MappingUtils.h	/^class MIXIM_API DelayedMapping: public BaseDelayedMapping<Mapping> {$/;"	c
DelayedMappingIterator	src/veins/base/phyLayer/MappingUtils.h	/^typedef BaseDelayedIterator<FilteredMappingIterator, MappingIterator> DelayedMappingIterator;$/;"	t
DepartDefs	src/veins/modules/mobility/traci/TraCICommandInterface.h	/^		enum DepartDefs {$/;"	g	class:Veins::TraCICommandInterface
DimIteratorPair	src/veins/base/phyLayer/MappingUtils.h	/^	typedef std::pair<Dimension, Argument::const_iterator> DimIteratorPair;$/;"	t	class:ConcatConstMapping
Dimension	src/veins/base/phyLayer/MappingBase.cc	/^Dimension::Dimension(const Dimension::DimensionNameType& name)$/;"	f	class:Dimension
Dimension	src/veins/base/phyLayer/MappingBase.h	/^	Dimension():$/;"	f	class:Dimension
Dimension	src/veins/base/phyLayer/MappingBase.h	/^class MIXIM_API Dimension {$/;"	c
DimensionIDMap	src/veins/base/phyLayer/MappingBase.h	/^	typedef std::map<std::string, int>   DimensionIDMap;$/;"	t	class:Dimension
DimensionIdType	src/veins/base/phyLayer/MappingBase.h	/^	typedef DimensionIDMap::mapped_type  DimensionIdType;$/;"	t	class:Dimension
DimensionNameMap	src/veins/base/phyLayer/MappingBase.h	/^			        , DimensionNameType> DimensionNameMap;$/;"	t	class:Dimension
DimensionNameType	src/veins/base/phyLayer/MappingBase.h	/^	typedef DimensionIDMap::key_type     DimensionNameType;$/;"	t	class:Dimension
DimensionSet	src/veins/base/phyLayer/MappingBase.h	/^	DimensionSet() {}$/;"	f	class:DimensionSet
DimensionSet	src/veins/base/phyLayer/MappingBase.h	/^	DimensionSet(const DimensionSet::value_type& d){$/;"	f	class:DimensionSet
DimensionSet	src/veins/base/phyLayer/MappingBase.h	/^	DimensionSet(const DimensionSet::value_type& d1, const DimensionSet::value_type& d2){$/;"	f	class:DimensionSet
DimensionSet	src/veins/base/phyLayer/MappingBase.h	/^	DimensionSet(const DimensionSet::value_type& d1, const DimensionSet::value_type& d2, const DimensionSet::value_type& d3){$/;"	f	class:DimensionSet
DimensionSet	src/veins/base/phyLayer/MappingBase.h	/^class MIXIM_API DimensionSet:public std::set<Dimension> {$/;"	c
DrawAmount	src/veins/base/modules/BaseBattery.h	/^	DrawAmount(int type = CURRENT, double value = 0):$/;"	f	class:DrawAmount
DrawAmount	src/veins/base/modules/BaseBattery.h	/^class MIXIM_API DrawAmount {$/;"	c
EDCA	src/veins/modules/mac/ieee80211p/Mac1609_4.h	/^				EDCA(t_channel channelType,int maxQueueLength = 0):numQueues(0),maxQueueSize(maxQueueLength),channelType(channelType) {$/;"	f	class:Mac1609_4::EDCA
EDCA	src/veins/modules/mac/ieee80211p/Mac1609_4.h	/^		class EDCA {$/;"	c	class:Mac1609_4
EDCAQueue	src/veins/modules/mac/ieee80211p/Mac1609_4.h	/^						EDCAQueue() {	};$/;"	f	class:Mac1609_4::EDCA::EDCAQueue
EDCAQueue	src/veins/modules/mac/ieee80211p/Mac1609_4.h	/^						EDCAQueue(int aifsn,int cwMin, int cwMax, t_access_category ac):aifsn(aifsn),cwMin(cwMin),cwMax(cwMax),cwCur(cwMin),currentBackoff(0),txOP(false) {$/;"	f	class:Mac1609_4::EDCA::EDCAQueue
EDCAQueue	src/veins/modules/mac/ieee80211p/Mac1609_4.h	/^				class EDCAQueue {$/;"	c	class:Mac1609_4::EDCA
ENABLE_ACKS	src/veins/modules/application/platooning/UnicastProtocol.h	/^	ENABLE_ACKS,$/;"	e	enum:ControlMessageCommand
END_RECEIVE	src/veins/base/phyLayer/BasePhyLayer.h	/^		END_RECEIVE$/;"	e	enum:BasePhyLayer::AirFrameStates
ENERGY	src/veins/base/modules/BaseBattery.h	/^		ENERGY 		\/** @brief Single fixed energy draw in mWs *\/$/;"	e	enum:DrawAmount::PowerType
EPSILON	src/veins/base/utils/FWMath.h	92;"	d
EVT_SCHEDULED_ERASE	src/veins/modules/world/annotations/AnnotationManager.cc	/^	const short EVT_SCHEDULED_ERASE = 3;$/;"	m	namespace:__anon7	file:
EXPECT_END	src/veins/base/phyLayer/BaseDecider.h	/^		EXPECT_END,$/;"	e	enum:BaseDecider::SignalState
EXPECT_HEADER	src/veins/base/phyLayer/BaseDecider.h	/^		EXPECT_HEADER,$/;"	e	enum:BaseDecider::SignalState
EXTRA_OBJS	src/Makefile	/^EXTRA_OBJS =$/;"	m
FAILED	src/veins/base/utils/HostState.h	/^          FAILED,	\/** Host is not active because of some failure$/;"	e	enum:HostState::States
FAKED_CACC	src/veins/modules/application/platooning/CC_Const.h	/^{DRIVER = 0, ACC = 1, CACC = 2, FAKED_CACC = 3, PLOEG = 4};$/;"	e	enum:Plexe::ACTIVE_CONTROLLER
FIND_MODULE_H	src/veins/base/utils/FindModule.h	2;"	d
FL	src/veins/modules/application/platooning/bikeplatoons/BikesApp.h	28;"	d
FM_BECOME_LEADER	src/veins/modules/application/platooning/bikeplatoons/BikesApp.h	/^			FM_BECOME_LEADER = 3,$/;"	e	enum:BikesApp::FOLLOWER_MSGS
FM_BECOME_LEAVER	src/veins/modules/application/platooning/bikeplatoons/BikesApp.h	/^			FM_BECOME_LEAVER = 2,$/;"	e	enum:BikesApp::FOLLOWER_MSGS
FM_FIX_FORMATION	src/veins/modules/application/platooning/bikeplatoons/BikesApp.h	/^			FM_FIX_FORMATION = 5$/;"	e	enum:BikesApp::FOLLOWER_MSGS
FM_NOTIFY_BIKE	src/veins/modules/application/platooning/bikeplatoons/BikesApp.h	/^			FM_NOTIFY_BIKE = 4,$/;"	e	enum:BikesApp::FOLLOWER_MSGS
FOLLOWER	src/veins/modules/application/platooning/bikeplatoons/BikesApp.h	/^		enum ROLES {LEADER, FOLLOWER, LEAVER, BIKE};$/;"	e	enum:BikesApp::ROLES
FOLLOWER	src/veins/modules/application/platooning/bikes/BikeManeuver.h	/^		enum ROLE { LEADER, FOLLOWER, BIKE };$/;"	e	enum:BikeManeuver::ROLE
FOLLOWER	src/veins/modules/application/platooning/maneuver/JoinManeuverApp.h	/^		enum JOIN_ROLE {LEADER, FOLLOWER, JOINER};$/;"	e	enum:JoinManeuverApp::JOIN_ROLE
FOLLOWER_MSGS	src/veins/modules/application/platooning/bikeplatoons/BikesApp.h	/^		enum FOLLOWER_MSGS {$/;"	g	class:BikesApp
FOLLOWER_STATES	src/veins/modules/application/platooning/bikeplatoons/BikesApp.h	/^        } FOLLOWER_STATES;$/;"	t	class:BikesApp	typeref:enum:BikesApp::_FOLLOWER_STATES
FOLLOWER_STATES	src/veins/modules/application/platooning/bikes/BikeManeuver.h	/^		} FOLLOWER_STATES;$/;"	t	class:BikeManeuver	typeref:enum:BikeManeuver::_FOLLOWER_STATES
FOLLOWER_STATES	src/veins/modules/application/platooning/maneuver/JoinManeuverApp.h	/^		} FOLLOWER_STATES;$/;"	t	class:JoinManeuverApp	typeref:enum:JoinManeuverApp::_FOLLOWER_STATES
FS_FOLLOW	src/veins/modules/application/platooning/bikeplatoons/BikesApp.h	/^            FS_FOLLOW = FSM_Steady(1), \/\/normal following$/;"	e	enum:BikesApp::_FOLLOWER_STATES
FS_FOLLOW	src/veins/modules/application/platooning/maneuver/JoinManeuverApp.h	/^			FS_FOLLOW = FSM_Steady(1)$/;"	e	enum:JoinManeuverApp::_FOLLOWER_STATES
FS_FRONT_LEAVING	src/veins/modules/application/platooning/bikeplatoons/BikesApp.h	/^            FS_FRONT_LEAVING = FSM_Steady(2) \/\/the front car is now a leaver: notify bikes and get new front car$/;"	e	enum:BikesApp::_FOLLOWER_STATES
FS_IDLE	src/veins/modules/application/platooning/bikes/BikeManeuver.h	/^			FS_IDLE = FSM_Steady( 1 ),$/;"	e	enum:BikeManeuver::_FOLLOWER_STATES
FS_INIT	src/veins/modules/application/platooning/bikeplatoons/BikesApp.h	/^            FS_INIT = 0,$/;"	e	enum:BikesApp::_FOLLOWER_STATES
FS_INIT	src/veins/modules/application/platooning/bikes/BikeManeuver.h	/^			FS_INIT = 0,$/;"	e	enum:BikeManeuver::_FOLLOWER_STATES
FS_INIT	src/veins/modules/application/platooning/maneuver/JoinManeuverApp.h	/^			FS_INIT = 0,$/;"	e	enum:JoinManeuverApp::_FOLLOWER_STATES
FULL_QUEUE	src/veins/modules/application/platooning/UnicastProtocol.h	/^	FULL_QUEUE$/;"	e	enum:ControlMessageCommand
FUNCTION_H_	src/veins/base/phyLayer/MappingBase.h	2;"	d
FWMATH_H	src/veins/base/utils/FWMath.h	26;"	d
FWMath	src/veins/base/utils/FWMath.h	/^class MIXIM_API FWMath {$/;"	c
FilledUpMapping	src/veins/base/phyLayer/MappingUtils.h	/^	FilledUpMapping(const ConstMapping* source, const DimensionSet& dims, const KeyMap& rkeys):$/;"	f	class:FilledUpMapping
FilledUpMapping	src/veins/base/phyLayer/MappingUtils.h	/^	FilledUpMapping(const DimensionSet& myDims, Dimension myDim, const KeyMap& rkeys):$/;"	f	class:FilledUpMapping
FilledUpMapping	src/veins/base/phyLayer/MappingUtils.h	/^class MIXIM_API FilledUpMapping : public MultiDimMapping<Linear> {$/;"	c
FilledUpMappingIterator	src/veins/base/phyLayer/MappingUtils.cc	/^FilledUpMappingIterator::FilledUpMappingIterator(FilledUpMapping& mapping):$/;"	f	class:FilledUpMappingIterator
FilledUpMappingIterator	src/veins/base/phyLayer/MappingUtils.cc	/^FilledUpMappingIterator::FilledUpMappingIterator(FilledUpMapping& mapping, const Argument& pos):$/;"	f	class:FilledUpMappingIterator
FilledUpMappingIterator	src/veins/base/phyLayer/MappingUtils.h	/^class MIXIM_API FilledUpMappingIterator : public MultiDimMappingIterator<Linear>{$/;"	c
FilteredConstMappingIterator	src/veins/base/phyLayer/MappingUtils.h	/^typedef BaseFilteredIterator<ConstMappingIterator> FilteredConstMappingIterator;$/;"	t
FilteredMappingIterator	src/veins/base/phyLayer/MappingUtils.h	/^	FilteredMappingIterator(MappingIterator* orig):$/;"	f	class:FilteredMappingIterator
FilteredMappingIterator	src/veins/base/phyLayer/MappingUtils.h	/^class MIXIM_API FilteredMappingIterator : public BaseFilteredIterator<MappingIterator> {$/;"	c
FindModule	src/veins/base/utils/FindModule.h	/^class FindModule$/;"	c
GENERIC	src/veins/base/phyLayer/BasePhyLayer.h	/^		GENERIC = 0,$/;"	e	enum:BasePhyLayer::ProtocolIds
GRIDCELL_SIZE	src/veins/modules/obstacle/ObstacleControl.h	/^		enum { GRIDCELL_SIZE = 1024 };$/;"	e	enum:Veins::ObstacleControl::__anon6
GUARD_INTERVAL_11P	src/veins/modules/utility/Consts80211p.h	/^const SimTime GUARD_INTERVAL_11P = SimTime().setRaw(4000000000UL);$/;"	v
GateList	src/veins/base/connectionManager/NicEntry.h	/^    typedef std::map<const NicEntry*, cGate*, NicEntryComparator> GateList;$/;"	t	class:NicEntry
GateStack	src/veins/base/connectionManager/NicEntryDebug.h	/^    typedef std::vector<cGate* > GateStack;$/;"	t	class:NicEntryDebug
GridCoord	src/veins/base/connectionManager/BaseConnectionManager.h	/^		GridCoord()$/;"	f	class:BaseConnectionManager::GridCoord
GridCoord	src/veins/base/connectionManager/BaseConnectionManager.h	/^		GridCoord(const GridCoord& o) {$/;"	f	class:BaseConnectionManager::GridCoord
GridCoord	src/veins/base/connectionManager/BaseConnectionManager.h	/^		GridCoord(int x, int y)$/;"	f	class:BaseConnectionManager::GridCoord
GridCoord	src/veins/base/connectionManager/BaseConnectionManager.h	/^		GridCoord(int x, int y, int z)$/;"	f	class:BaseConnectionManager::GridCoord
GridCoord	src/veins/base/connectionManager/BaseConnectionManager.h	/^	class GridCoord$/;"	c	class:BaseConnectionManager
GridCoord	src/veins/base/connectionManager/BaseConnectionManager.h	/^        GridCoord(const Coord& c, const Coord& gridCellSize = Coord(1.0,1.0,1.0)) {$/;"	f	class:BaseConnectionManager::GridCoord
Group	src/veins/modules/world/annotations/AnnotationManager.h	/^				Group(std::string title) : title(title) {}$/;"	f	class:Veins::AnnotationManager::Group
Group	src/veins/modules/world/annotations/AnnotationManager.h	/^		class Group {$/;"	c	class:Veins::AnnotationManager
Groups	src/veins/modules/world/annotations/AnnotationManager.h	/^		typedef std::list<Group*> Groups;$/;"	t	class:Veins::AnnotationManager
GuiView	src/veins/modules/mobility/traci/TraCICommandInterface.h	/^				GuiView(TraCICommandInterface* traci, std::string viewId) : traci(traci), viewId(viewId) {$/;"	f	class:Veins::TraCICommandInterface::GuiView
GuiView	src/veins/modules/mobility/traci/TraCICommandInterface.h	/^		class GuiView {$/;"	c	class:Veins::TraCICommandInterface
HOSTSTATE_H	src/veins/base/utils/HostState.h	15;"	d
HPPS	src/veins/modules/utility/Consts80211p.h	/^	HPPS = 184$/;"	e	enum:Channels::ChannelNumber
HostState	src/veins/base/utils/HostState.h	/^    HostState(States state = ACTIVE):$/;"	f	class:HostState
HostState	src/veins/base/utils/HostState.h	/^class MIXIM_API HostState : public cObject$/;"	c
ID_COUNT	src/veins/modules/mobility/traci/TraCIConstants.h	381;"	d
ID_LIST	src/veins/modules/mobility/traci/TraCIConstants.h	378;"	d
IEEE_80211	src/veins/modules/phy/PhyLayer80211p.h	/^			IEEE_80211 = 12123$/;"	e	enum:PhyLayer80211p::ProtocolIds
INCLUDE_PATH	src/Makefile	/^INCLUDE_PATH = -I.$/;"	m
INCOMING	src/veins/base/utils/PassedMessage.h	/^        INCOMING,$/;"	e	enum:PassedMessage::direction_t
INTERPOLATION_H_	src/veins/base/phyLayer/Interpolation.h	2;"	d
INVALID_DOUBLE_VALUE	src/veins/modules/mobility/traci/TraCIConstants.h	330;"	d
INVALID_INT_VALUE	src/veins/modules/mobility/traci/TraCIConstants.h	332;"	d
InsertQueue	src/veins/modules/mobility/traci/TraCIBaseTrafficManager.h	/^		typedef std::map<int, std::deque<struct Vehicle> > InsertQueue;$/;"	t	class:TraCIBaseTrafficManager
InterpolateableIterator	src/veins/base/phyLayer/Interpolation.h	/^	InterpolateableIterator(container_type& cont, const interpolator_type& intpl):$/;"	f	class:InterpolateableIterator
InterpolateableIterator	src/veins/base/phyLayer/Interpolation.h	/^class InterpolateableIterator : public ConstInterpolateableIterator<TInterpolator, typename TInterpolator::iterator>$/;"	c
InterpolateableMap	src/veins/base/phyLayer/Interpolation.h	/^	InterpolateableMap() {}$/;"	f	class:InterpolateableMap
InterpolateableMap	src/veins/base/phyLayer/Interpolation.h	/^	InterpolateableMap(mapped_cref_type oorv):$/;"	f	class:InterpolateableMap
InterpolateableMap	src/veins/base/phyLayer/Interpolation.h	/^class InterpolateableMap : public TContainer {$/;"	c
Interpolated	src/veins/base/phyLayer/Interpolation.h	/^	Interpolated():$/;"	f	class:Interpolated
Interpolated	src/veins/base/phyLayer/Interpolation.h	/^	Interpolated(const Interpolated<value_type>& o):$/;"	f	class:Interpolated
Interpolated	src/veins/base/phyLayer/Interpolation.h	/^	Interpolated(value_cref_type v, bool isIntpl = true):$/;"	f	class:Interpolated
Interpolated	src/veins/base/phyLayer/Interpolation.h	/^class Interpolated {$/;"	c
Interpolated	src/veins/base/phyLayer/MappingUtils.h	/^	Interpolated(const Interpolated<value_type>& o):$/;"	f	class:Interpolated
Interpolated	src/veins/base/phyLayer/MappingUtils.h	/^	Interpolated(const LinearIntplMapping& m):$/;"	f	class:Interpolated
Interpolated	src/veins/base/phyLayer/MappingUtils.h	/^	Interpolated(value_type v, bool isIntpl = true):$/;"	f	class:Interpolated
Interpolated	src/veins/base/phyLayer/MappingUtils.h	/^class Interpolated<Mapping*> {$/;"	c
InterpolationMethod	src/veins/base/phyLayer/MappingBase.h	/^	enum InterpolationMethod {$/;"	g	class:Mapping
InterpolatorBase	src/veins/base/phyLayer/Interpolation.h	/^	InterpolatorBase():$/;"	f	class:InterpolatorBase
InterpolatorBase	src/veins/base/phyLayer/Interpolation.h	/^	InterpolatorBase(mapped_cref_type oorv):$/;"	f	class:InterpolatorBase
InterpolatorBase	src/veins/base/phyLayer/Interpolation.h	/^class InterpolatorBase {$/;"	c
IntersectionIterator	src/veins/base/phyLayer/ChannelInfo.h	/^		IntersectionIterator(AirFrameMatrix* airFrames,$/;"	f	class:ChannelInfo::IntersectionIterator
IntersectionIterator	src/veins/base/phyLayer/ChannelInfo.h	/^	class IntersectionIterator:$/;"	c	class:ChannelInfo
JAKESFADING_H_	src/veins/modules/analogueModel/JakesFading.h	17;"	d
JAM_LENGTH_METERS	src/veins/modules/mobility/traci/TraCIConstants.h	417;"	d
JAM_LENGTH_VEHICLE	src/veins/modules/mobility/traci/TraCIConstants.h	414;"	d
JM_IN_PLATOON	src/veins/modules/application/platooning/maneuver/JoinManeuverApp.h	/^			JM_IN_PLATOON = 5$/;"	e	enum:JoinManeuverApp::JOINER_MSGS
JM_IN_POSITION	src/veins/modules/application/platooning/maneuver/JoinManeuverApp.h	/^			JM_IN_POSITION = 4,$/;"	e	enum:JoinManeuverApp::JOINER_MSGS
JM_REQUEST_JOIN	src/veins/modules/application/platooning/maneuver/JoinManeuverApp.h	/^			JM_REQUEST_JOIN = 3,$/;"	e	enum:JoinManeuverApp::JOINER_MSGS
JOINER	src/veins/modules/application/platooning/maneuver/JoinManeuverApp.h	/^		enum JOIN_ROLE {LEADER, FOLLOWER, JOINER};$/;"	e	enum:JoinManeuverApp::JOIN_ROLE
JOINER_MSGS	src/veins/modules/application/platooning/maneuver/JoinManeuverApp.h	/^		enum JOINER_MSGS {$/;"	g	class:JoinManeuverApp
JOINER_STATES	src/veins/modules/application/platooning/maneuver/JoinManeuverApp.h	/^		} JOINER_STATES;$/;"	t	class:JoinManeuverApp	typeref:enum:JoinManeuverApp::_JOINER_STATES
JOINMANEUVERAPP_H_	src/veins/modules/application/platooning/maneuver/JoinManeuverApp.h	17;"	d
JOIN_ROLE	src/veins/modules/application/platooning/maneuver/JoinManeuverApp.h	/^		enum JOIN_ROLE {LEADER, FOLLOWER, JOINER};$/;"	g	class:JoinManeuverApp
JS_FOLLOW	src/veins/modules/application/platooning/maneuver/JoinManeuverApp.h	/^			JS_FOLLOW = FSM_Steady(6)$/;"	e	enum:JoinManeuverApp::_JOINER_STATES
JS_IDLE	src/veins/modules/application/platooning/maneuver/JoinManeuverApp.h	/^			JS_IDLE = FSM_Steady(1),$/;"	e	enum:JoinManeuverApp::_JOINER_STATES
JS_INIT	src/veins/modules/application/platooning/maneuver/JoinManeuverApp.h	/^			JS_INIT = 0,$/;"	e	enum:JoinManeuverApp::_JOINER_STATES
JS_JOIN_PLATOON	src/veins/modules/application/platooning/maneuver/JoinManeuverApp.h	/^			JS_JOIN_PLATOON = FSM_Steady(5),$/;"	e	enum:JoinManeuverApp::_JOINER_STATES
JS_MOVE_IN_POSITION	src/veins/modules/application/platooning/maneuver/JoinManeuverApp.h	/^			JS_MOVE_IN_POSITION = FSM_Steady(3),$/;"	e	enum:JoinManeuverApp::_JOINER_STATES
JS_WAIT_JOIN	src/veins/modules/application/platooning/maneuver/JoinManeuverApp.h	/^			JS_WAIT_JOIN = FSM_Steady(4),$/;"	e	enum:JoinManeuverApp::_JOINER_STATES
JS_WAIT_REPLY	src/veins/modules/application/platooning/maneuver/JoinManeuverApp.h	/^			JS_WAIT_REPLY = FSM_Steady(2),$/;"	e	enum:JoinManeuverApp::_JOINER_STATES
JakesFading	src/veins/modules/analogueModel/JakesFading.cc	/^JakesFading::JakesFading(int fadingPaths, simtime_t_cref delayRMS,$/;"	f	class:JakesFading
JakesFading	src/veins/modules/analogueModel/JakesFading.h	/^class MIXIM_API JakesFading: public AnalogueModel {$/;"	c
JakesFadingMapping	src/veins/modules/analogueModel/JakesFading.h	/^	JakesFadingMapping(JakesFading* model, double relSpeed,$/;"	f	class:JakesFadingMapping
JakesFadingMapping	src/veins/modules/analogueModel/JakesFading.h	/^class MIXIM_API JakesFadingMapping: public SimpleConstMapping {$/;"	c
JoinManeuverApp	src/veins/modules/application/platooning/maneuver/JoinManeuverApp.cc	/^Define_Module(JoinManeuverApp);$/;"	v
JoinManeuverApp	src/veins/modules/application/platooning/maneuver/JoinManeuverApp.h	/^		JoinManeuverApp()	{$/;"	f	class:JoinManeuverApp
JoinManeuverApp	src/veins/modules/application/platooning/maneuver/JoinManeuverApp.h	/^class JoinManeuverApp : public BaseApp$/;"	c
Junction	src/veins/modules/mobility/traci/TraCICommandInterface.h	/^				Junction(TraCICommandInterface* traci, std::string junctionId) : traci(traci), junctionId(junctionId) {$/;"	f	class:Veins::TraCICommandInterface::Junction
Junction	src/veins/modules/mobility/traci/TraCICommandInterface.h	/^		class Junction {$/;"	c	class:Veins::TraCICommandInterface
KeyEntrySet	src/veins/base/phyLayer/MappingBase.h	/^	typedef std::set<Argument>       KeyEntrySet;$/;"	t	class:SimpleConstMappingIterator
KeyEntrySet	src/veins/base/phyLayer/MappingBase.h	/^	typedef std::set<Argument> KeyEntrySet;$/;"	t	class:SimpleConstMapping
KeyEntryType	src/veins/base/phyLayer/MappingBase.h	/^	typedef KeyEntrySet::value_type  KeyEntryType;$/;"	t	class:SimpleConstMappingIterator
KeyMap	src/veins/base/phyLayer/MappingUtils.h	/^	typedef std::map<Dimension, KeySet > KeyMap;$/;"	t	class:FilledUpMapping
KeySet	src/veins/base/phyLayer/MappingUtils.h	/^	typedef std::set<argument_value_t>   KeySet;$/;"	t	class:FilledUpMapping
L2BROADCAST	src/veins/base/utils/SimpleAddress.cc	/^const LAddress::L2Type LAddress::L2BROADCAST = $/;"	m	class:LAddress	file:
L2BROADCAST	src/veins/base/utils/SimpleAddress.h	/^    static const L2Type L2BROADCAST;$/;"	m	class:LAddress
L2NULL	src/veins/base/utils/SimpleAddress.cc	/^const LAddress::L2Type LAddress::L2NULL      = $/;"	m	class:LAddress	file:
L2NULL	src/veins/base/utils/SimpleAddress.h	/^    static const L2Type L2NULL;$/;"	m	class:LAddress
L2Type	src/veins/base/utils/SimpleAddress.h	/^    typedef long L2Type;$/;"	t	class:LAddress
L3BROADCAST	src/veins/base/utils/SimpleAddress.cc	/^const LAddress::L3Type LAddress::L3BROADCAST = LAddress::L3Type(-1);$/;"	m	class:LAddress	file:
L3BROADCAST	src/veins/base/utils/SimpleAddress.h	/^    static const L3Type L3BROADCAST;$/;"	m	class:LAddress
L3NULL	src/veins/base/utils/SimpleAddress.cc	/^const LAddress::L3Type LAddress::L3NULL      = LAddress::L3Type(0);$/;"	m	class:LAddress	file:
L3NULL	src/veins/base/utils/SimpleAddress.h	/^    static const L3Type L3NULL;$/;"	m	class:LAddress
L3Type	src/veins/base/utils/SimpleAddress.h	/^    typedef long L3Type;$/;"	t	class:LAddress
LANE_ALLOWED	src/veins/modules/mobility/traci/TraCIConstants.h	468;"	d
LANE_DISALLOWED	src/veins/modules/mobility/traci/TraCIConstants.h	471;"	d
LANE_EDGE_ID	src/veins/modules/mobility/traci/TraCIConstants.h	462;"	d
LANE_LINKS	src/veins/modules/mobility/traci/TraCIConstants.h	465;"	d
LANE_LINK_NUMBER	src/veins/modules/mobility/traci/TraCIConstants.h	459;"	d
LARGE_SPACING	src/veins/modules/application/platooning/maneuver/JoinManeuverApp.cc	18;"	d	file:
LAST_BASE_APPL_CONTROL_KIND	src/veins/base/modules/BaseApplLayer.h	/^		LAST_BASE_APPL_CONTROL_KIND = 25500,$/;"	e	enum:BaseApplLayer::BaseApplControlKinds
LAST_BASE_APPL_MESSAGE_KIND	src/veins/base/modules/BaseApplLayer.h	/^		LAST_BASE_APPL_MESSAGE_KIND = 25000,$/;"	e	enum:BaseApplLayer::BaseApplMessageKinds
LAST_BASE_DECIDER_CONTROL_KIND	src/veins/base/phyLayer/BaseDecider.h	/^		LAST_BASE_DECIDER_CONTROL_KIND$/;"	e	enum:BaseDecider::BaseDeciderControlKinds
LAST_BASE_MAC_CONTROL_KIND	src/veins/base/modules/BaseMacLayer.h	/^        LAST_BASE_MAC_CONTROL_KIND,$/;"	e	enum:BaseMacLayer::BaseMacControlKinds
LAST_BASE_MAC_MESSAGE_KIND	src/veins/base/modules/BaseMacLayer.h	/^        LAST_BASE_MAC_MESSAGE_KIND = 23000,$/;"	e	enum:BaseMacLayer::BaseMacMessageKinds
LAST_BASE_MOBILITY_KIND	src/veins/base/modules/BaseMobility.h	/^		LAST_BASE_MOBILITY_KIND,$/;"	e	enum:BaseMobility::BaseMobilityMsgKinds
LAST_BASE_PHY_KIND	src/veins/base/phyLayer/MacToPhyInterface.h	/^		LAST_BASE_PHY_KIND,$/;"	e	enum:MacToPhyInterface::BasePhyMessageKinds
LAST_DECIDER_80211_CONTROL_KIND	src/veins/modules/phy/Decider80211p.h	/^			LAST_DECIDER_80211_CONTROL_KIND,$/;"	e	enum:Decider80211p::Decider80211ControlKinds
LAST_STEP_LENGTH	src/veins/modules/mobility/traci/TraCIConstants.h	405;"	d
LAST_STEP_MEAN_SPEED	src/veins/modules/mobility/traci/TraCIConstants.h	393;"	d
LAST_STEP_OCCUPANCY	src/veins/modules/mobility/traci/TraCIConstants.h	399;"	d
LAST_STEP_TIME_SINCE_DETECTION	src/veins/modules/mobility/traci/TraCIConstants.h	408;"	d
LAST_STEP_VEHICLE_DATA	src/veins/modules/mobility/traci/TraCIConstants.h	411;"	d
LAST_STEP_VEHICLE_HALTING_NUMBER	src/veins/modules/mobility/traci/TraCIConstants.h	402;"	d
LAST_STEP_VEHICLE_ID_LIST	src/veins/modules/mobility/traci/TraCIConstants.h	396;"	d
LAST_STEP_VEHICLE_NUMBER	src/veins/modules/mobility/traci/TraCIConstants.h	390;"	d
LAddress	src/veins/base/utils/SimpleAddress.h	/^class MIXIM_API LAddress {$/;"	c
LD	src/veins/modules/application/platooning/bikeplatoons/BikesApp.h	27;"	d
LEADER	src/veins/modules/application/platooning/bikeplatoons/BikesApp.h	/^		enum ROLES {LEADER, FOLLOWER, LEAVER, BIKE};$/;"	e	enum:BikesApp::ROLES
LEADER	src/veins/modules/application/platooning/bikes/BikeManeuver.h	/^		enum ROLE { LEADER, FOLLOWER, BIKE };$/;"	e	enum:BikeManeuver::ROLE
LEADER	src/veins/modules/application/platooning/maneuver/JoinManeuverApp.h	/^		enum JOIN_ROLE {LEADER, FOLLOWER, JOINER};$/;"	e	enum:JoinManeuverApp::JOIN_ROLE
LEADER_MSGS	src/veins/modules/application/platooning/bikeplatoons/BikesApp.h	/^		enum LEADER_MSGS {$/;"	g	class:BikesApp
LEADER_MSGS	src/veins/modules/application/platooning/bikes/BikeManeuver.h	/^        enum LEADER_MSGS {$/;"	g	class:BikeManeuver
LEADER_MSGS	src/veins/modules/application/platooning/maneuver/JoinManeuverApp.h	/^		enum LEADER_MSGS {$/;"	g	class:JoinManeuverApp
LEADER_STATES	src/veins/modules/application/platooning/bikeplatoons/BikesApp.h	/^		} LEADER_STATES;$/;"	t	class:BikesApp	typeref:enum:BikesApp::_LEADER_STATES
LEADER_STATES	src/veins/modules/application/platooning/bikes/BikeManeuver.h	/^		} LEADER_STATES;$/;"	t	class:BikeManeuver	typeref:enum:BikeManeuver::_LEADER_STATES
LEADER_STATES	src/veins/modules/application/platooning/maneuver/JoinManeuverApp.h	/^		} LEADER_STATES;$/;"	t	class:JoinManeuverApp	typeref:enum:JoinManeuverApp::_LEADER_STATES
LEAVER	src/veins/modules/application/platooning/bikeplatoons/BikesApp.h	/^		enum ROLES {LEADER, FOLLOWER, LEAVER, BIKE};$/;"	e	enum:BikesApp::ROLES
LEAVER_MSGS	src/veins/modules/application/platooning/bikeplatoons/BikesApp.h	/^        enum LEAVER_MSGS {$/;"	g	class:BikesApp
LEAVER_STATES	src/veins/modules/application/platooning/bikeplatoons/BikesApp.h	/^        } LEAVER_STATES;$/;"	t	class:BikesApp	typeref:enum:BikesApp::_LEAVER_STATES
LIBS	src/Makefile	/^LIBS =$/;"	m
LINEAR	src/veins/base/phyLayer/MappingBase.h	/^		LINEAR$/;"	e	enum:Mapping::InterpolationMethod
LLM_IN_PLATOON	src/veins/modules/application/platooning/bikeplatoons/BikesApp.h	/^            LLM_IN_PLATOON = 6,$/;"	e	enum:BikesApp::LEAVER_MSGS
LLM_NOTIFY_LEAVE	src/veins/modules/application/platooning/bikeplatoons/BikesApp.h	/^            LLM_NOTIFY_LEAVE = 7$/;"	e	enum:BikesApp::LEAVER_MSGS
LM_BECOME_LEAVER	src/veins/modules/application/platooning/bikeplatoons/BikesApp.h	/^			LM_BECOME_LEAVER = 1,$/;"	e	enum:BikesApp::LEADER_MSGS
LM_DONE_TURNING	src/veins/modules/application/platooning/bikes/BikeManeuver.h	/^            LM_DONE_TURNING = 2$/;"	e	enum:BikeManeuver::LEADER_MSGS
LM_INCREASE_SPACING	src/veins/modules/application/platooning/maneuver/JoinManeuverApp.h	/^			LM_INCREASE_SPACING = 3$/;"	e	enum:JoinManeuverApp::LEADER_MSGS
LM_JOIN_PLATOON	src/veins/modules/application/platooning/maneuver/JoinManeuverApp.h	/^			LM_JOIN_PLATOON = 1,$/;"	e	enum:JoinManeuverApp::LEADER_MSGS
LM_MOVE_IN_POSITION	src/veins/modules/application/platooning/maneuver/JoinManeuverApp.h	/^			LM_MOVE_IN_POSITION = 0,$/;"	e	enum:JoinManeuverApp::LEADER_MSGS
LM_TURNING	src/veins/modules/application/platooning/bikes/BikeManeuver.h	/^            LM_TURNING = 1,$/;"	e	enum:BikeManeuver::LEADER_MSGS
LM_UPDATE_FORMATION	src/veins/modules/application/platooning/maneuver/JoinManeuverApp.h	/^			LM_UPDATE_FORMATION = 2,$/;"	e	enum:JoinManeuverApp::LEADER_MSGS
LM_WARNING	src/veins/modules/application/platooning/bikes/BikeManeuver.h	/^            LM_WARNING = 0,$/;"	e	enum:BikeManeuver::LEADER_MSGS
LOGNORMALSHADOWING_H_	src/veins/modules/analogueModel/LogNormalShadowing.h	17;"	d
LOWER_CONTROL	src/veins/base/utils/PassedMessage.h	/^	LOWER_CONTROL$/;"	e	enum:PassedMessage::gates_t
LOWER_DATA	src/veins/base/utils/PassedMessage.h	/^	LOWER_DATA,$/;"	e	enum:PassedMessage::gates_t
LS_BROADCAST	src/veins/modules/application/platooning/bikes/BikeManeuver.h	/^			LS_BROADCAST = FSM_Steady( 2 )$/;"	e	enum:BikeManeuver::_LEADER_STATES
LS_IDLE	src/veins/modules/application/platooning/bikes/BikeManeuver.h	/^			LS_IDLE = FSM_Steady( 1 ),$/;"	e	enum:BikeManeuver::_LEADER_STATES
LS_INIT	src/veins/modules/application/platooning/bikeplatoons/BikesApp.h	/^			LS_INIT = 0,$/;"	e	enum:BikesApp::_LEADER_STATES
LS_INIT	src/veins/modules/application/platooning/bikes/BikeManeuver.h	/^			LS_INIT = 0,$/;"	e	enum:BikeManeuver::_LEADER_STATES
LS_INIT	src/veins/modules/application/platooning/maneuver/JoinManeuverApp.h	/^			LS_INIT = 0,$/;"	e	enum:JoinManeuverApp::_LEADER_STATES
LS_LEADING	src/veins/modules/application/platooning/bikeplatoons/BikesApp.h	/^			LS_LEADING = FSM_Steady(1) \/\/being a good leader$/;"	e	enum:BikesApp::_LEADER_STATES
LS_LEADING	src/veins/modules/application/platooning/maneuver/JoinManeuverApp.h	/^			LS_LEADING = FSM_Steady(1),$/;"	e	enum:JoinManeuverApp::_LEADER_STATES
LS_WAIT_JOINER_IN_POSITION	src/veins/modules/application/platooning/maneuver/JoinManeuverApp.h	/^			LS_WAIT_JOINER_IN_POSITION = FSM_Steady(2),$/;"	e	enum:JoinManeuverApp::_LEADER_STATES
LS_WAIT_JOINER_TO_JOIN	src/veins/modules/application/platooning/maneuver/JoinManeuverApp.h	/^			LS_WAIT_JOINER_TO_JOIN = FSM_Steady(3)$/;"	e	enum:JoinManeuverApp::_LEADER_STATES
LV	src/veins/modules/application/platooning/bikeplatoons/BikesApp.h	29;"	d
LVS_IDLE	src/veins/modules/application/platooning/bikeplatoons/BikesApp.h	/^            LVS_IDLE = FSM_Steady(1), \/\/still in platoon$/;"	e	enum:BikesApp::_LEAVER_STATES
LVS_INIT	src/veins/modules/application/platooning/bikeplatoons/BikesApp.h	/^            LVS_INIT = 0,$/;"	e	enum:BikesApp::_LEAVER_STATES
LVS_LEAVE_PLATOON	src/veins/modules/application/platooning/bikeplatoons/BikesApp.h	/^            LVS_LEAVE_PLATOON = FSM_Steady(2) \/\/not in the platoon anymore!$/;"	e	enum:BikesApp::_LEAVER_STATES
Lane	src/veins/modules/mobility/traci/TraCICommandInterface.h	/^				Lane(TraCICommandInterface* traci, std::string laneId) : traci(traci), laneId(laneId) {$/;"	f	class:Veins::TraCICommandInterface::Lane
Lane	src/veins/modules/mobility/traci/TraCICommandInterface.h	/^		class Lane {$/;"	c	class:Veins::TraCICommandInterface
Line	src/veins/modules/world/annotations/AnnotationManager.h	/^				Line(Coord p1, Coord p2, std::string color) : p1(p1), p2(p2), color(color) {}$/;"	f	class:Veins::AnnotationManager::Line
Line	src/veins/modules/world/annotations/AnnotationManager.h	/^		class Line : public Annotation {$/;"	c	class:Veins::AnnotationManager
Linear	src/veins/base/phyLayer/Interpolation.h	/^	Linear():$/;"	f	class:Linear
Linear	src/veins/base/phyLayer/Interpolation.h	/^	Linear(mapped_cref_type oorv):$/;"	f	class:Linear
Linear	src/veins/base/phyLayer/Interpolation.h	/^class Linear : public InterpolatorBase<_ContainerType>  {$/;"	c
Linear	src/veins/base/phyLayer/MappingUtils.h	/^	Linear():$/;"	f	class:Linear
Linear	src/veins/base/phyLayer/MappingUtils.h	/^	Linear(mapped_cref_type oorv):$/;"	f	class:Linear
Linear	src/veins/base/phyLayer/MappingUtils.h	/^class Linear< std::map<Argument::mapped_type, Mapping*> > : public InterpolatorBase< std::map<Argument::mapped_type, Mapping*> >  {$/;"	c
LinearIntplMapping	src/veins/base/phyLayer/MappingUtils.h	/^	LinearIntplMapping(const ConstMapping *const left = NULL, const ConstMapping *const right = NULL, argument_value_cref_t f = Argument::MappedZero):$/;"	f	class:LinearIntplMapping
LinearIntplMapping	src/veins/base/phyLayer/MappingUtils.h	/^class MIXIM_API LinearIntplMapping:public Mapping {$/;"	c
LinearIntplMappingIterator	src/veins/base/phyLayer/MappingUtils.cc	/^LinearIntplMappingIterator::LinearIntplMappingIterator(ConstMappingIterator* leftIt, ConstMappingIterator* rightIt, Mapping::argument_value_cref_t f):$/;"	f	class:LinearIntplMappingIterator
LinearIntplMappingIterator	src/veins/base/phyLayer/MappingUtils.h	/^class MIXIM_API LinearIntplMappingIterator:public MappingIterator {$/;"	c
ListEntry	src/veins/base/phyLayer/PhyUtils.h	/^		ListEntry(simtime_t_cref time, Argument::mapped_type_cref value) {$/;"	f	class:RadioStateAnalogueModel::ListEntry
ListEntry	src/veins/base/phyLayer/PhyUtils.h	/^	class ListEntry$/;"	c	class:RadioStateAnalogueModel
LogNormalShadowing	src/veins/modules/analogueModel/LogNormalShadowing.cc	/^LogNormalShadowing::LogNormalShadowing(double mean, double stdDev, simtime_t_cref interval):$/;"	f	class:LogNormalShadowing
LogNormalShadowing	src/veins/modules/analogueModel/LogNormalShadowing.h	/^class MIXIM_API LogNormalShadowing: public AnalogueModel {$/;"	c
MAC80211PTOPHY11PINTERFACE_H_	src/veins/modules/mac/ieee80211p/Mac80211pToPhy11pInterface.h	22;"	d
MACTONETWCONTROLINFO_H_	src/veins/base/utils/MacToNetwControlInfo.h	17;"	d
MACTOPHYCONTROLINFO_H_	src/veins/base/phyLayer/MacToPhyControlInfo.h	2;"	d
MACTOPHYINTERFACE_H_	src/veins/base/phyLayer/MacToPhyInterface.h	2;"	d
MAPPING_H_	src/veins/base/phyLayer/Mapping.h	9;"	d
MAX_N_CARS	src/veins/modules/application/platooning/CC_Const.h	62;"	d
MCS_DEFAULT	src/veins/modules/utility/ConstsPhy.h	/^	MCS_DEFAULT = -1,$/;"	e	enum:PHY_MCS
MCS_OFDM_BPSK_R_1_2	src/veins/modules/utility/ConstsPhy.h	/^	MCS_OFDM_BPSK_R_1_2,$/;"	e	enum:PHY_MCS
MCS_OFDM_BPSK_R_3_4	src/veins/modules/utility/ConstsPhy.h	/^	MCS_OFDM_BPSK_R_3_4,$/;"	e	enum:PHY_MCS
MCS_OFDM_QAM16_R_1_2	src/veins/modules/utility/ConstsPhy.h	/^	MCS_OFDM_QAM16_R_1_2,$/;"	e	enum:PHY_MCS
MCS_OFDM_QAM16_R_3_4	src/veins/modules/utility/ConstsPhy.h	/^	MCS_OFDM_QAM16_R_3_4,$/;"	e	enum:PHY_MCS
MCS_OFDM_QAM64_R_2_3	src/veins/modules/utility/ConstsPhy.h	/^	MCS_OFDM_QAM64_R_2_3,$/;"	e	enum:PHY_MCS
MCS_OFDM_QAM64_R_3_4	src/veins/modules/utility/ConstsPhy.h	/^	MCS_OFDM_QAM64_R_3_4$/;"	e	enum:PHY_MCS
MCS_OFDM_QPSK_R_1_2	src/veins/modules/utility/ConstsPhy.h	/^	MCS_OFDM_QPSK_R_1_2,$/;"	e	enum:PHY_MCS
MCS_OFDM_QPSK_R_3_4	src/veins/modules/utility/ConstsPhy.h	/^	MCS_OFDM_QPSK_R_3_4,$/;"	e	enum:PHY_MCS
MIXIMKERNELDEFS_H_	src/veins/base/utils/miximkerneldefs.h	19;"	d
MIXIM_API	src/veins/base/utils/MiXiMDefs.h	25;"	d
MIXIM_API	src/veins/base/utils/MiXiMDefs.h	27;"	d
MIXIM_API	src/veins/base/utils/MiXiMDefs.h	29;"	d
MIXIM_SIGNAL_BATTERY_CHANGE_NAME	src/veins/base/utils/miximkerneldefs.h	29;"	d
MIXIM_SIGNAL_DROPPEDPACKET_NAME	src/veins/base/utils/miximkerneldefs.h	25;"	d
MIXIM_SIGNAL_HOSTSTATE_NAME	src/veins/base/utils/miximkerneldefs.h	27;"	d
MIXIM_SIGNAL_MOBANMSG_NAME	src/veins/base/utils/miximkerneldefs.h	30;"	d
MIXIM_SIGNAL_MOBILITY_CHANGE_NAME	src/veins/base/utils/miximkerneldefs.h	28;"	d
MIXIM_SIGNAL_PACKET_NAME	src/veins/base/utils/miximkerneldefs.h	23;"	d
MIXIM_SIGNAL_PASSEDMSG_NAME	src/veins/base/utils/miximkerneldefs.h	26;"	d
MIXIM_SIGNAL_UWBIRPACKET_NAME	src/veins/base/utils/miximkerneldefs.h	24;"	d
MIXIM_VERSION	src/veins/base/utils/miximkerneldefs.h	21;"	d
MOVE_H	src/veins/base/utils/Move.h	21;"	d
MOVE_HOST	src/veins/base/modules/BaseMobility.h	/^        MOVE_HOST = 21311,$/;"	e	enum:BaseMobility::BaseMobilityMsgKinds
MOVE_TO_BORDER	src/veins/base/modules/BaseMobility.h	/^        MOVE_TO_BORDER,$/;"	e	enum:BaseMobility::BaseMobilityMsgKinds
MOVE_TO_FIXED_LANE	src/veins/modules/application/platooning/CC_Const.h	/^    MOVE_TO_FIXED_LANE = 4    \/\/move the car to a specific lane$/;"	e	enum:Plexe::PLATOONING_LANE_CHANGE_ACTION
MSGCOPTS	src/Makefile	/^MSGCOPTS = $(INCLUDE_PATH)$/;"	m
MSGC_VERSION	src/veins/base/messages/AirFrame_m.h	11;"	d
MSGC_VERSION	src/veins/base/messages/BorderMsg_m.h	11;"	d
MSGC_VERSION	src/veins/base/messages/ChannelSenseRequest_m.h	11;"	d
MSGC_VERSION	src/veins/base/messages/MacPkt_m.h	11;"	d
MSGC_VERSION	src/veins/modules/application/platooning/messages/BikesMessage_m.h	11;"	d
MSGC_VERSION	src/veins/modules/application/platooning/messages/ManeuverMessage_m.h	11;"	d
MSGC_VERSION	src/veins/modules/application/platooning/messages/PlatooningBeacon_m.h	11;"	d
MSGC_VERSION	src/veins/modules/application/platooning/messages/UnicastMessage_m.h	11;"	d
MSGC_VERSION	src/veins/modules/application/platooning/messages/UnicastProtocolControlMessage_m.h	11;"	d
MSGC_VERSION	src/veins/modules/messages/AirFrame11p_m.h	11;"	d
MSGC_VERSION	src/veins/modules/messages/Mac80211Pkt_m.h	11;"	d
MSGC_VERSION	src/veins/modules/messages/PhyControlMessage_m.h	11;"	d
MSGC_VERSION	src/veins/modules/messages/WaveShortMessage_m.h	11;"	d
MSGFILES	src/Makefile	/^MSGFILES = \\$/;"	m
MYDEBUG	src/veins/modules/mobility/traci/TraCIConnection.cc	19;"	d	file:
MYDEBUG	src/veins/modules/mobility/traci/TraCIScenarioManager.cc	27;"	d	file:
MYDEBUG	src/veins/modules/mobility/traci/TraCIScenarioManagerLaunchd.cc	30;"	d	file:
MY_INFINITY	src/veins/modules/mobility/traci/TraCIMobility.cc	/^	const double MY_INFINITY = (std::numeric_limits<double>::has_infinity ? std::numeric_limits<double>::infinity() : std::numeric_limits<double>::max());$/;"	m	namespace:__anon4	file:
M_1_PI	src/veins/base/utils/FWMath.h	69;"	d
M_2_PI	src/veins/base/utils/FWMath.h	73;"	d
M_2_SQRTPI	src/veins/base/utils/FWMath.h	77;"	d
M_E	src/veins/base/utils/FWMath.h	37;"	d
M_LN10	src/veins/base/utils/FWMath.h	53;"	d
M_LN2	src/veins/base/utils/FWMath.h	49;"	d
M_LOG10E	src/veins/base/utils/FWMath.h	45;"	d
M_LOG2E	src/veins/base/utils/FWMath.h	41;"	d
M_PI	src/veins/base/utils/FWMath.h	57;"	d
M_PI_2	src/veins/base/utils/FWMath.h	61;"	d
M_PI_4	src/veins/base/utils/FWMath.h	65;"	d
M_SQRT1_2	src/veins/base/utils/FWMath.h	85;"	d
M_SQRT2	src/veins/base/utils/FWMath.h	81;"	d
Mac1609_4	src/veins/modules/mac/ieee80211p/Mac1609_4.cc	/^Define_Module(Mac1609_4);$/;"	v
Mac1609_4	src/veins/modules/mac/ieee80211p/Mac1609_4.h	/^class Mac1609_4 : public BaseMacLayer,$/;"	c
Mac80211Pkt	src/veins/modules/messages/Mac80211Pkt_m.cc	/^Mac80211Pkt::Mac80211Pkt(const Mac80211Pkt& other) : ::MacPkt(other)$/;"	f	class:Mac80211Pkt
Mac80211Pkt	src/veins/modules/messages/Mac80211Pkt_m.cc	/^Mac80211Pkt::Mac80211Pkt(const char *name, int kind) : ::MacPkt(name,kind)$/;"	f	class:Mac80211Pkt
Mac80211Pkt	src/veins/modules/messages/Mac80211Pkt_m.cc	/^Register_Class(Mac80211Pkt);$/;"	v
Mac80211Pkt	src/veins/modules/messages/Mac80211Pkt_m.h	/^class Mac80211Pkt : public ::MacPkt$/;"	c
Mac80211PktDescriptor	src/veins/modules/messages/Mac80211Pkt_m.cc	/^Mac80211PktDescriptor::Mac80211PktDescriptor() : cClassDescriptor("Mac80211Pkt", "MacPkt")$/;"	f	class:Mac80211PktDescriptor
Mac80211PktDescriptor	src/veins/modules/messages/Mac80211Pkt_m.cc	/^Register_ClassDescriptor(Mac80211PktDescriptor);$/;"	v
Mac80211PktDescriptor	src/veins/modules/messages/Mac80211Pkt_m.cc	/^class Mac80211PktDescriptor : public cClassDescriptor$/;"	c	file:
Mac80211pToPhy11pInterface	src/veins/modules/mac/ieee80211p/Mac80211pToPhy11pInterface.h	/^class Mac80211pToPhy11pInterface {$/;"	c
MacPkt	src/veins/base/messages/MacPkt_m.cc	/^MacPkt::MacPkt(const MacPkt& other) : ::cPacket(other)$/;"	f	class:MacPkt
MacPkt	src/veins/base/messages/MacPkt_m.cc	/^MacPkt::MacPkt(const char *name, int kind) : ::cPacket(name,kind)$/;"	f	class:MacPkt
MacPkt	src/veins/base/messages/MacPkt_m.cc	/^Register_Class(MacPkt);$/;"	v
MacPkt	src/veins/base/messages/MacPkt_m.h	/^class MacPkt : public ::cPacket$/;"	c
MacPktDescriptor	src/veins/base/messages/MacPkt_m.cc	/^MacPktDescriptor::MacPktDescriptor() : cClassDescriptor("MacPkt", "cPacket")$/;"	f	class:MacPktDescriptor
MacPktDescriptor	src/veins/base/messages/MacPkt_m.cc	/^Register_ClassDescriptor(MacPktDescriptor);$/;"	v
MacPktDescriptor	src/veins/base/messages/MacPkt_m.cc	/^class MacPktDescriptor : public cClassDescriptor$/;"	c	file:
MacToNetwControlInfo	src/veins/base/utils/MacToNetwControlInfo.h	/^	MacToNetwControlInfo(const LAddress::L2Type& lastHop, double ber = 0, double rssi = 0):$/;"	f	class:MacToNetwControlInfo
MacToNetwControlInfo	src/veins/base/utils/MacToNetwControlInfo.h	/^class MIXIM_API MacToNetwControlInfo : public cObject {$/;"	c
MacToPhyControlInfo	src/veins/base/phyLayer/MacToPhyControlInfo.h	/^	MacToPhyControlInfo(Signal* signal = NULL):$/;"	f	class:MacToPhyControlInfo
MacToPhyControlInfo	src/veins/base/phyLayer/MacToPhyControlInfo.h	/^class MIXIM_API MacToPhyControlInfo: public cObject {$/;"	c
MacToPhyInterface	src/veins/base/phyLayer/MacToPhyInterface.h	/^class MIXIM_API MacToPhyInterface$/;"	c
ManeuverMessage	src/veins/modules/application/platooning/messages/ManeuverMessage_m.cc	/^ManeuverMessage::ManeuverMessage(const ManeuverMessage& other) : ::cPacket(other)$/;"	f	class:ManeuverMessage
ManeuverMessage	src/veins/modules/application/platooning/messages/ManeuverMessage_m.cc	/^ManeuverMessage::ManeuverMessage(const char *name, int kind) : ::cPacket(name,kind)$/;"	f	class:ManeuverMessage
ManeuverMessage	src/veins/modules/application/platooning/messages/ManeuverMessage_m.cc	/^Register_Class(ManeuverMessage);$/;"	v
ManeuverMessage	src/veins/modules/application/platooning/messages/ManeuverMessage_m.h	/^class ManeuverMessage : public ::cPacket$/;"	c
ManeuverMessageDescriptor	src/veins/modules/application/platooning/messages/ManeuverMessage_m.cc	/^ManeuverMessageDescriptor::ManeuverMessageDescriptor() : cClassDescriptor("ManeuverMessage", "cPacket")$/;"	f	class:ManeuverMessageDescriptor
ManeuverMessageDescriptor	src/veins/modules/application/platooning/messages/ManeuverMessage_m.cc	/^Register_ClassDescriptor(ManeuverMessageDescriptor);$/;"	v
ManeuverMessageDescriptor	src/veins/modules/application/platooning/messages/ManeuverMessage_m.cc	/^class ManeuverMessageDescriptor : public cClassDescriptor$/;"	c	file:
MappedOne	src/veins/base/phyLayer/MappingBase.cc	/^const Argument::mapped_type Argument::MappedOne  = Argument::mapped_type(1);$/;"	m	class:Argument	file:
MappedOne	src/veins/base/phyLayer/MappingBase.h	/^	const static mapped_type         MappedOne;$/;"	m	class:Argument
MappedZero	src/veins/base/phyLayer/MappingBase.cc	/^const Argument::mapped_type Argument::MappedZero = Argument::mapped_type(0);$/;"	m	class:Argument	file:
MappedZero	src/veins/base/phyLayer/MappingBase.h	/^	const static mapped_type         MappedZero;$/;"	m	class:Argument
Mapping	src/veins/base/phyLayer/MappingBase.h	/^	Mapping():$/;"	f	class:Mapping
Mapping	src/veins/base/phyLayer/MappingBase.h	/^	Mapping(const DimensionSet& dims):$/;"	f	class:Mapping
Mapping	src/veins/base/phyLayer/MappingBase.h	/^class MIXIM_API Mapping:public ConstMapping {$/;"	c
Mapping	src/veins/modules/analogueModel/TwoRayInterferenceModel.h	/^				Mapping(double gamma, double distance, double directDistance, double reflDistance, bool debug)$/;"	f	class:TwoRayInterferenceModel::Mapping
Mapping	src/veins/modules/analogueModel/TwoRayInterferenceModel.h	/^		class Mapping: public SimpleConstMapping {$/;"	c	class:TwoRayInterferenceModel
MappingBuffer	src/veins/base/phyLayer/MappingUtils.h	/^	typedef std::list<const ConstMapping*> MappingBuffer;$/;"	t	class:MappingUtils
MappingIterator	src/veins/base/phyLayer/MappingBase.h	/^class MIXIM_API MappingIterator:public ConstMappingIterator {$/;"	c
MappingSet	src/veins/base/phyLayer/MappingUtils.h	/^	typedef std::list<ConstMapping*> MappingSet;$/;"	t	class:ConcatConstMapping
MappingUtils	src/veins/base/phyLayer/MappingUtils.h	/^class MIXIM_API MappingUtils {$/;"	c
Move	src/veins/base/utils/Move.h	/^    Move()$/;"	f	class:Move
Move	src/veins/base/utils/Move.h	/^    Move(const Move& mSrc)$/;"	f	class:Move
Move	src/veins/base/utils/Move.h	/^class MIXIM_API Move : public cObject {$/;"	c
MultiDimMapping	src/veins/base/phyLayer/MappingUtils.h	/^	MultiDimMapping(const DimensionSet& myDims):$/;"	f	class:MultiDimMapping
MultiDimMapping	src/veins/base/phyLayer/MappingUtils.h	/^	MultiDimMapping(const DimensionSet& myDims, Dimension myDim):$/;"	f	class:MultiDimMapping
MultiDimMapping	src/veins/base/phyLayer/MappingUtils.h	/^	MultiDimMapping(const DimensionSet& myDims, Dimension myDim,$/;"	f	class:MultiDimMapping
MultiDimMapping	src/veins/base/phyLayer/MappingUtils.h	/^	MultiDimMapping(const DimensionSet& myDims, argument_value_cref_t oorv):$/;"	f	class:MultiDimMapping
MultiDimMapping	src/veins/base/phyLayer/MappingUtils.h	/^	MultiDimMapping(const MultiDimMapping<Interpolator>& o):$/;"	f	class:MultiDimMapping
MultiDimMapping	src/veins/base/phyLayer/MappingUtils.h	/^	MultiDimMapping(const MultiDimMapping<Interpolator>& o,$/;"	f	class:MultiDimMapping
MultiDimMapping	src/veins/base/phyLayer/MappingUtils.h	/^class MultiDimMapping:public Mapping {$/;"	c
MultiDimMappingIterator	src/veins/base/phyLayer/MappingUtils.h	/^	MultiDimMappingIterator(MultiDimMapping<Interpolator>& mapping):$/;"	f	class:MultiDimMappingIterator
MultiDimMappingIterator	src/veins/base/phyLayer/MappingUtils.h	/^	MultiDimMappingIterator(MultiDimMapping<Interpolator>& mapping, const Argument& pos):$/;"	f	class:MultiDimMappingIterator
MultiDimMappingIterator	src/veins/base/phyLayer/MappingUtils.h	/^class MultiDimMappingIterator:public MappingIterator {$/;"	c
MultipliedMapping	src/veins/base/phyLayer/Signal_.h	/^	typedef ConcatConstMapping<std::multiplies<double> > MultipliedMapping;$/;"	t	class:Signal
NEAREST	src/veins/base/phyLayer/MappingBase.h	/^		NEAREST,$/;"	e	enum:Mapping::InterpolationMethod
NETWTOMACCONTROLINFO_H	src/veins/base/utils/NetwToMacControlInfo.h	22;"	d
NEW	src/veins/base/phyLayer/BaseDecider.h	/^		NEW,$/;"	e	enum:BaseDecider::SignalState
NICENTRYDEBUG_H	src/veins/base/connectionManager/NicEntryDebug.h	23;"	d
NICENTRYDIRECT_H	src/veins/base/connectionManager/NicEntryDirect.h	23;"	d
NICENTRY_H	src/veins/base/connectionManager/NicEntry.h	23;"	d
NIST_ERROR_RATE_H	src/veins/modules/phy/NistErrorRate.h	21;"	d
NORMAL_SPACING	src/veins/modules/application/platooning/maneuver/JoinManeuverApp.cc	17;"	d	file:
NOTHING	src/veins/modules/phy/Decider80211p.h	/^			NOTHING = 22100,$/;"	e	enum:Decider80211p::Decider80211ControlKinds
NOT_DECODED	src/veins/modules/phy/Decider80211p.h	/^		enum PACKET_OK_RESULT {DECODED, NOT_DECODED, COLLISION};$/;"	e	enum:Decider80211p::PACKET_OK_RESULT
NOWHERE	src/veins/base/modules/BaseMobility.h	/^    	NOWHERE,   \/\/\/< not outside the playground$/;"	e	enum:BaseMobility::BorderHandling
NUM_BITRATES_80211P	src/veins/modules/utility/Consts80211p.h	/^const uint64_t NUM_BITRATES_80211P = 8;$/;"	v
NUM_RADIO_STATES	src/veins/base/phyLayer/PhyUtils.h	/^		NUM_RADIO_STATES$/;"	e	enum:Veins::Radio::RadioState
N_DBPS_80211P	src/veins/modules/utility/Consts80211p.h	/^const uint32_t N_DBPS_80211P[] = {$/;"	v
Nearest	src/veins/base/phyLayer/Interpolation.h	/^	Nearest():$/;"	f	class:Nearest
Nearest	src/veins/base/phyLayer/Interpolation.h	/^	Nearest(mapped_cref_type oorv):$/;"	f	class:Nearest
Nearest	src/veins/base/phyLayer/Interpolation.h	/^class Nearest : public InterpolatorBase<_ContainerType> {$/;"	c
NetwToMacControlInfo	src/veins/base/utils/NetwToMacControlInfo.h	/^    NetwToMacControlInfo(const LAddress::L2Type& addr = LAddress::L2NULL)$/;"	f	class:NetwToMacControlInfo
NetwToMacControlInfo	src/veins/base/utils/NetwToMacControlInfo.h	/^class MIXIM_API NetwToMacControlInfo : public cObject$/;"	c
NextSmaller	src/veins/base/phyLayer/Interpolation.h	/^	NextSmaller():$/;"	f	class:NextSmaller
NextSmaller	src/veins/base/phyLayer/Interpolation.h	/^	NextSmaller(mapped_cref_type oorv):$/;"	f	class:NextSmaller
NextSmaller	src/veins/base/phyLayer/Interpolation.h	/^class NextSmaller : public InterpolatorBase<_ContainerType> {$/;"	c
NicCube	src/veins/base/connectionManager/BaseConnectionManager.h	/^    typedef std::vector<NicMatrix> NicCube;$/;"	t	class:BaseConnectionManager
NicEntries	src/veins/base/connectionManager/BaseConnectionManager.h	/^	typedef std::map<int, NicEntry*> NicEntries;$/;"	t	class:BaseConnectionManager
NicEntry	src/veins/base/connectionManager/NicEntry.h	/^    NicEntry(bool debug) : nicId(0), nicPtr(0), hostId(0){$/;"	f	class:NicEntry
NicEntry	src/veins/base/connectionManager/NicEntry.h	/^class MIXIM_API NicEntry : public cObject$/;"	c
NicEntryComparator	src/veins/base/connectionManager/NicEntry.h	/^	class NicEntryComparator {$/;"	c	class:NicEntry
NicEntryDebug	src/veins/base/connectionManager/NicEntryDebug.h	/^    NicEntryDebug(bool debug) :$/;"	f	class:NicEntryDebug
NicEntryDebug	src/veins/base/connectionManager/NicEntryDebug.h	/^class NicEntryDebug: public NicEntry$/;"	c
NicEntryDirect	src/veins/base/connectionManager/NicEntryDirect.h	/^    NicEntryDirect(bool debug) : NicEntry(debug) {};$/;"	f	class:NicEntryDirect
NicEntryDirect	src/veins/base/connectionManager/NicEntryDirect.h	/^class NicEntryDirect: public NicEntry$/;"	c
NicMatrix	src/veins/base/connectionManager/BaseConnectionManager.h	/^	typedef std::vector<RowVector> NicMatrix;$/;"	t	class:BaseConnectionManager
NistErrorRate	src/veins/modules/phy/NistErrorRate.cc	/^NistErrorRate::NistErrorRate ()$/;"	f	class:NistErrorRate
NistErrorRate	src/veins/modules/phy/NistErrorRate.h	/^class NistErrorRate$/;"	c
NoMobiltyPos	src/veins/base/phyLayer/BasePhyLayer.cc	/^Coord NoMobiltyPos = Coord::ZERO;$/;"	v
NoNextIteratorException	src/veins/base/phyLayer/MappingBase.h	/^class NoNextIteratorException {};$/;"	c
O	src/Makefile	/^O = $(PROJECT_OUTPUT_DIR)\/$(CONFIGNAME)\/$(PROJECTRELATIVE_PATH)$/;"	m
OBJECT_VARIABLES_SUBSCRIPTION	src/veins/modules/mobility/traci/TraCIConstants.h	384;"	d
OBJS	src/Makefile	/^OBJS = \\$/;"	m
OBSTACLE_OBSTACLECONTROL_H	src/veins/modules/obstacle/ObstacleControl.h	22;"	d
OBSTACLE_OBSTACLE_H	src/veins/modules/obstacle/Obstacle.h	22;"	d
OFF	src/veins/base/utils/HostState.h	/^          OFF 		\/** Host is not active (shut down) *\/$/;"	e	enum:HostState::States
OMNETPP_LIBS	src/Makefile	/^OMNETPP_LIBS = -L"$(OMNETPP_LIB_SUBDIR)" -L"$(OMNETPP_LIB_DIR)" -loppenvir$D $(KERNEL_LIBS) $(SYS_LIBS)$/;"	m
OMNETPP_LIB_SUBDIR	src/Makefile	/^OMNETPP_LIB_SUBDIR = $(OMNETPP_LIB_DIR)\/$(TOOLCHAIN_NAME)$/;"	m
OUTGOING	src/veins/base/utils/PassedMessage.h	/^        OUTGOING$/;"	e	enum:PassedMessage::direction_t
Obstacle	src/veins/modules/obstacle/Obstacle.cc	/^Obstacle::Obstacle(std::string id, double attenuationPerWall, double attenuationPerMeter) :$/;"	f	class:Obstacle
Obstacle	src/veins/modules/obstacle/Obstacle.h	/^class Obstacle {$/;"	c	namespace:Veins
ObstacleControl	src/veins/modules/obstacle/ObstacleControl.h	/^class ObstacleControl : public cSimpleModule$/;"	c	namespace:Veins
ObstacleControlAccess	src/veins/modules/obstacle/ObstacleControl.h	/^		ObstacleControlAccess() {$/;"	f	class:Veins::ObstacleControlAccess
ObstacleControlAccess	src/veins/modules/obstacle/ObstacleControl.h	/^class ObstacleControlAccess$/;"	c	namespace:Veins
ObstacleGridCell	src/veins/modules/obstacle/ObstacleControl.h	/^		typedef std::list<Obstacle*> ObstacleGridCell;$/;"	t	class:Veins::ObstacleControl
ObstacleGridRow	src/veins/modules/obstacle/ObstacleControl.h	/^		typedef std::vector<ObstacleGridCell> ObstacleGridRow;$/;"	t	class:Veins::ObstacleControl
Obstacles	src/veins/modules/obstacle/ObstacleControl.h	/^		typedef std::vector<ObstacleGridRow> Obstacles;$/;"	t	class:Veins::ObstacleControl
PACKET_DROPPED	src/veins/base/modules/BaseMacLayer.h	/^        PACKET_DROPPED,$/;"	e	enum:BaseMacLayer::BaseMacControlKinds
PACKET_DROPPED	src/veins/base/phyLayer/BaseDecider.h	/^		PACKET_DROPPED = 22100,$/;"	e	enum:BaseDecider::BaseDeciderControlKinds
PACKET_OK_RESULT	src/veins/modules/phy/Decider80211p.h	/^		enum PACKET_OK_RESULT {DECODED, NOT_DECODED, COLLISION};$/;"	g	class:Decider80211p
PASSED_MESSAGE_H	src/veins/base/utils/PassedMessage.h	4;"	d
PATHLOSSMODEL_H_	src/veins/modules/analogueModel/SimplePathlossModel.h	2;"	d
PERModel	src/veins/modules/analogueModel/PERModel.h	/^	PERModel(double per): packetErrorRate(per) { assert(per <= 1 && per >= 0);}$/;"	f	class:PERModel
PERModel	src/veins/modules/analogueModel/PERModel.h	/^class MIXIM_API PERModel : public AnalogueModel {$/;"	c
PER_MODEL_H	src/veins/modules/analogueModel/PERModel.h	2;"	d
PHYLAYER80211P_H_	src/veins/modules/phy/PhyLayer80211p.h	22;"	d
PHYTOMACCONTROLINFO_H_	src/veins/base/phyLayer/PhyToMacControlInfo.h	2;"	d
PHYUTILS_H_	src/veins/base/phyLayer/PhyUtils.h	2;"	d
PHY_HDR_BITRATE	src/veins/modules/utility/Consts80211p.h	/^const uint64_t PHY_HDR_BITRATE = 3000000;$/;"	v
PHY_HDR_PLCPSIGNAL_DURATION	src/veins/modules/utility/Consts80211p.h	/^const double PHY_HDR_PLCPSIGNAL_DURATION = 8e-6;$/;"	v
PHY_HDR_PLCPSIGNAL_LENGTH	src/veins/modules/utility/Consts80211p.h	/^const int PHY_HDR_PLCPSIGNAL_LENGTH = 24;$/;"	v
PHY_HDR_PREAMBLE_DURATION	src/veins/modules/utility/Consts80211p.h	/^const double PHY_HDR_PREAMBLE_DURATION = 32e-6;$/;"	v
PHY_HDR_PSDU_HEADER_LENGTH	src/veins/modules/utility/Consts80211p.h	/^const int PHY_HDR_PSDU_HEADER_LENGTH = PHY_HDR_TOTAL_LENGTH - PHY_HDR_PLCPSIGNAL_LENGTH;$/;"	v
PHY_HDR_TOTAL_LENGTH	src/veins/modules/utility/Consts80211p.h	/^const int PHY_HDR_TOTAL_LENGTH = 46;$/;"	v
PHY_MCS	src/veins/modules/utility/ConstsPhy.h	/^enum PHY_MCS {$/;"	g
PL01	src/veins/modules/analogueModel/BreakpointPathlossModel.h	/^    double PL01, PL02;$/;"	m	class:BreakpointPathlossModel
PL01_real	src/veins/modules/analogueModel/BreakpointPathlossModel.h	/^    double PL01_real, PL02_real;$/;"	m	class:BreakpointPathlossModel
PL02	src/veins/modules/analogueModel/BreakpointPathlossModel.h	/^    double PL01, PL02;$/;"	m	class:BreakpointPathlossModel
PL02_real	src/veins/modules/analogueModel/BreakpointPathlossModel.h	/^    double PL01_real, PL02_real;$/;"	m	class:BreakpointPathlossModel
PLACERANDOMLY	src/veins/base/modules/BaseMobility.h	/^        PLACERANDOMLY, \/\/\/< placed at a randomly chosen position on the playground$/;"	e	enum:BaseMobility::BorderPolicy
PLATOONING_LANE_CHANGE_ACTION	src/veins/modules/application/platooning/CC_Const.h	/^enum PLATOONING_LANE_CHANGE_ACTION {$/;"	g	namespace:Plexe
PLOEG	src/veins/modules/application/platooning/CC_Const.h	/^{DRIVER = 0, ACC = 1, CACC = 2, FAKED_CACC = 3, PLOEG = 4};$/;"	e	enum:Plexe::ACTIVE_CONTROLLER
PORT	examples/platoonBikes/sumocfg/runner.py	/^PORT = 7890$/;"	v
POSITION_2D	src/veins/modules/mobility/traci/TraCIConstants.h	281;"	d
POSITION_3D	src/veins/modules/mobility/traci/TraCIConstants.h	285;"	d
POSITION_CONVERSION	src/veins/modules/mobility/traci/TraCIConstants.h	715;"	d
POSITION_LON_LAT	src/veins/modules/mobility/traci/TraCIConstants.h	279;"	d
POSITION_LON_LAT_ALT	src/veins/modules/mobility/traci/TraCIConstants.h	283;"	d
POSITION_ROADMAP	src/veins/modules/mobility/traci/TraCIConstants.h	287;"	d
PROJECTRELATIVE_PATH	src/Makefile	/^PROJECTRELATIVE_PATH = \/src$/;"	m
PROJECT_OUTPUT_DIR	src/Makefile	/^PROJECT_OUTPUT_DIR = ..\/out$/;"	m
PairLess	src/veins/base/phyLayer/Interpolation.h	/^class PairLess {$/;"	c
ParameterMap	src/veins/base/phyLayer/BasePhyLayer.h	/^	typedef std::map<std::string, cMsgPar> ParameterMap;$/;"	t	class:BasePhyLayer
PassedMessage	src/veins/base/utils/PassedMessage.h	/^class MIXIM_API PassedMessage : public cObject {$/;"	c
PhyControlMessage	src/veins/modules/messages/PhyControlMessage_m.cc	/^PhyControlMessage::PhyControlMessage(const PhyControlMessage& other) : ::cMessage(other)$/;"	f	class:PhyControlMessage
PhyControlMessage	src/veins/modules/messages/PhyControlMessage_m.cc	/^PhyControlMessage::PhyControlMessage(const char *name, int kind) : ::cMessage(name,kind)$/;"	f	class:PhyControlMessage
PhyControlMessage	src/veins/modules/messages/PhyControlMessage_m.cc	/^Register_Class(PhyControlMessage);$/;"	v
PhyControlMessage	src/veins/modules/messages/PhyControlMessage_m.h	/^class PhyControlMessage : public ::cMessage$/;"	c
PhyControlMessageDescriptor	src/veins/modules/messages/PhyControlMessage_m.cc	/^PhyControlMessageDescriptor::PhyControlMessageDescriptor() : cClassDescriptor("PhyControlMessage", "cMessage")$/;"	f	class:PhyControlMessageDescriptor
PhyControlMessageDescriptor	src/veins/modules/messages/PhyControlMessage_m.cc	/^Register_ClassDescriptor(PhyControlMessageDescriptor);$/;"	v
PhyControlMessageDescriptor	src/veins/modules/messages/PhyControlMessage_m.cc	/^class PhyControlMessageDescriptor : public cClassDescriptor$/;"	c	file:
PhyLayer80211p	src/veins/modules/phy/PhyLayer80211p.h	/^class PhyLayer80211p	: 	public BasePhyLayer,$/;"	c
PhyToMacControlInfo	src/veins/base/phyLayer/PhyToMacControlInfo.h	/^	PhyToMacControlInfo(DeciderResult* result):$/;"	f	class:PhyToMacControlInfo
PhyToMacControlInfo	src/veins/base/phyLayer/PhyToMacControlInfo.h	/^class MIXIM_API PhyToMacControlInfo: public cObject {$/;"	c
PlatooningBeacon	src/veins/modules/application/platooning/messages/PlatooningBeacon_m.cc	/^PlatooningBeacon::PlatooningBeacon(const PlatooningBeacon& other) : ::cPacket(other)$/;"	f	class:PlatooningBeacon
PlatooningBeacon	src/veins/modules/application/platooning/messages/PlatooningBeacon_m.cc	/^PlatooningBeacon::PlatooningBeacon(const char *name, int kind) : ::cPacket(name,kind)$/;"	f	class:PlatooningBeacon
PlatooningBeacon	src/veins/modules/application/platooning/messages/PlatooningBeacon_m.cc	/^Register_Class(PlatooningBeacon);$/;"	v
PlatooningBeacon	src/veins/modules/application/platooning/messages/PlatooningBeacon_m.h	/^class PlatooningBeacon : public ::cPacket$/;"	c
PlatooningBeaconDescriptor	src/veins/modules/application/platooning/messages/PlatooningBeacon_m.cc	/^PlatooningBeaconDescriptor::PlatooningBeaconDescriptor() : cClassDescriptor("PlatooningBeacon", "cPacket")$/;"	f	class:PlatooningBeaconDescriptor
PlatooningBeaconDescriptor	src/veins/modules/application/platooning/messages/PlatooningBeacon_m.cc	/^Register_ClassDescriptor(PlatooningBeaconDescriptor);$/;"	v
PlatooningBeaconDescriptor	src/veins/modules/application/platooning/messages/PlatooningBeacon_m.cc	/^class PlatooningBeaconDescriptor : public cClassDescriptor$/;"	c	file:
Plexe	src/veins/modules/application/platooning/CC_Const.h	/^namespace Plexe {$/;"	n
Poi	src/veins/modules/mobility/traci/TraCICommandInterface.h	/^				Poi(TraCICommandInterface* traci, std::string poiId) : traci(traci), poiId(poiId) {$/;"	f	class:Veins::TraCICommandInterface::Poi
Poi	src/veins/modules/mobility/traci/TraCICommandInterface.h	/^		class Poi {$/;"	c	class:Veins::TraCICommandInterface
Point	src/veins/modules/world/annotations/AnnotationManager.h	/^				Point(Coord pos, std::string color, std::string text) : pos(pos), color(color), text(text) {}$/;"	f	class:Veins::AnnotationManager::Point
Point	src/veins/modules/world/annotations/AnnotationManager.h	/^		class Point : public Annotation {$/;"	c	class:Veins::AnnotationManager
Polygon	src/veins/modules/mobility/traci/TraCICommandInterface.h	/^				Polygon(TraCICommandInterface* traci, std::string polyId) : traci(traci), polyId(polyId) {$/;"	f	class:Veins::TraCICommandInterface::Polygon
Polygon	src/veins/modules/mobility/traci/TraCICommandInterface.h	/^		class Polygon {$/;"	c	class:Veins::TraCICommandInterface
Polygon	src/veins/modules/world/annotations/AnnotationManager.h	/^				Polygon(std::list<Coord> coords, std::string color) : coords(coords), color(color) {}$/;"	f	class:Veins::AnnotationManager::Polygon
Polygon	src/veins/modules/world/annotations/AnnotationManager.h	/^		class Polygon : public Annotation {$/;"	c	class:Veins::AnnotationManager
PowerType	src/veins/base/modules/BaseBattery.h	/^	enum PowerType {$/;"	g	class:DrawAmount
ProtocolIds	src/veins/base/phyLayer/BasePhyLayer.h	/^	enum ProtocolIds {$/;"	g	class:BasePhyLayer
ProtocolIds	src/veins/modules/phy/PhyLayer80211p.h	/^		enum ProtocolIds {$/;"	g	class:PhyLayer80211p
RADIODELAY_11P	src/veins/modules/utility/Consts80211p.h	/^const SimTime RADIODELAY_11P = SimTime().setRaw(1000000UL);$/;"	v
RADIO_SWITCHING_OVER	src/veins/base/phyLayer/MacToPhyInterface.h	/^		RADIO_SWITCHING_OVER,$/;"	e	enum:MacToPhyInterface::BasePhyMessageKinds
RAISEERROR	src/veins/base/modules/BaseMobility.h	/^        RAISEERROR     \/\/\/< stop the simulation with error$/;"	e	enum:BaseMobility::BorderPolicy
RECEIVING	src/veins/base/phyLayer/BasePhyLayer.h	/^		RECEIVING,$/;"	e	enum:BasePhyLayer::AirFrameStates
RECWHILESEND	src/veins/modules/phy/Decider80211p.h	/^			RECWHILESEND$/;"	e	enum:Decider80211p::Decider80211ControlKinds
REFLECT	src/veins/base/modules/BaseMobility.h	/^        REFLECT,       \/\/\/< reflect off the wall$/;"	e	enum:BaseMobility::BorderPolicy
REMOVE	src/veins/modules/mobility/traci/TraCIConstants.h	712;"	d
REMOVE_ARRIVED	src/veins/modules/mobility/traci/TraCIConstants.h	367;"	d
REMOVE_PARKING	src/veins/modules/mobility/traci/TraCIConstants.h	365;"	d
REMOVE_TELEPORT	src/veins/modules/mobility/traci/TraCIConstants.h	363;"	d
REMOVE_TELEPORT_ARRIVED	src/veins/modules/mobility/traci/TraCIConstants.h	371;"	d
REMOVE_VAPORIZED	src/veins/modules/mobility/traci/TraCIConstants.h	369;"	d
REQUEST_AIRDIST	src/veins/modules/mobility/traci/TraCIConstants.h	354;"	d
REQUEST_DRIVINGDIST	src/veins/modules/mobility/traci/TraCIConstants.h	356;"	d
RESPONSE_GET_AREAL_DETECTOR_VARIABLE	src/veins/modules/mobility/traci/TraCIConstants.h	88;"	d
RESPONSE_GET_EDGE_VARIABLE	src/veins/modules/mobility/traci/TraCIConstants.h	236;"	d
RESPONSE_GET_GUI_VARIABLE	src/veins/modules/mobility/traci/TraCIConstants.h	266;"	d
RESPONSE_GET_INDUCTIONLOOP_VARIABLE	src/veins/modules/mobility/traci/TraCIConstants.h	74;"	d
RESPONSE_GET_JUNCTION_VARIABLE	src/veins/modules/mobility/traci/TraCIConstants.h	221;"	d
RESPONSE_GET_LANE_VARIABLE	src/veins/modules/mobility/traci/TraCIConstants.h	131;"	d
RESPONSE_GET_MULTI_ENTRY_EXIT_DETECTOR_VARIABLE	src/veins/modules/mobility/traci/TraCIConstants.h	102;"	d
RESPONSE_GET_POI_VARIABLE	src/veins/modules/mobility/traci/TraCIConstants.h	191;"	d
RESPONSE_GET_POLYGON_VARIABLE	src/veins/modules/mobility/traci/TraCIConstants.h	206;"	d
RESPONSE_GET_ROUTE_VARIABLE	src/veins/modules/mobility/traci/TraCIConstants.h	176;"	d
RESPONSE_GET_SIM_VARIABLE	src/veins/modules/mobility/traci/TraCIConstants.h	251;"	d
RESPONSE_GET_TL_VARIABLE	src/veins/modules/mobility/traci/TraCIConstants.h	116;"	d
RESPONSE_GET_VEHICLETYPE_VARIABLE	src/veins/modules/mobility/traci/TraCIConstants.h	161;"	d
RESPONSE_GET_VEHICLE_VARIABLE	src/veins/modules/mobility/traci/TraCIConstants.h	146;"	d
RESPONSE_SUBSCRIBE_AREAL_DETECTOR_CONTEXT	src/veins/modules/mobility/traci/TraCIConstants.h	84;"	d
RESPONSE_SUBSCRIBE_AREAL_DETECTOR_VARIABLE	src/veins/modules/mobility/traci/TraCIConstants.h	92;"	d
RESPONSE_SUBSCRIBE_EDGE_CONTEXT	src/veins/modules/mobility/traci/TraCIConstants.h	232;"	d
RESPONSE_SUBSCRIBE_EDGE_VARIABLE	src/veins/modules/mobility/traci/TraCIConstants.h	242;"	d
RESPONSE_SUBSCRIBE_GUI_CONTEXT	src/veins/modules/mobility/traci/TraCIConstants.h	262;"	d
RESPONSE_SUBSCRIBE_GUI_VARIABLE	src/veins/modules/mobility/traci/TraCIConstants.h	272;"	d
RESPONSE_SUBSCRIBE_INDUCTIONLOOP_CONTEXT	src/veins/modules/mobility/traci/TraCIConstants.h	70;"	d
RESPONSE_SUBSCRIBE_INDUCTIONLOOP_VARIABLE	src/veins/modules/mobility/traci/TraCIConstants.h	78;"	d
RESPONSE_SUBSCRIBE_JUNCTION_CONTEXT	src/veins/modules/mobility/traci/TraCIConstants.h	217;"	d
RESPONSE_SUBSCRIBE_JUNCTION_VARIABLE	src/veins/modules/mobility/traci/TraCIConstants.h	227;"	d
RESPONSE_SUBSCRIBE_LANE_CONTEXT	src/veins/modules/mobility/traci/TraCIConstants.h	127;"	d
RESPONSE_SUBSCRIBE_LANE_VARIABLE	src/veins/modules/mobility/traci/TraCIConstants.h	137;"	d
RESPONSE_SUBSCRIBE_MULTI_ENTRY_EXIT_DETECTOR_CONTEXT	src/veins/modules/mobility/traci/TraCIConstants.h	98;"	d
RESPONSE_SUBSCRIBE_MULTI_ENTRY_EXIT_DETECTOR_VARIABLE	src/veins/modules/mobility/traci/TraCIConstants.h	106;"	d
RESPONSE_SUBSCRIBE_POI_CONTEXT	src/veins/modules/mobility/traci/TraCIConstants.h	187;"	d
RESPONSE_SUBSCRIBE_POI_VARIABLE	src/veins/modules/mobility/traci/TraCIConstants.h	197;"	d
RESPONSE_SUBSCRIBE_POLYGON_CONTEXT	src/veins/modules/mobility/traci/TraCIConstants.h	202;"	d
RESPONSE_SUBSCRIBE_POLYGON_VARIABLE	src/veins/modules/mobility/traci/TraCIConstants.h	212;"	d
RESPONSE_SUBSCRIBE_ROUTE_CONTEXT	src/veins/modules/mobility/traci/TraCIConstants.h	172;"	d
RESPONSE_SUBSCRIBE_ROUTE_VARIABLE	src/veins/modules/mobility/traci/TraCIConstants.h	182;"	d
RESPONSE_SUBSCRIBE_SIM_CONTEXT	src/veins/modules/mobility/traci/TraCIConstants.h	247;"	d
RESPONSE_SUBSCRIBE_SIM_VARIABLE	src/veins/modules/mobility/traci/TraCIConstants.h	257;"	d
RESPONSE_SUBSCRIBE_TL_CONTEXT	src/veins/modules/mobility/traci/TraCIConstants.h	112;"	d
RESPONSE_SUBSCRIBE_TL_VARIABLE	src/veins/modules/mobility/traci/TraCIConstants.h	122;"	d
RESPONSE_SUBSCRIBE_VEHICLETYPE_CONTEXT	src/veins/modules/mobility/traci/TraCIConstants.h	157;"	d
RESPONSE_SUBSCRIBE_VEHICLETYPE_VARIABLE	src/veins/modules/mobility/traci/TraCIConstants.h	167;"	d
RESPONSE_SUBSCRIBE_VEHICLE_CONTEXT	src/veins/modules/mobility/traci/TraCIConstants.h	142;"	d
RESPONSE_SUBSCRIBE_VEHICLE_VARIABLE	src/veins/modules/mobility/traci/TraCIConstants.h	152;"	d
ROLE	src/veins/modules/application/platooning/bikes/BikeManeuver.h	/^		enum ROLE { LEADER, FOLLOWER, BIKE };$/;"	g	class:BikeManeuver
ROLES	src/veins/modules/application/platooning/bikeplatoons/BikesApp.h	/^		enum ROLES {LEADER, FOLLOWER, LEAVER, BIKE};$/;"	g	class:BikesApp
RSAMConstMappingIterator	src/veins/base/phyLayer/PhyUtils.cc	/^RSAMConstMappingIterator::RSAMConstMappingIterator$/;"	f	class:RSAMConstMappingIterator
RSAMConstMappingIterator	src/veins/base/phyLayer/PhyUtils.h	/^class MIXIM_API RSAMConstMappingIterator : public ConstMappingIterator$/;"	c
RSAMMapping	src/veins/base/phyLayer/PhyUtils.h	/^	RSAMMapping(const RadioStateAnalogueModel* rsam,$/;"	f	class:RSAMMapping
RSAMMapping	src/veins/base/phyLayer/PhyUtils.h	/^class MIXIM_API RSAMMapping : public ConstMapping$/;"	c
RTYPE_ERR	src/veins/modules/mobility/traci/TraCIConstants.h	327;"	d
RTYPE_NOTIMPLEMENTED	src/veins/modules/mobility/traci/TraCIConstants.h	325;"	d
RTYPE_OK	src/veins/modules/mobility/traci/TraCIConstants.h	323;"	d
RX	src/veins/base/phyLayer/PhyUtils.h	/^		RX = 0,$/;"	e	enum:Veins::Radio::RadioState
Radio	src/veins/base/phyLayer/PhyUtils.cc	/^Radio::Radio(int numRadioStates,$/;"	f	class:Radio
Radio	src/veins/base/phyLayer/PhyUtils.h	/^class MIXIM_API Radio$/;"	c	namespace:Veins
RadioState	src/veins/base/phyLayer/PhyUtils.h	/^	enum RadioState {$/;"	g	class:Veins::Radio
RadioStateAnalogueModel	src/veins/base/phyLayer/PhyUtils.h	/^	RadioStateAnalogueModel(Argument::mapped_type_cref initValue,$/;"	f	class:RadioStateAnalogueModel
RadioStateAnalogueModel	src/veins/base/phyLayer/PhyUtils.h	/^class MIXIM_API RadioStateAnalogueModel : public AnalogueModel$/;"	c
ReceivedSignal	src/veins/base/phyLayer/BaseDecider.h	/^	typedef std::pair<AirFrame*, int> ReceivedSignal;$/;"	t	class:BaseDecider
Road	src/veins/modules/mobility/traci/TraCICommandInterface.h	/^				Road(TraCICommandInterface* traci, std::string roadId) : traci(traci), roadId(roadId) {$/;"	f	class:Veins::TraCICommandInterface::Road
Road	src/veins/modules/mobility/traci/TraCICommandInterface.h	/^		class Road {$/;"	c	class:Veins::TraCICommandInterface
Route	src/veins/modules/mobility/traci/TraCICommandInterface.h	/^				Route(TraCICommandInterface* traci, std::string routeId) : traci(traci), routeId(routeId) {$/;"	f	class:Veins::TraCICommandInterface::Route
Route	src/veins/modules/mobility/traci/TraCICommandInterface.h	/^		class Route {$/;"	c	class:Veins::TraCICommandInterface
RowVector	src/veins/base/connectionManager/BaseConnectionManager.h	/^	typedef std::vector<NicEntries> RowVector;$/;"	t	class:BaseConnectionManager
SCH1	src/veins/modules/utility/Consts80211p.h	/^	SCH1 = 174,$/;"	e	enum:Channels::ChannelNumber
SCH2	src/veins/modules/utility/Consts80211p.h	/^	SCH2 = 176,$/;"	e	enum:Channels::ChannelNumber
SCH3	src/veins/modules/utility/Consts80211p.h	/^	SCH3 = 180,$/;"	e	enum:Channels::ChannelNumber
SCH4	src/veins/modules/utility/Consts80211p.h	/^	SCH4 = 182,$/;"	e	enum:Channels::ChannelNumber
SEND_BEACON_EVT	src/veins/modules/application/ieee80211p/BaseWaveApplLayer.h	/^			SEND_BEACON_EVT$/;"	e	enum:BaseWaveApplLayer::WaveApplMessageKinds
SEND_FAIL	src/veins/modules/application/platooning/UnicastProtocol.h	/^	SEND_FAIL,$/;"	e	enum:ControlMessageCommand
SERVICE_PROVIDER	src/veins/modules/application/ieee80211p/BaseWaveApplLayer.h	/^			SERVICE_PROVIDER = LAST_BASE_APPL_MESSAGE_KIND,$/;"	e	enum:BaseWaveApplLayer::WaveApplMessageKinds
SET_MAC_ADDRESS	src/veins/modules/application/platooning/UnicastProtocol.h	/^	SET_MAC_ADDRESS,$/;"	e	enum:ControlMessageCommand
SIFS_11P	src/veins/modules/utility/Consts80211p.h	/^const SimTime SIFS_11P = SimTime().setRaw(32000000UL);$/;"	v
SIGNALINTERFACES_H_	src/veins/base/phyLayer/MappingUtils.h	9;"	d
SIGNAL_H_	src/veins/base/phyLayer/Signal_.h	2;"	d
SIMPLEADDRESS_H	src/veins/base/utils/SimpleAddress.h	21;"	d
SIMPLEOBSTACLEFADING_H_	src/veins/modules/analogueModel/SimpleObstacleShadowing.h	2;"	d
SIMPLEPLATOONINGAPP_H_	src/veins/modules/application/platooning/apps/SimplePlatooningApp.h	19;"	d
SIMPLEPLATOONINGBEACONING_H_	src/veins/modules/application/platooning/protocols/SimplePlatooningBeaconing.h	19;"	d
SLEEP	src/veins/base/phyLayer/PhyUtils.h	/^		SLEEP,$/;"	e	enum:Veins::Radio::RadioState
SLEEP	src/veins/base/utils/HostState.h	/^          SLEEP,	\/** Host is not active (sleeping) *\/$/;"	e	enum:HostState::States
SLOTLENGTH_11P	src/veins/modules/utility/Consts80211p.h	/^const SimTime SLOTLENGTH_11P = SimTime().setRaw(13000000UL);$/;"	v
SNRTHRESHOLDDECIDER_H_	src/veins/modules/phy/SNRThresholdDecider.h	2;"	d
SNRThresholdDecider	src/veins/modules/phy/SNRThresholdDecider.h	/^	SNRThresholdDecider(DeciderToPhyInterface* phy,$/;"	f	class:SNRThresholdDecider
SNRThresholdDecider	src/veins/modules/phy/SNRThresholdDecider.h	/^class MIXIM_API SNRThresholdDecider : public BaseDecider$/;"	c
START_RECEIVE	src/veins/base/phyLayer/BasePhyLayer.h	/^		START_RECEIVE = 1,$/;"	e	enum:BasePhyLayer::AirFrameStates
STAY_IN_CURRENT_LANE	src/veins/modules/application/platooning/CC_Const.h	/^    STAY_IN_CURRENT_LANE = 3, \/\/the car is part of a platoon, so it has to stay on the dedicated platooning lane$/;"	e	enum:Plexe::PLATOONING_LANE_CHANGE_ACTION
STEPS	src/veins/base/phyLayer/MappingBase.h	/^		STEPS,$/;"	e	enum:Mapping::InterpolationMethod
SUMOTRAFFICMANAGER_H	src/veins/modules/mobility/traci/SumoTrafficManager.h	19;"	d
SURROUNDING_VARIABLES_SUBSCRIPTION	src/veins/modules/mobility/traci/TraCIConstants.h	387;"	d
SWITCHING	src/veins/base/phyLayer/PhyUtils.h	/^		SWITCHING,$/;"	e	enum:Veins::Radio::RadioState
SWITCHING_INTERVAL_11P	src/veins/modules/utility/Consts80211p.h	/^const SimTime SWITCHING_INTERVAL_11P = SimTime().setRaw(50000000000UL);$/;"	v
SenseMode	src/veins/base/messages/ChannelSenseRequest_m.h	/^enum SenseMode {$/;"	g
Signal	src/veins/base/phyLayer/Signal.cc	/^Signal::Signal(const Signal & o):$/;"	f	class:Signal
Signal	src/veins/base/phyLayer/Signal.cc	/^Signal::Signal(simtime_t_cref sendingStart, simtime_t_cref duration):$/;"	f	class:Signal
Signal	src/veins/base/phyLayer/Signal_.h	/^class MIXIM_API Signal {$/;"	c
SignalState	src/veins/base/phyLayer/BaseDecider.h	/^	enum SignalState {$/;"	g	class:BaseDecider
SimpleConstMapping	src/veins/base/phyLayer/MappingBase.h	/^	SimpleConstMapping(const DimensionSet& dims):$/;"	f	class:SimpleConstMapping
SimpleConstMapping	src/veins/base/phyLayer/MappingBase.h	/^	SimpleConstMapping(const DimensionSet& dims,$/;"	f	class:SimpleConstMapping
SimpleConstMapping	src/veins/base/phyLayer/MappingBase.h	/^class MIXIM_API SimpleConstMapping:public ConstMapping {$/;"	c
SimpleConstMappingIterator	src/veins/base/phyLayer/MappingBase.cc	/^SimpleConstMappingIterator::SimpleConstMappingIterator(const ConstMapping*                            mapping,$/;"	f	class:SimpleConstMappingIterator
SimpleConstMappingIterator	src/veins/base/phyLayer/MappingBase.h	/^class MIXIM_API SimpleConstMappingIterator:public ConstMappingIterator {$/;"	c
SimpleObstacleShadowing	src/veins/modules/analogueModel/SimpleObstacleShadowing.cc	/^SimpleObstacleShadowing::SimpleObstacleShadowing(ObstacleControl& obstacleControl, double carrierFrequency, bool useTorus, const Coord& playgroundSize, bool debug) :$/;"	f	class:SimpleObstacleShadowing
SimpleObstacleShadowing	src/veins/modules/analogueModel/SimpleObstacleShadowing.h	/^class SimpleObstacleShadowing : public AnalogueModel$/;"	c
SimplePathlossConstMapping	src/veins/modules/analogueModel/SimplePathlossModel.cc	/^SimplePathlossConstMapping::SimplePathlossConstMapping(const DimensionSet& dimensions,$/;"	f	class:SimplePathlossConstMapping
SimplePathlossConstMapping	src/veins/modules/analogueModel/SimplePathlossModel.h	/^class MIXIM_API SimplePathlossConstMapping : public SimpleConstMapping$/;"	c
SimplePathlossModel	src/veins/modules/analogueModel/SimplePathlossModel.h	/^	SimplePathlossModel(double alpha, double carrierFrequency,$/;"	f	class:SimplePathlossModel
SimplePathlossModel	src/veins/modules/analogueModel/SimplePathlossModel.h	/^class MIXIM_API SimplePathlossModel : public AnalogueModel$/;"	c
SimplePlatooningApp	src/veins/modules/application/platooning/apps/SimplePlatooningApp.cc	/^Define_Module(SimplePlatooningApp);$/;"	v
SimplePlatooningApp	src/veins/modules/application/platooning/apps/SimplePlatooningApp.h	/^		SimplePlatooningApp() {$/;"	f	class:SimplePlatooningApp
SimplePlatooningApp	src/veins/modules/application/platooning/apps/SimplePlatooningApp.h	/^class SimplePlatooningApp : public BaseApp$/;"	c
SimplePlatooningBeaconing	src/veins/modules/application/platooning/protocols/SimplePlatooningBeaconing.cc	/^SimplePlatooningBeaconing::SimplePlatooningBeaconing()$/;"	f	class:SimplePlatooningBeaconing
SimplePlatooningBeaconing	src/veins/modules/application/platooning/protocols/SimplePlatooningBeaconing.h	/^class SimplePlatooningBeaconing : public BaseProtocol$/;"	c
States	src/veins/base/utils/HostState.h	/^    enum States$/;"	g	class:HostState
Statistics	src/veins/modules/mobility/traci/TraCIMobility.h	/^		class Statistics {$/;"	c	class:Veins::TraCIMobility
SumoTrafficManager	src/veins/modules/mobility/traci/SumoTrafficManager.cc	/^Define_Module(SumoTrafficManager);$/;"	v
SumoTrafficManager	src/veins/modules/mobility/traci/SumoTrafficManager.h	/^		SumoTrafficManager() {}$/;"	f	class:SumoTrafficManager
SumoTrafficManager	src/veins/modules/mobility/traci/SumoTrafficManager.h	/^class SumoTrafficManager : public TraCIBaseTrafficManager$/;"	c
TARGET	src/Makefile	/^TARGET = libveins$(SHARED_LIB_SUFFIX)$/;"	m
TBIKE	src/veins/modules/application/platooning/bikes/BikeManeuver.h	8;"	d
TCAR	src/veins/modules/application/platooning/bikes/BikeManeuver.h	7;"	d
TESTTRAFFICMANAGER_H	src/veins/modules/mobility/traci/TestTrafficManager.h	19;"	d
TLPHASE_BLINKING	src/veins/modules/mobility/traci/TraCIConstants.h	345;"	d
TLPHASE_GREEN	src/veins/modules/mobility/traci/TraCIConstants.h	343;"	d
TLPHASE_NOSIGNAL	src/veins/modules/mobility/traci/TraCIConstants.h	347;"	d
TLPHASE_RED	src/veins/modules/mobility/traci/TraCIConstants.h	339;"	d
TLPHASE_YELLOW	src/veins/modules/mobility/traci/TraCIConstants.h	341;"	d
TL_COMPLETE_DEFINITION_RYG	src/veins/modules/mobility/traci/TraCIConstants.h	448;"	d
TL_COMPLETE_PROGRAM_RYG	src/veins/modules/mobility/traci/TraCIConstants.h	451;"	d
TL_CONTROLLED_JUNCTIONS	src/veins/modules/mobility/traci/TraCIConstants.h	445;"	d
TL_CONTROLLED_LANES	src/veins/modules/mobility/traci/TraCIConstants.h	433;"	d
TL_CONTROLLED_LINKS	src/veins/modules/mobility/traci/TraCIConstants.h	436;"	d
TL_CURRENT_PHASE	src/veins/modules/mobility/traci/TraCIConstants.h	439;"	d
TL_CURRENT_PROGRAM	src/veins/modules/mobility/traci/TraCIConstants.h	442;"	d
TL_NEXT_SWITCH	src/veins/modules/mobility/traci/TraCIConstants.h	454;"	d
TL_PHASE_DURATION	src/veins/modules/mobility/traci/TraCIConstants.h	430;"	d
TL_PHASE_INDEX	src/veins/modules/mobility/traci/TraCIConstants.h	424;"	d
TL_PROGRAM	src/veins/modules/mobility/traci/TraCIConstants.h	427;"	d
TL_RED_YELLOW_GREEN_STATE	src/veins/modules/mobility/traci/TraCIConstants.h	421;"	d
TRACIBASETRAFFICMANAGER_H	src/veins/modules/mobility/traci/TraCIBaseTrafficManager.h	19;"	d
TRACICONSTANTS_H	src/veins/modules/mobility/traci/TraCIConstants.h	30;"	d
TRACI_SIGNAL_PARKING_CHANGE_NAME	src/veins/modules/mobility/traci/TraCIMobility.h	24;"	d
TRACI_VERSION	src/veins/modules/mobility/traci/TraCIConstants.h	36;"	d
TX	src/veins/base/phyLayer/PhyUtils.h	/^		TX,$/;"	e	enum:Veins::Radio::RadioState
TX_OVER	src/veins/base/modules/BaseMacLayer.h	/^        TX_OVER = 23500,$/;"	e	enum:BaseMacLayer::BaseMacControlKinds
TX_OVER	src/veins/base/phyLayer/MacToPhyInterface.h	/^		TX_OVER = 22000,$/;"	e	enum:MacToPhyInterface::BasePhyMessageKinds
TYPE_BOUNDINGBOX	src/veins/modules/mobility/traci/TraCIConstants.h	294;"	d
TYPE_BYTE	src/veins/modules/mobility/traci/TraCIConstants.h	300;"	d
TYPE_COLOR	src/veins/modules/mobility/traci/TraCIConstants.h	316;"	d
TYPE_COMPOUND	src/veins/modules/mobility/traci/TraCIConstants.h	314;"	d
TYPE_DOUBLE	src/veins/modules/mobility/traci/TraCIConstants.h	306;"	d
TYPE_FLOAT	src/veins/modules/mobility/traci/TraCIConstants.h	304;"	d
TYPE_INTEGER	src/veins/modules/mobility/traci/TraCIConstants.h	302;"	d
TYPE_POLYGON	src/veins/modules/mobility/traci/TraCIConstants.h	296;"	d
TYPE_STRING	src/veins/modules/mobility/traci/TraCIConstants.h	308;"	d
TYPE_STRINGLIST	src/veins/modules/mobility/traci/TraCIConstants.h	312;"	d
TYPE_TLPHASELIST	src/veins/modules/mobility/traci/TraCIConstants.h	310;"	d
TYPE_UBYTE	src/veins/modules/mobility/traci/TraCIConstants.h	298;"	d
T_SYM_80211P	src/veins/modules/utility/Consts80211p.h	/^const double T_SYM_80211P = 8e-6;$/;"	v
TestTrafficManager	src/veins/modules/mobility/traci/TestTrafficManager.cc	/^Define_Module(TestTrafficManager);$/;"	v
TestTrafficManager	src/veins/modules/mobility/traci/TestTrafficManager.h	/^		TestTrafficManager() {$/;"	f	class:TestTrafficManager
TestTrafficManager	src/veins/modules/mobility/traci/TestTrafficManager.h	/^class TestTrafficManager : public TraCIBaseTrafficManager$/;"	c
TimeMapping	src/veins/base/phyLayer/MappingUtils.h	/^	TimeMapping():$/;"	f	class:TimeMapping
TimeMapping	src/veins/base/phyLayer/MappingUtils.h	/^	TimeMapping(mapped_cref_type outOfRangeVal):$/;"	f	class:TimeMapping
TimeMapping	src/veins/base/phyLayer/MappingUtils.h	/^class TimeMapping:public Mapping {$/;"	c
TimeMappingIterator	src/veins/base/phyLayer/MappingUtils.h	/^	TimeMappingIterator(const iterator& it):$/;"	f	class:TimeMappingIterator
TimeMappingIterator	src/veins/base/phyLayer/MappingUtils.h	/^class TimeMappingIterator:public MappingIterator {$/;"	c
TraCIBaseTrafficManager	src/veins/modules/mobility/traci/TraCIBaseTrafficManager.cc	/^Define_Module(TraCIBaseTrafficManager);$/;"	v
TraCIBaseTrafficManager	src/veins/modules/mobility/traci/TraCIBaseTrafficManager.h	/^		TraCIBaseTrafficManager() {$/;"	f	class:TraCIBaseTrafficManager
TraCIBaseTrafficManager	src/veins/modules/mobility/traci/TraCIBaseTrafficManager.h	/^class TraCIBaseTrafficManager : public cSimpleModule$/;"	c
TraCIBuffer	src/veins/modules/mobility/traci/TraCIBuffer.cc	/^TraCIBuffer::TraCIBuffer() : buf() {$/;"	f	class:Veins::TraCIBuffer
TraCIBuffer	src/veins/modules/mobility/traci/TraCIBuffer.cc	/^TraCIBuffer::TraCIBuffer(std::string buf) : buf(buf) {$/;"	f	class:Veins::TraCIBuffer
TraCIBuffer	src/veins/modules/mobility/traci/TraCIBuffer.h	/^class TraCIBuffer {$/;"	c	namespace:Veins
TraCIColor	src/veins/modules/mobility/traci/TraCIColor.cc	/^TraCIColor::TraCIColor(uint8_t red, uint8_t green, uint8_t blue, uint8_t alpha) :$/;"	f	class:TraCIColor
TraCIColor	src/veins/modules/mobility/traci/TraCIColor.h	/^class TraCIColor {$/;"	c	namespace:Veins
TraCICommandInterface	src/veins/modules/mobility/traci/TraCICommandInterface.cc	/^TraCICommandInterface::TraCICommandInterface(TraCIConnection& c) : connection(c)$/;"	f	class:Veins::TraCICommandInterface
TraCICommandInterface	src/veins/modules/mobility/traci/TraCICommandInterface.h	/^class TraCICommandInterface$/;"	c	namespace:Veins
TraCIConnection	src/veins/modules/mobility/traci/TraCIConnection.cc	/^TraCIConnection::TraCIConnection(void* ptr) : socketPtr(ptr) {$/;"	f	class:Veins::TraCIConnection
TraCIConnection	src/veins/modules/mobility/traci/TraCIConnection.h	/^class TraCIConnection$/;"	c	namespace:Veins
TraCICoord	src/veins/modules/mobility/traci/TraCICoord.h	/^	TraCICoord() : x(0.0), y(0.0) {}$/;"	f	struct:Veins::TraCICoord
TraCICoord	src/veins/modules/mobility/traci/TraCICoord.h	/^	TraCICoord(double x, double y) : x(x), y(y) {}$/;"	f	struct:Veins::TraCICoord
TraCICoord	src/veins/modules/mobility/traci/TraCICoord.h	/^struct TraCICoord {$/;"	s	namespace:Veins
TraCIDemo11p	src/veins/modules/application/traci/TraCIDemo11p.cc	/^Define_Module(TraCIDemo11p);$/;"	v
TraCIDemo11p	src/veins/modules/application/traci/TraCIDemo11p.h	/^class TraCIDemo11p : public BaseWaveApplLayer {$/;"	c
TraCIDemo11p_H	src/veins/modules/application/traci/TraCIDemo11p.h	22;"	d
TraCIDemoRSU11p	src/veins/modules/application/traci/TraCIDemoRSU11p.h	/^class TraCIDemoRSU11p : public BaseWaveApplLayer {$/;"	c
TraCIDemoRSU11p_H	src/veins/modules/application/traci/TraCIDemoRSU11p.h	22;"	d
TraCIMobility	src/veins/modules/mobility/traci/TraCIMobility.h	/^		TraCIMobility() : BaseMobility(), isPreInitialized(false), manager(0), commandInterface(0), vehicleCommandInterface(0) {}$/;"	f	class:Veins::TraCIMobility
TraCIMobility	src/veins/modules/mobility/traci/TraCIMobility.h	/^class TraCIMobility : public BaseMobility$/;"	c	namespace:Veins
TraCIMobilityAccess	src/veins/modules/mobility/traci/TraCIMobility.h	/^class TraCIMobilityAccess$/;"	c	namespace:Veins
TraCIScenarioManager	src/veins/modules/mobility/traci/TraCIScenarioManager.cc	/^TraCIScenarioManager::TraCIScenarioManager() :$/;"	f	class:TraCIScenarioManager
TraCIScenarioManager	src/veins/modules/mobility/traci/TraCIScenarioManager.h	/^class TraCIScenarioManager : public cSimpleModule$/;"	c	namespace:Veins
TraCIScenarioManagerAccess	src/veins/modules/mobility/traci/TraCIScenarioManager.h	/^class TraCIScenarioManagerAccess$/;"	c	namespace:Veins
TraCIScenarioManagerLaunchd	src/veins/modules/mobility/traci/TraCIScenarioManagerLaunchd.h	/^class TraCIScenarioManagerLaunchd : public TraCIScenarioManager$/;"	c	namespace:Veins
TraCIScenarioManagerLaunchdAccess	src/veins/modules/mobility/traci/TraCIScenarioManagerLaunchd.h	/^class TraCIScenarioManagerLaunchdAccess$/;"	c	namespace:Veins
TraCIScreenRecorder	src/veins/modules/mobility/traci/TraCIScreenRecorder.h	/^class TraCIScreenRecorder : public cSimpleModule$/;"	c	namespace:Veins
TraCITestApp	src/veins/modules/application/traci/TraCITestApp.h	/^class TraCITestApp : public BaseApplLayer {$/;"	c	namespace:Veins
TraCITestApp_H	src/veins/modules/application/traci/TraCITestApp.h	22;"	d
Trafficlight	src/veins/modules/mobility/traci/TraCICommandInterface.h	/^				Trafficlight(TraCICommandInterface* traci, std::string trafficLightId) : traci(traci), trafficLightId(trafficLightId) {$/;"	f	class:Veins::TraCICommandInterface::Trafficlight
Trafficlight	src/veins/modules/mobility/traci/TraCICommandInterface.h	/^		class Trafficlight {$/;"	c	class:Veins::TraCICommandInterface
TwoRayInterferenceModel	src/veins/modules/analogueModel/TwoRayInterferenceModel.h	/^		TwoRayInterferenceModel(double dielectricConstant, bool debug) :$/;"	f	class:TwoRayInterferenceModel
TwoRayInterferenceModel	src/veins/modules/analogueModel/TwoRayInterferenceModel.h	/^class TwoRayInterferenceModel: public AnalogueModel {$/;"	c
TypeMapping	src/veins/modules/mobility/traci/TraCIScenarioManager.h	/^		typedef std::map<std::string, std::string> TypeMapping;$/;"	t	class:Veins::TraCIScenarioManager
UNICASTPROTOCOL_H_	src/veins/modules/application/platooning/UnicastProtocol.h	19;"	d
UNTIL_BUSY	src/veins/base/messages/ChannelSenseRequest_m.h	/^    UNTIL_BUSY = 2,$/;"	e	enum:SenseMode
UNTIL_IDLE	src/veins/base/messages/ChannelSenseRequest_m.h	/^    UNTIL_IDLE = 1,$/;"	e	enum:SenseMode
UNTIL_TIMEOUT	src/veins/base/messages/ChannelSenseRequest_m.h	/^    UNTIL_TIMEOUT = 3$/;"	e	enum:SenseMode
UPPER_CONTROL	src/veins/base/utils/PassedMessage.h	/^	UPPER_CONTROL,$/;"	e	enum:PassedMessage::gates_t
UPPER_DATA	src/veins/base/utils/PassedMessage.h	/^        UPPER_DATA,$/;"	e	enum:PassedMessage::gates_t
UnicastMessage	src/veins/modules/application/platooning/messages/UnicastMessage_m.cc	/^Register_Class(UnicastMessage);$/;"	v
UnicastMessage	src/veins/modules/application/platooning/messages/UnicastMessage_m.cc	/^UnicastMessage::UnicastMessage(const UnicastMessage& other) : ::cPacket(other)$/;"	f	class:UnicastMessage
UnicastMessage	src/veins/modules/application/platooning/messages/UnicastMessage_m.cc	/^UnicastMessage::UnicastMessage(const char *name, int kind) : ::cPacket(name,kind)$/;"	f	class:UnicastMessage
UnicastMessage	src/veins/modules/application/platooning/messages/UnicastMessage_m.h	/^class UnicastMessage : public ::cPacket$/;"	c
UnicastMessageDescriptor	src/veins/modules/application/platooning/messages/UnicastMessage_m.cc	/^Register_ClassDescriptor(UnicastMessageDescriptor);$/;"	v
UnicastMessageDescriptor	src/veins/modules/application/platooning/messages/UnicastMessage_m.cc	/^UnicastMessageDescriptor::UnicastMessageDescriptor() : cClassDescriptor("UnicastMessage", "cPacket")$/;"	f	class:UnicastMessageDescriptor
UnicastMessageDescriptor	src/veins/modules/application/platooning/messages/UnicastMessage_m.cc	/^class UnicastMessageDescriptor : public cClassDescriptor$/;"	c	file:
UnicastMessageType	src/veins/modules/application/platooning/messages/UnicastMessage_m.h	/^enum UnicastMessageType {$/;"	g
UnicastProtocol	src/veins/modules/application/platooning/UnicastProtocol.cc	/^Define_Module(UnicastProtocol);$/;"	v
UnicastProtocol	src/veins/modules/application/platooning/UnicastProtocol.cc	/^UnicastProtocol::UnicastProtocol()$/;"	f	class:UnicastProtocol
UnicastProtocol	src/veins/modules/application/platooning/UnicastProtocol.h	/^class UnicastProtocol : public BaseWaveApplLayer$/;"	c
UnicastProtocolControlMessage	src/veins/modules/application/platooning/messages/UnicastProtocolControlMessage_m.cc	/^Register_Class(UnicastProtocolControlMessage);$/;"	v
UnicastProtocolControlMessage	src/veins/modules/application/platooning/messages/UnicastProtocolControlMessage_m.cc	/^UnicastProtocolControlMessage::UnicastProtocolControlMessage(const UnicastProtocolControlMessage& other) : ::cPacket(other)$/;"	f	class:UnicastProtocolControlMessage
UnicastProtocolControlMessage	src/veins/modules/application/platooning/messages/UnicastProtocolControlMessage_m.cc	/^UnicastProtocolControlMessage::UnicastProtocolControlMessage(const char *name, int kind) : ::cPacket(name,kind)$/;"	f	class:UnicastProtocolControlMessage
UnicastProtocolControlMessage	src/veins/modules/application/platooning/messages/UnicastProtocolControlMessage_m.h	/^class UnicastProtocolControlMessage : public ::cPacket$/;"	c
UnicastProtocolControlMessageDescriptor	src/veins/modules/application/platooning/messages/UnicastProtocolControlMessage_m.cc	/^Register_ClassDescriptor(UnicastProtocolControlMessageDescriptor);$/;"	v
UnicastProtocolControlMessageDescriptor	src/veins/modules/application/platooning/messages/UnicastProtocolControlMessage_m.cc	/^UnicastProtocolControlMessageDescriptor::UnicastProtocolControlMessageDescriptor() : cClassDescriptor("UnicastProtocolControlMessage", "cPacket")$/;"	f	class:UnicastProtocolControlMessageDescriptor
UnicastProtocolControlMessageDescriptor	src/veins/modules/application/platooning/messages/UnicastProtocolControlMessage_m.cc	/^class UnicastProtocolControlMessageDescriptor : public cClassDescriptor$/;"	c	file:
UnusedPortLock	sumo-launchd.py	/^class UnusedPortLock:$/;"	c
VAR_ACCEL	src/veins/modules/mobility/traci/TraCIConstants.h	493;"	d
VAR_ALLOWED_SPEED	src/veins/modules/mobility/traci/TraCIConstants.h	592;"	d
VAR_ANGLE	src/veins/modules/mobility/traci/TraCIConstants.h	484;"	d
VAR_ARRIVED_VEHICLES_IDS	src/veins/modules/mobility/traci/TraCIConstants.h	655;"	d
VAR_ARRIVED_VEHICLES_NUMBER	src/veins/modules/mobility/traci/TraCIConstants.h	652;"	d
VAR_BEST_LANES	src/veins/modules/mobility/traci/TraCIConstants.h	576;"	d
VAR_BUS_STOP_WAITING	src/veins/modules/mobility/traci/TraCIConstants.h	619;"	d
VAR_CO2EMISSION	src/veins/modules/mobility/traci/TraCIConstants.h	596;"	d
VAR_COEMISSION	src/veins/modules/mobility/traci/TraCIConstants.h	599;"	d
VAR_COLOR	src/veins/modules/mobility/traci/TraCIConstants.h	490;"	d
VAR_CURRENT_TRAVELTIME	src/veins/modules/mobility/traci/TraCIConstants.h	553;"	d
VAR_DECEL	src/veins/modules/mobility/traci/TraCIConstants.h	496;"	d
VAR_DELTA_T	src/veins/modules/mobility/traci/TraCIConstants.h	670;"	d
VAR_DEPARTED_VEHICLES_IDS	src/veins/modules/mobility/traci/TraCIConstants.h	637;"	d
VAR_DEPARTED_VEHICLES_NUMBER	src/veins/modules/mobility/traci/TraCIConstants.h	634;"	d
VAR_DISTANCE	src/veins/modules/mobility/traci/TraCIConstants.h	721;"	d
VAR_EDGES	src/veins/modules/mobility/traci/TraCIConstants.h	535;"	d
VAR_EDGE_EFFORT	src/veins/modules/mobility/traci/TraCIConstants.h	550;"	d
VAR_EDGE_TRAVELTIME	src/veins/modules/mobility/traci/TraCIConstants.h	547;"	d
VAR_EMISSIONCLASS	src/veins/modules/mobility/traci/TraCIConstants.h	505;"	d
VAR_FILL	src/veins/modules/mobility/traci/TraCIConstants.h	538;"	d
VAR_FUELCONSUMPTION	src/veins/modules/mobility/traci/TraCIConstants.h	611;"	d
VAR_GET_ACC_ACCELERATION	src/veins/modules/mobility/traci/TraCIConstants.h	764;"	d
VAR_GET_ACTIVE_CONTROLLER	src/veins/modules/mobility/traci/TraCIConstants.h	808;"	d
VAR_GET_CACC_SPACING	src/veins/modules/mobility/traci/TraCIConstants.h	761;"	d
VAR_GET_CC_INSTALLED	src/veins/modules/mobility/traci/TraCIConstants.h	791;"	d
VAR_GET_CRASHED	src/veins/modules/mobility/traci/TraCIConstants.h	767;"	d
VAR_GET_DISTANCE_FROM_BEGIN	src/veins/modules/mobility/traci/TraCIConstants.h	811;"	d
VAR_GET_DISTANCE_TO_END	src/veins/modules/mobility/traci/TraCIConstants.h	802;"	d
VAR_GET_GENERIC_INFORMATION	src/veins/modules/mobility/traci/TraCIConstants.h	752;"	d
VAR_GET_LANES_COUNT	src/veins/modules/mobility/traci/TraCIConstants.h	779;"	d
VAR_GET_LANE_CHANGE_ACTION	src/veins/modules/mobility/traci/TraCIConstants.h	805;"	d
VAR_GET_RADAR_DATA	src/veins/modules/mobility/traci/TraCIConstants.h	794;"	d
VAR_GET_SPEED_AND_ACCELERATION	src/veins/modules/mobility/traci/TraCIConstants.h	773;"	d
VAR_HCEMISSION	src/veins/modules/mobility/traci/TraCIConstants.h	602;"	d
VAR_IMPERFECTION	src/veins/modules/mobility/traci/TraCIConstants.h	562;"	d
VAR_LANECHANGE_MODE	src/veins/modules/mobility/traci/TraCIConstants.h	589;"	d
VAR_LANEPOSITION	src/veins/modules/mobility/traci/TraCIConstants.h	541;"	d
VAR_LANE_ID	src/veins/modules/mobility/traci/TraCIConstants.h	526;"	d
VAR_LANE_INDEX	src/veins/modules/mobility/traci/TraCIConstants.h	529;"	d
VAR_LENGTH	src/veins/modules/mobility/traci/TraCIConstants.h	487;"	d
VAR_LOADED_VEHICLES_IDS	src/veins/modules/mobility/traci/TraCIConstants.h	631;"	d
VAR_LOADED_VEHICLES_NUMBER	src/veins/modules/mobility/traci/TraCIConstants.h	628;"	d
VAR_MAXSPEED	src/veins/modules/mobility/traci/TraCIConstants.h	478;"	d
VAR_MINGAP	src/veins/modules/mobility/traci/TraCIConstants.h	511;"	d
VAR_MIN_EXPECTED_VEHICLES	src/veins/modules/mobility/traci/TraCIConstants.h	676;"	d
VAR_MOVE_TO	src/veins/modules/mobility/traci/TraCIConstants.h	559;"	d
VAR_MOVE_TO_VTD	src/veins/modules/mobility/traci/TraCIConstants.h	582;"	d
VAR_NET_BOUNDING_BOX	src/veins/modules/mobility/traci/TraCIConstants.h	673;"	d
VAR_NOISEEMISSION	src/veins/modules/mobility/traci/TraCIConstants.h	614;"	d
VAR_NOXEMISSION	src/veins/modules/mobility/traci/TraCIConstants.h	608;"	d
VAR_PARKING_ENDING_VEHICLES_IDS	src/veins/modules/mobility/traci/TraCIConstants.h	667;"	d
VAR_PARKING_ENDING_VEHICLES_IDS	src/veins/modules/mobility/traci/TraCIConstants.h	700;"	d
VAR_PARKING_ENDING_VEHICLES_NUMBER	src/veins/modules/mobility/traci/TraCIConstants.h	664;"	d
VAR_PARKING_ENDING_VEHICLES_NUMBER	src/veins/modules/mobility/traci/TraCIConstants.h	697;"	d
VAR_PARKING_STARTING_VEHICLES_IDS	src/veins/modules/mobility/traci/TraCIConstants.h	661;"	d
VAR_PARKING_STARTING_VEHICLES_IDS	src/veins/modules/mobility/traci/TraCIConstants.h	694;"	d
VAR_PARKING_STARTING_VEHICLES_NUMBER	src/veins/modules/mobility/traci/TraCIConstants.h	658;"	d
VAR_PARKING_STARTING_VEHICLES_NUMBER	src/veins/modules/mobility/traci/TraCIConstants.h	691;"	d
VAR_PERSON_NUMBER	src/veins/modules/mobility/traci/TraCIConstants.h	617;"	d
VAR_PMXEMISSION	src/veins/modules/mobility/traci/TraCIConstants.h	605;"	d
VAR_POSITION	src/veins/modules/mobility/traci/TraCIConstants.h	481;"	d
VAR_ROAD_ID	src/veins/modules/mobility/traci/TraCIConstants.h	523;"	d
VAR_ROUTE	src/veins/modules/mobility/traci/TraCIConstants.h	544;"	d
VAR_ROUTE_ID	src/veins/modules/mobility/traci/TraCIConstants.h	532;"	d
VAR_ROUTE_VALID	src/veins/modules/mobility/traci/TraCIConstants.h	730;"	d
VAR_SCREENSHOT	src/veins/modules/mobility/traci/TraCIConstants.h	746;"	d
VAR_SET_ACC_HEADWAY_TIME	src/veins/modules/mobility/traci/TraCIConstants.h	820;"	d
VAR_SET_ACTIVE_CONTROLLER	src/veins/modules/mobility/traci/TraCIConstants.h	788;"	d
VAR_SET_CACC_SPACING	src/veins/modules/mobility/traci/TraCIConstants.h	758;"	d
VAR_SET_CC_DESIRED_SPEED	src/veins/modules/mobility/traci/TraCIConstants.h	785;"	d
VAR_SET_CONTROLLER_FAKE_DATA	src/veins/modules/mobility/traci/TraCIConstants.h	799;"	d
VAR_SET_FIXED_ACCELERATION	src/veins/modules/mobility/traci/TraCIConstants.h	770;"	d
VAR_SET_FIXED_LANE	src/veins/modules/mobility/traci/TraCIConstants.h	817;"	d
VAR_SET_GENERIC_INFORMATION	src/veins/modules/mobility/traci/TraCIConstants.h	755;"	d
VAR_SET_LANE_CHANGE_ACTION	src/veins/modules/mobility/traci/TraCIConstants.h	782;"	d
VAR_SET_LEADER_SPEED_AND_ACCELERATION	src/veins/modules/mobility/traci/TraCIConstants.h	776;"	d
VAR_SET_PREC_SPEED_AND_ACCELERATION	src/veins/modules/mobility/traci/TraCIConstants.h	814;"	d
VAR_SHAPE	src/veins/modules/mobility/traci/TraCIConstants.h	517;"	d
VAR_SHAPECLASS	src/veins/modules/mobility/traci/TraCIConstants.h	508;"	d
VAR_SIGNALS	src/veins/modules/mobility/traci/TraCIConstants.h	556;"	d
VAR_SPEED	src/veins/modules/mobility/traci/TraCIConstants.h	475;"	d
VAR_SPEEDSETMODE	src/veins/modules/mobility/traci/TraCIConstants.h	579;"	d
VAR_SPEED_DEVIATION	src/veins/modules/mobility/traci/TraCIConstants.h	568;"	d
VAR_SPEED_FACTOR	src/veins/modules/mobility/traci/TraCIConstants.h	565;"	d
VAR_SPEED_WITHOUT_TRACI	src/veins/modules/mobility/traci/TraCIConstants.h	573;"	d
VAR_STOPSTATE	src/veins/modules/mobility/traci/TraCIConstants.h	586;"	d
VAR_STOP_ENDING_VEHICLES_IDS	src/veins/modules/mobility/traci/TraCIConstants.h	688;"	d
VAR_STOP_ENDING_VEHICLES_NUMBER	src/veins/modules/mobility/traci/TraCIConstants.h	685;"	d
VAR_STOP_STARTING_VEHICLES_IDS	src/veins/modules/mobility/traci/TraCIConstants.h	682;"	d
VAR_STOP_STARTING_VEHICLES_NUMBER	src/veins/modules/mobility/traci/TraCIConstants.h	679;"	d
VAR_TAU	src/veins/modules/mobility/traci/TraCIConstants.h	499;"	d
VAR_TELEPORT_ENDING_VEHICLES_IDS	src/veins/modules/mobility/traci/TraCIConstants.h	649;"	d
VAR_TELEPORT_ENDING_VEHICLES_NUMBER	src/veins/modules/mobility/traci/TraCIConstants.h	646;"	d
VAR_TELEPORT_STARTING_VEHICLES_IDS	src/veins/modules/mobility/traci/TraCIConstants.h	643;"	d
VAR_TELEPORT_STARTING_VEHICLES_NUMBER	src/veins/modules/mobility/traci/TraCIConstants.h	640;"	d
VAR_TIME_STEP	src/veins/modules/mobility/traci/TraCIConstants.h	625;"	d
VAR_TRACK_VEHICLE	src/veins/modules/mobility/traci/TraCIConstants.h	749;"	d
VAR_TYPE	src/veins/modules/mobility/traci/TraCIConstants.h	520;"	d
VAR_VEHICLECLASS	src/veins/modules/mobility/traci/TraCIConstants.h	502;"	d
VAR_VIEW_BOUNDARY	src/veins/modules/mobility/traci/TraCIConstants.h	743;"	d
VAR_VIEW_OFFSET	src/veins/modules/mobility/traci/TraCIConstants.h	737;"	d
VAR_VIEW_SCHEMA	src/veins/modules/mobility/traci/TraCIConstants.h	740;"	d
VAR_VIEW_ZOOM	src/veins/modules/mobility/traci/TraCIConstants.h	734;"	d
VAR_WAITING_TIME	src/veins/modules/mobility/traci/TraCIConstants.h	622;"	d
VAR_WIDTH	src/veins/modules/mobility/traci/TraCIConstants.h	514;"	d
VEHICLE_DATA	src/veins/modules/application/platooning/CC_Const.h	/^struct VEHICLE_DATA {$/;"	s	namespace:Plexe
VEHICLE_DATA	src/veins/modules/application/platooning/bikeplatoons/BikesApp.h	/^		struct VEHICLE_DATA {$/;"	s	class:BikesApp
VEHICLE_DATA	src/veins/modules/application/platooning/bikes/BikeManeuver.h	/^		struct VEHICLE_DATA$/;"	s	class:BikeManeuver
VEHICLE_DATA	src/veins/modules/application/platooning/maneuver/JoinManeuverApp.h	/^		struct VEHICLE_DATA {$/;"	s	class:JoinManeuverApp
VEH_SIGNAL_BACKDRIVE	src/veins/modules/mobility/traci/TraCIScenarioManager.h	/^			VEH_SIGNAL_BACKDRIVE = 128,$/;"	e	enum:Veins::TraCIScenarioManager::VehicleSignal
VEH_SIGNAL_BLINKER_EMERGENCY	src/veins/modules/mobility/traci/TraCIScenarioManager.h	/^			VEH_SIGNAL_BLINKER_EMERGENCY = 4,$/;"	e	enum:Veins::TraCIScenarioManager::VehicleSignal
VEH_SIGNAL_BLINKER_LEFT	src/veins/modules/mobility/traci/TraCIScenarioManager.h	/^			VEH_SIGNAL_BLINKER_LEFT = 2,$/;"	e	enum:Veins::TraCIScenarioManager::VehicleSignal
VEH_SIGNAL_BLINKER_RIGHT	src/veins/modules/mobility/traci/TraCIScenarioManager.h	/^			VEH_SIGNAL_BLINKER_RIGHT = 1,$/;"	e	enum:Veins::TraCIScenarioManager::VehicleSignal
VEH_SIGNAL_BRAKELIGHT	src/veins/modules/mobility/traci/TraCIScenarioManager.h	/^			VEH_SIGNAL_BRAKELIGHT = 8,$/;"	e	enum:Veins::TraCIScenarioManager::VehicleSignal
VEH_SIGNAL_DOOR_OPEN_LEFT	src/veins/modules/mobility/traci/TraCIScenarioManager.h	/^			VEH_SIGNAL_DOOR_OPEN_LEFT = 512,$/;"	e	enum:Veins::TraCIScenarioManager::VehicleSignal
VEH_SIGNAL_DOOR_OPEN_RIGHT	src/veins/modules/mobility/traci/TraCIScenarioManager.h	/^			VEH_SIGNAL_DOOR_OPEN_RIGHT = 1024,$/;"	e	enum:Veins::TraCIScenarioManager::VehicleSignal
VEH_SIGNAL_EMERGENCY_BLUE	src/veins/modules/mobility/traci/TraCIScenarioManager.h	/^			VEH_SIGNAL_EMERGENCY_BLUE = 2048,$/;"	e	enum:Veins::TraCIScenarioManager::VehicleSignal
VEH_SIGNAL_EMERGENCY_RED	src/veins/modules/mobility/traci/TraCIScenarioManager.h	/^			VEH_SIGNAL_EMERGENCY_RED = 4096,$/;"	e	enum:Veins::TraCIScenarioManager::VehicleSignal
VEH_SIGNAL_EMERGENCY_YELLOW	src/veins/modules/mobility/traci/TraCIScenarioManager.h	/^			VEH_SIGNAL_EMERGENCY_YELLOW = 8192$/;"	e	enum:Veins::TraCIScenarioManager::VehicleSignal
VEH_SIGNAL_FOGLIGHT	src/veins/modules/mobility/traci/TraCIScenarioManager.h	/^			VEH_SIGNAL_FOGLIGHT = 32,$/;"	e	enum:Veins::TraCIScenarioManager::VehicleSignal
VEH_SIGNAL_FRONTLIGHT	src/veins/modules/mobility/traci/TraCIScenarioManager.h	/^			VEH_SIGNAL_FRONTLIGHT = 16,$/;"	e	enum:Veins::TraCIScenarioManager::VehicleSignal
VEH_SIGNAL_HIGHBEAM	src/veins/modules/mobility/traci/TraCIScenarioManager.h	/^			VEH_SIGNAL_HIGHBEAM = 64,$/;"	e	enum:Veins::TraCIScenarioManager::VehicleSignal
VEH_SIGNAL_NONE	src/veins/modules/mobility/traci/TraCIScenarioManager.h	/^			VEH_SIGNAL_NONE = 0,$/;"	e	enum:Veins::TraCIScenarioManager::VehicleSignal
VEH_SIGNAL_UNDEF	src/veins/modules/mobility/traci/TraCIScenarioManager.h	/^			VEH_SIGNAL_UNDEF = -1,$/;"	e	enum:Veins::TraCIScenarioManager::VehicleSignal
VEH_SIGNAL_WIPER	src/veins/modules/mobility/traci/TraCIScenarioManager.h	/^			VEH_SIGNAL_WIPER = 256,$/;"	e	enum:Veins::TraCIScenarioManager::VehicleSignal
VEINS_MOBILITY_TRACI_TRACIBUFFER_H_	src/veins/modules/mobility/traci/TraCIBuffer.h	2;"	d
VEINS_MOBILITY_TRACI_TRACICOMMANDINTERFACE_H_	src/veins/modules/mobility/traci/TraCICommandInterface.h	2;"	d
VEINS_MOBILITY_TRACI_TRACICONNECTION_H_	src/veins/modules/mobility/traci/TraCIConnection.h	2;"	d
VEINS_MOBILITY_TRACI_TRACICOORD_H_	src/veins/modules/mobility/traci/TraCICoord.h	2;"	d
VEINS_MOBILITY_TRACI_TRACIMOBILITY_H	src/veins/modules/mobility/traci/TraCIMobility.h	22;"	d
VEINS_WORLD_TRACI_TRACISCENARIOMANAGER_H	src/veins/modules/mobility/traci/TraCIScenarioManager.h	22;"	d
Vehicle	src/veins/modules/mobility/traci/TraCIBaseTrafficManager.h	/^		struct Vehicle {$/;"	s	class:TraCIBaseTrafficManager
Vehicle	src/veins/modules/mobility/traci/TraCICommandInterface.h	/^				Vehicle(TraCICommandInterface* traci, std::string nodeId) : traci(traci), nodeId(nodeId) {$/;"	f	class:Veins::TraCICommandInterface::Vehicle
Vehicle	src/veins/modules/mobility/traci/TraCICommandInterface.h	/^		class Vehicle {$/;"	c	class:Veins::TraCICommandInterface
VehicleSignal	src/veins/modules/mobility/traci/TraCIScenarioManager.h	/^		enum VehicleSignal {$/;"	g	class:Veins::TraCIScenarioManager
Veins	src/veins/base/connectionManager/BaseConnectionManager.h	/^namespace Veins {$/;"	n
Veins	src/veins/base/connectionManager/ChannelAccess.h	/^namespace Veins {$/;"	n
Veins	src/veins/base/connectionManager/NicEntry.h	/^namespace Veins {$/;"	n
Veins	src/veins/base/messages/AirFrame_m.cc	/^namespace Veins {$/;"	n	file:
Veins	src/veins/base/messages/AirFrame_m.h	/^namespace Veins {$/;"	n
Veins	src/veins/base/modules/BatteryAccess.h	/^namespace Veins {$/;"	n
Veins	src/veins/base/phyLayer/AnalogueModel.h	/^namespace Veins {$/;"	n
Veins	src/veins/base/phyLayer/DeciderToPhyInterface.h	/^namespace Veins {$/;"	n
Veins	src/veins/base/phyLayer/PhyUtils.h	/^namespace Veins {$/;"	n
Veins	src/veins/modules/application/traci/TraCITestApp.h	/^namespace Veins {$/;"	n
Veins	src/veins/modules/mobility/traci/TraCIBuffer.cc	/^namespace Veins {$/;"	n	file:
Veins	src/veins/modules/mobility/traci/TraCIBuffer.h	/^namespace Veins {$/;"	n
Veins	src/veins/modules/mobility/traci/TraCIColor.h	/^namespace Veins {$/;"	n
Veins	src/veins/modules/mobility/traci/TraCICommandInterface.cc	/^namespace Veins {$/;"	n	file:
Veins	src/veins/modules/mobility/traci/TraCICommandInterface.h	/^namespace Veins {$/;"	n
Veins	src/veins/modules/mobility/traci/TraCIConnection.cc	/^namespace Veins {$/;"	n	file:
Veins	src/veins/modules/mobility/traci/TraCIConnection.h	/^namespace Veins {$/;"	n
Veins	src/veins/modules/mobility/traci/TraCICoord.h	/^namespace Veins {$/;"	n
Veins	src/veins/modules/mobility/traci/TraCIMobility.h	/^namespace Veins {$/;"	n
Veins	src/veins/modules/mobility/traci/TraCIScenarioManager.h	/^namespace Veins {$/;"	n
Veins	src/veins/modules/mobility/traci/TraCIScenarioManagerLaunchd.h	/^namespace Veins {$/;"	n
Veins	src/veins/modules/mobility/traci/TraCIScreenRecorder.h	/^namespace Veins {$/;"	n
Veins	src/veins/modules/obstacle/Obstacle.h	/^namespace Veins {$/;"	n
Veins	src/veins/modules/obstacle/ObstacleControl.h	/^namespace Veins {$/;"	n
Veins	src/veins/modules/world/annotations/AnnotationDummy.h	/^namespace Veins {$/;"	n
Veins	src/veins/modules/world/annotations/AnnotationManager.h	/^namespace Veins {$/;"	n
WANT_WINSOCK2	src/veins/modules/mobility/traci/TraCIConnection.cc	1;"	d	file:
WITH_TRACI	src/veins/modules/mobility/traci/TraCIScenarioManagerInet.cc	5;"	d	file:
WORLD_ANNOTATION_ANNOTATIONCONTROL_H	src/veins/modules/world/annotations/AnnotationManager.h	22;"	d
WORLD_ANNOTATION_ANNOTATIONDUMMY_H	src/veins/modules/world/annotations/AnnotationDummy.h	21;"	d
WORLD_TRACI_TRACICOLORS_H	src/veins/modules/mobility/traci/TraCIColor.h	22;"	d
WORLD_TRACI_TRACISCENARIOMANAGERLAUNCHD_H	src/veins/modules/mobility/traci/TraCIScenarioManagerLaunchd.h	22;"	d
WORLD_TRACI_TRACISCREENRECORDER_H	src/veins/modules/mobility/traci/TraCIScreenRecorder.h	22;"	d
WRAP	src/veins/base/modules/BaseMobility.h	/^        WRAP,          \/\/\/< reappear at the opposite edge (torus)$/;"	e	enum:BaseMobility::BorderPolicy
WaveAppToMac1609_4Interface	src/veins/modules/mac/ieee80211p/WaveAppToMac1609_4Interface.h	/^class WaveAppToMac1609_4Interface {$/;"	c
WaveApplMessageKinds	src/veins/modules/application/ieee80211p/BaseWaveApplLayer.h	/^		enum WaveApplMessageKinds {$/;"	g	class:BaseWaveApplLayer
WaveShortMessage	src/veins/modules/messages/WaveShortMessage_m.cc	/^Register_Class(WaveShortMessage);$/;"	v
WaveShortMessage	src/veins/modules/messages/WaveShortMessage_m.cc	/^WaveShortMessage::WaveShortMessage(const WaveShortMessage& other) : ::cPacket(other)$/;"	f	class:WaveShortMessage
WaveShortMessage	src/veins/modules/messages/WaveShortMessage_m.cc	/^WaveShortMessage::WaveShortMessage(const char *name, int kind) : ::cPacket(name,kind)$/;"	f	class:WaveShortMessage
WaveShortMessage	src/veins/modules/messages/WaveShortMessage_m.h	/^class WaveShortMessage : public ::cPacket$/;"	c
WaveShortMessageDescriptor	src/veins/modules/messages/WaveShortMessage_m.cc	/^Register_ClassDescriptor(WaveShortMessageDescriptor);$/;"	v
WaveShortMessageDescriptor	src/veins/modules/messages/WaveShortMessage_m.cc	/^WaveShortMessageDescriptor::WaveShortMessageDescriptor() : cClassDescriptor("WaveShortMessage", "cPacket")$/;"	f	class:WaveShortMessageDescriptor
WaveShortMessageDescriptor	src/veins/modules/messages/WaveShortMessage_m.cc	/^class WaveShortMessageDescriptor : public cClassDescriptor$/;"	c	file:
X_BIGGER	src/veins/base/modules/BaseMobility.h	/^		X_BIGGER,  \/\/\/< x bigger or equal than playground size$/;"	e	enum:BaseMobility::BorderHandling
X_SMALLER	src/veins/base/modules/BaseMobility.h	/^        X_SMALLER, \/\/\/< x smaller than 0$/;"	e	enum:BaseMobility::BorderHandling
Y_BIGGER	src/veins/base/modules/BaseMobility.h	/^		Y_BIGGER,  \/\/\/< y bigger or equal than playground size$/;"	e	enum:BaseMobility::BorderHandling
Y_SMALLER	src/veins/base/modules/BaseMobility.h	/^		Y_SMALLER, \/\/\/< y smaller than 0$/;"	e	enum:BaseMobility::BorderHandling
ZERO	src/veins/base/utils/Coord.cc	/^const Coord Coord::ZERO = Coord(0.0, 0.0, 0.0);$/;"	m	class:Coord	file:
ZERO	src/veins/base/utils/Coord.h	/^    static const Coord ZERO;$/;"	m	class:Coord
Z_BIGGER	src/veins/base/modules/BaseMobility.h	/^		Z_BIGGER   \/\/\/< z bigger or equal than playground size$/;"	e	enum:BaseMobility::BorderHandling
Z_SMALLER	src/veins/base/modules/BaseMobility.h	/^		Z_SMALLER, \/\/\/< z smaller than 0$/;"	e	enum:BaseMobility::BorderHandling
_AIRFRAME11P_M_H_	src/veins/modules/messages/AirFrame11p_m.h	6;"	d
_API_VERSION	sumo-launchd.py	/^_API_VERSION = 1$/;"	v
_BIKE	src/veins/modules/application/platooning/bikeplatoons/BikesApp.h	25;"	d
_BIKESMESSAGE_M_H_	src/veins/modules/application/platooning/messages/BikesMessage_m.h	6;"	d
_BIKE_STATES	src/veins/modules/application/platooning/bikeplatoons/BikesApp.h	/^        typedef enum _BIKE_STATES {$/;"	g	class:BikesApp
_BIKE_STATES	src/veins/modules/application/platooning/bikes/BikeManeuver.h	/^		typedef enum _BIKE_STATES$/;"	g	class:BikeManeuver
_BORDERMSG_M_H_	src/veins/base/messages/BorderMsg_m.h	6;"	d
_CAR	src/veins/modules/application/platooning/bikeplatoons/BikesApp.h	24;"	d
_CHANNELSENSEREQUEST_M_H_	src/veins/base/messages/ChannelSenseRequest_m.h	6;"	d
_CHANNELSTATE_H_	src/veins/base/phyLayer/ChannelState.h	2;"	d
_CMD_FILE_SEND	sumo-launchd.py	/^_CMD_FILE_SEND = 0x75$/;"	v
_CMD_GET_VERSION	sumo-launchd.py	/^_CMD_GET_VERSION = 0x00$/;"	v
_COORD_H	src/veins/base/utils/Coord.h	28;"	d
_FOLLOWER_STATES	src/veins/modules/application/platooning/bikeplatoons/BikesApp.h	/^        typedef enum _FOLLOWER_STATES {$/;"	g	class:BikesApp
_FOLLOWER_STATES	src/veins/modules/application/platooning/bikes/BikeManeuver.h	/^		typedef enum _FOLLOWER_STATES$/;"	g	class:BikeManeuver
_FOLLOWER_STATES	src/veins/modules/application/platooning/maneuver/JoinManeuverApp.h	/^		typedef enum _FOLLOWER_STATES {$/;"	g	class:JoinManeuverApp
_JOINER_STATES	src/veins/modules/application/platooning/maneuver/JoinManeuverApp.h	/^		typedef enum _JOINER_STATES {$/;"	g	class:JoinManeuverApp
_LAUNCHD_VERSION	sumo-launchd.py	/^_LAUNCHD_VERSION = 'sumo-launchd.py 1.00'$/;"	v
_LEADER_STATES	src/veins/modules/application/platooning/bikeplatoons/BikesApp.h	/^		typedef enum _LEADER_STATES {$/;"	g	class:BikesApp
_LEADER_STATES	src/veins/modules/application/platooning/bikes/BikeManeuver.h	/^		typedef enum _LEADER_STATES$/;"	g	class:BikeManeuver
_LEADER_STATES	src/veins/modules/application/platooning/maneuver/JoinManeuverApp.h	/^		typedef enum _LEADER_STATES {$/;"	g	class:JoinManeuverApp
_LEAVER_STATES	src/veins/modules/application/platooning/bikeplatoons/BikesApp.h	/^        typedef enum _LEAVER_STATES {$/;"	g	class:BikesApp
_MAC80211PKT_M_H_	src/veins/modules/messages/Mac80211Pkt_m.h	6;"	d
_MACPKT_M_H_	src/veins/base/messages/MacPkt_m.h	6;"	d
_MANEUVERMESSAGE_M_H_	src/veins/modules/application/platooning/messages/ManeuverMessage_m.h	6;"	d
_PHYCONTROLMESSAGE_M_H_	src/veins/modules/messages/PhyControlMessage_m.h	6;"	d
_PLATOONINGBEACON_M_H_	src/veins/modules/application/platooning/messages/PlatooningBeacon_m.h	6;"	d
_UNICASTMESSAGE_M_H_	src/veins/modules/application/platooning/messages/UnicastMessage_m.h	6;"	d
_UNICASTPROTOCOLCONTROLMESSAGE_M_H_	src/veins/modules/application/platooning/messages/UnicastProtocolControlMessage_m.h	6;"	d
_VEINS_AIRFRAME_M_H_	src/veins/base/messages/AirFrame_m.h	6;"	d
_WAVESHORTMESSAGE_M_H_	src/veins/modules/messages/WaveShortMessage_m.h	6;"	d
__MIXIM_MIXIMDEFS_H	src/veins/base/utils/MiXiMDefs.h	19;"	d
__WINSUPPORT_H	src/veins/base/utils/winsupport.h	9;"	d
___MAC1609_4_H_	src/veins/modules/mac/ieee80211p/Mac1609_4.h	22;"	d
___WAVEAPPTOMAC1609_4INTERFACE_H_	src/veins/modules/mac/ieee80211p/WaveAppToMac1609_4Interface.h	25;"	d
__const	src/veins/base/utils/winsupport.h	15;"	d
__enter__	sumo-launchd.py	/^    def __enter__(self):$/;"	m	class:UnusedPortLock	file:
__exit__	sumo-launchd.py	/^    def __exit__(self):$/;"	m	class:UnusedPortLock	file:
__init__	sumo-launchd.py	/^    def __init__(self):$/;"	m	class:UnusedPortLock
_asprintf	src/veins/base/utils/winsupport.cc	/^int _asprintf(char** buf, const char* format, ...)$/;"	f
accHeadway	src/veins/modules/application/platooning/apps/SimplePlatooningApp.h	/^		double accHeadway;$/;"	m	class:SimplePlatooningApp
acceleration	src/veins/modules/application/platooning/CC_Const.h	/^    double acceleration; \/\/vehicle acceleration$/;"	m	struct:Plexe::VEHICLE_DATA
accelerationOut	src/veins/modules/application/platooning/protocols/BaseProtocol.h	/^		cOutVector distanceOut, relSpeedOut, nodeIdOut, speedOut, posxOut, posyOut, accelerationOut;$/;"	m	class:BaseProtocol
acceleration_var	src/veins/modules/application/platooning/messages/PlatooningBeacon_m.h	/^    double acceleration_var;$/;"	m	class:PlatooningBeacon
accidentCount	src/veins/modules/mobility/traci/TraCIMobility.h	/^		int accidentCount; \/**< number of accidents *\/$/;"	m	class:Veins::TraCIMobility
ackTimeout	src/veins/modules/application/platooning/UnicastProtocol.h	/^		double ackTimeout;$/;"	m	class:UnicastProtocol
acquire	sumo-launchd.py	/^    def acquire(self):$/;"	m	class:UnusedPortLock
activeAirFrames	src/veins/base/phyLayer/ChannelInfo.h	/^	AirFrameMatrix activeAirFrames;$/;"	m	class:ChannelInfo
activeChannel	src/veins/modules/mac/ieee80211p/Mac1609_4.h	/^		t_channel activeChannel;$/;"	m	class:Mac1609_4
activeVehicleCount	src/veins/modules/mobility/traci/TraCIScenarioManager.h	/^		uint32_t activeVehicleCount; \/**< number of vehicles, be it parking or driving **\/$/;"	m	class:Veins::TraCIScenarioManager
add	src/veins/base/connectionManager/BaseConnectionManager.h	/^		void add(const GridCoord& c) {$/;"	f	class:BaseConnectionManager::CoordSet
add	src/veins/base/phyLayer/MappingUtils.cc	/^Mapping* MappingUtils::add(const ConstMapping &f1, const ConstMapping &f2)$/;"	f	class:MappingUtils
add	src/veins/base/phyLayer/MappingUtils.cc	/^Mapping* MappingUtils::add(const ConstMapping &f1, const ConstMapping &f2, Mapping::argument_value_cref_t outOfRangeVal)$/;"	f	class:MappingUtils
add	src/veins/modules/obstacle/ObstacleControl.cc	/^void ObstacleControl::add(Obstacle obstacle) {$/;"	f	class:ObstacleControl
addAirFrame	src/veins/base/phyLayer/ChannelInfo.cc	/^void ChannelInfo::addAirFrame(AirFrame* frame, simtime_t_cref startTime)$/;"	f	class:ChannelInfo
addAttenuation	src/veins/base/phyLayer/Signal_.h	/^	void addAttenuation(ConstMapping* att) {$/;"	f	class:Signal
addDimension	src/veins/base/phyLayer/MappingBase.h	/^	void addDimension(const DimensionSet::value_type& d) {$/;"	f	class:DimensionSet
addDiscontinuity	src/veins/base/phyLayer/MappingUtils.cc	/^void MappingUtils::addDiscontinuity(Mapping* m,$/;"	f	class:MappingUtils
addFromXml	src/veins/modules/obstacle/ObstacleControl.cc	/^void ObstacleControl::addFromXml(cXMLElement* xml) {$/;"	f	class:ObstacleControl
addFromXml	src/veins/modules/world/annotations/AnnotationManager.cc	/^void AnnotationManager::addFromXml(cXMLElement* xml) {$/;"	f	class:AnnotationManager
addMapping	src/veins/base/phyLayer/MappingUtils.h	/^	void addMapping(ConstMapping* m) {$/;"	f	class:ConcatConstMapping
addModule	src/veins/modules/mobility/traci/TraCIScenarioManager.cc	/^void TraCIScenarioManager::addModule(std::string nodeId, std::string type, std::string name, std::string displayString, const Coord& position, std::string road_id, double speed, double angle) {$/;"	f	class:TraCIScenarioManager
addPoi	src/veins/modules/mobility/traci/TraCICommandInterface.cc	/^void TraCICommandInterface::addPoi(std::string poiId, std::string poiType, const TraCIColor& color, int32_t layer, const Coord& pos_) {$/;"	f	class:Veins::TraCICommandInterface
addPolygon	src/veins/modules/mobility/traci/TraCICommandInterface.cc	/^void TraCICommandInterface::addPolygon(std::string polyId, std::string polyType, const TraCIColor& color, bool filled, int32_t layer, const std::list<Coord>& points) {$/;"	f	class:Veins::TraCICommandInterface
addToInactives	src/veins/base/phyLayer/ChannelInfo.cc	/^void ChannelInfo::addToInactives(AirFrame*      frame,$/;"	f	class:ChannelInfo
addVehicle	src/veins/modules/mobility/traci/TraCICommandInterface.cc	/^bool TraCICommandInterface::addVehicle(std::string vehicleId, std::string vehicleTypeId, std::string routeId, simtime_t emitTime_st, double emitPosition, double emitSpeed, int8_t emitLane) {$/;"	f	class:Veins::TraCICommandInterface
addVehicleToQueue	src/veins/modules/mobility/traci/TraCIBaseTrafficManager.cc	/^void TraCIBaseTrafficManager::addVehicleToQueue(int routeId, struct Vehicle v) {$/;"	f	class:TraCIBaseTrafficManager
address3_var	src/veins/modules/messages/Mac80211Pkt_m.h	/^    int address3_var;$/;"	m	class:Mac80211Pkt
address4_var	src/veins/modules/messages/Mac80211Pkt_m.h	/^    int address4_var;$/;"	m	class:Mac80211Pkt
aifsn	src/veins/modules/mac/ieee80211p/Mac1609_4.h	/^						int aifsn; \/\/number of aifs slots for this queue$/;"	m	class:Mac1609_4::EDCA::EDCAQueue
airFrameId	src/veins/base/modules/BaseWorldUtility.h	/^    long airFrameId;$/;"	m	class:BaseWorldUtility
airFramePriority	src/veins/base/phyLayer/BasePhyLayer.cc	/^short BasePhyLayer::airFramePriority = 10;$/;"	m	class:BasePhyLayer	file:
airFramePriority	src/veins/base/phyLayer/BasePhyLayer.h	/^	static short airFramePriority;$/;"	m	class:BasePhyLayer
airFrameStarts	src/veins/base/phyLayer/ChannelInfo.h	/^	AirFrameStartMap airFrameStarts;$/;"	m	class:ChannelInfo
allowTxDuringRx	src/veins/modules/phy/Decider80211p.h	/^		bool allowTxDuringRx;$/;"	m	class:Decider80211p
allowTxDuringRx	src/veins/modules/phy/PhyLayer80211p.h	/^		bool allowTxDuringRx;$/;"	m	class:PhyLayer80211p
alpha	src/veins/modules/mobility/traci/TraCIColor.h	/^		uint8_t alpha;$/;"	m	class:Veins::TraCIColor
alpha1	src/veins/modules/analogueModel/BreakpointPathlossModel.h	/^    double alpha1, alpha2;$/;"	m	class:BreakpointPathlossModel
alpha2	src/veins/modules/analogueModel/BreakpointPathlossModel.h	/^    double alpha1, alpha2;$/;"	m	class:BreakpointPathlossModel
alreadyNext	src/veins/base/phyLayer/ChannelInfo.h	/^		bool alreadyNext;$/;"	m	class:ChannelInfo::BaseIntersectionIterator
analogueModels	src/veins/base/phyLayer/BasePhyLayer.h	/^	AnalogueModelList analogueModels;$/;"	m	class:BasePhyLayer
angle	src/veins/modules/mobility/traci/TraCIMobility.h	/^		double angle; \/**< updated by nextPosition() *\/$/;"	m	class:Veins::TraCIMobility
angleOfArrival	src/veins/modules/analogueModel/JakesFading.h	/^	double* angleOfArrival;$/;"	m	class:JakesFading
annotationGroup	src/veins/modules/obstacle/ObstacleControl.h	/^		AnnotationManager::Group* annotationGroup;$/;"	m	class:Veins::ObstacleControl
annotationLayer	src/veins/modules/world/annotations/AnnotationManager.h	/^		cGroupFigure* annotationLayer;$/;"	m	class:Veins::AnnotationManager
annotations	src/veins/modules/application/traci/TraCIDemo11p.h	/^		AnnotationManager* annotations;$/;"	m	class:TraCIDemo11p
annotations	src/veins/modules/application/traci/TraCIDemoRSU11p.h	/^		AnnotationManager* annotations;$/;"	m	class:TraCIDemoRSU11p
annotations	src/veins/modules/obstacle/ObstacleControl.h	/^		AnnotationManager* annotations;$/;"	m	class:Veins::ObstacleControl
annotations	src/veins/modules/world/annotations/AnnotationManager.h	/^		Annotations annotations;$/;"	m	class:Veins::AnnotationManager
annotationsXml	src/veins/modules/world/annotations/AnnotationManager.h	/^		cXMLElement* annotationsXml; \/**< annotations to add at startup *\/$/;"	m	class:Veins::AnnotationManager
answerCSR	src/veins/base/phyLayer/BaseDecider.cc	/^void BaseDecider::answerCSR(CSRInfo& requestInfo) {$/;"	f	class:BaseDecider
answerCSR	src/veins/modules/phy/SNRThresholdDecider.cc	/^void SNRThresholdDecider::answerCSR(CSRInfo& requestInfo)$/;"	f	class:SNRThresholdDecider
antennaPositionOffset	src/veins/modules/mobility/traci/TraCIMobility.h	/^		double antennaPositionOffset; \/**< front offset for the antenna on this car *\/$/;"	m	class:Veins::TraCIMobility
appendValue	src/veins/base/phyLayer/MappingBase.h	/^	virtual void appendValue(const Argument& pos, argument_value_cref_t value) {$/;"	f	class:Mapping
appendValue	src/veins/base/phyLayer/MappingUtils.h	/^	virtual void appendValue(const Argument& pos, argument_value_cref_t value) {$/;"	f	class:FilledUpMapping
applyElementWiseOperator	src/veins/base/phyLayer/MappingUtils.h	/^	static Mapping* applyElementWiseOperator(const ConstMapping& f1, const ConstMapping& f2, Operator op,$/;"	f	class:MappingUtils
applyElementWiseOperator	src/veins/base/phyLayer/MappingUtils.h	/^	static Mapping* applyElementWiseOperator(const ConstMapping& f1, const ConstMapping& f2,$/;"	f	class:MappingUtils
argument_value_cref_t	src/veins/base/phyLayer/MappingBase.h	/^	typedef Argument::mapped_type_cref argument_value_cref_t;$/;"	t	class:ConstMapping
argument_value_cref_t	src/veins/base/phyLayer/MappingBase.h	/^	typedef Argument::mapped_type_cref argument_value_cref_t;$/;"	t	class:ConstMappingIterator
argument_value_cref_t	src/veins/base/phyLayer/MappingUtils.h	/^	typedef typename Base::argument_value_cref_t argument_value_cref_t;$/;"	t	class:BaseFilteredIterator
argument_value_t	src/veins/base/phyLayer/MappingBase.h	/^	typedef Argument::mapped_type      argument_value_t;$/;"	t	class:ConstMapping
argument_value_t	src/veins/base/phyLayer/MappingBase.h	/^	typedef Argument::mapped_type      argument_value_t;$/;"	t	class:ConstMappingIterator
argument_value_t	src/veins/base/phyLayer/MappingUtils.h	/^	typedef typename Base::argument_value_t      argument_value_t;$/;"	t	class:BaseFilteredIterator
asInterpolated	src/veins/base/phyLayer/Interpolation.h	/^	interpolated asInterpolated(mapped_cref_type rVal, bool bIsOutOfRange, bool bIsInterpolated = true) const {$/;"	f	class:InterpolatorBase
asprintf	src/veins/base/utils/winsupport.h	22;"	d
assertClose	src/veins/base/utils/asserts.h	/^template<class T> void assertClose(std::string msg, T target, T actual) {$/;"	f
assertEqual	src/veins/base/utils/asserts.h	/^template<class T, class T2> void assertEqual(std::string msg, T target, T2 actual) {$/;"	f
assertEqualSilent	src/veins/base/utils/asserts.h	/^template<class T, class T2> void assertEqualSilent(std::string msg, T target, T2 actual) {$/;"	f
assertFalse	src/veins/base/utils/asserts.cc	/^void assertFalse(std::string msg, bool value) { assertTrue(msg, !value); }$/;"	f
assertNoIntersections	src/veins/base/phyLayer/ChannelInfo.cc	/^void ChannelInfo::assertNoIntersections() {$/;"	f	class:ChannelInfo
assertNotEqual	src/veins/base/utils/asserts.h	/^template<class T, class T2> void assertNotEqual(std::string msg, T target, T2 actual) {$/;"	f
assertTrue	src/veins/base/utils/asserts.cc	/^void assertTrue(std::string msg, bool value, bool hidePassed) {$/;"	f
atPreStep	src/veins/base/phyLayer/MappingUtils.h	/^	bool         atPreStep;$/;"	m	class:TimeMappingIterator
attachSignal	src/veins/modules/mac/ieee80211p/Mac1609_4.cc	/^void Mac1609_4::attachSignal(Mac80211Pkt* mac, simtime_t startTime, double frequency, uint64_t datarate, double txPower_mW) {$/;"	f	class:Mac1609_4
attenuationPerMeter	src/veins/modules/obstacle/Obstacle.h	/^		double attenuationPerMeter; \/**< in dB \/ m. Consumer Wi-Fi vs. an interior hollow wall will give approx. 5 dB *\/$/;"	m	class:Veins::Obstacle
attenuationPerWall	src/veins/modules/obstacle/Obstacle.h	/^		double attenuationPerWall; \/**< in dB. Consumer Wi-Fi vs. an exterior wall will give approx. 50 dB *\/$/;"	m	class:Veins::Obstacle
attenuations	src/veins/base/phyLayer/Signal_.h	/^	ConstMappingList attenuations;$/;"	m	class:Signal
autoShutdown	src/veins/modules/mobility/traci/TraCIScenarioManager.h	/^		bool autoShutdown; \/**< Shutdown module as soon as no more vehicles are in the simulation *\/$/;"	m	class:Veins::TraCIScenarioManager
autoShutdownTriggered	src/veins/modules/mobility/traci/TraCIScenarioManager.h	/^		bool autoShutdownTriggered;$/;"	m	class:Veins::TraCIScenarioManager
backoff	src/veins/modules/mac/ieee80211p/Mac1609_4.cc	/^void Mac1609_4::EDCA::backoff(t_access_category ac) {$/;"	f	class:Mac1609_4::EDCA
base	examples/platoonBikes/sumocfg/runner.py	/^base = os.path.dirname(sys.argv[0])$/;"	v
baseMapping	src/veins/base/phyLayer/MappingUtils.h	/^	ConstMapping* baseMapping;$/;"	m	class:ConcatConstMappingIterator
base_class_type	src/veins/base/phyLayer/Interpolation.h	/^	                                                                base_class_type;$/;"	t	class:InterpolateableIterator
base_class_type	src/veins/base/phyLayer/Interpolation.h	/^	typedef InterpolatorBase<_ContainerType> base_class_type;$/;"	t	class:Linear
base_class_type	src/veins/base/phyLayer/Interpolation.h	/^	typedef InterpolatorBase<_ContainerType> base_class_type;$/;"	t	class:Nearest
base_class_type	src/veins/base/phyLayer/Interpolation.h	/^	typedef InterpolatorBase<_ContainerType> base_class_type;$/;"	t	class:NextSmaller
base_class_type	src/veins/base/phyLayer/Interpolation.h	/^	typedef container_type                                          base_class_type;$/;"	t	class:InterpolateableMap
base_class_type	src/veins/base/phyLayer/MappingUtils.h	/^	typedef InterpolatorBase< std::map<Argument::mapped_type, Mapping*> > base_class_type;$/;"	t	class:Linear
basicTimestamp	src/veins/base/phyLayer/PhyUtils.h	/^		std::pair<simtime_t, Argument::mapped_type> basicTimestamp;$/;"	m	class:RadioStateAnalogueModel::ListEntry
battery	src/veins/base/modules/BatteryAccess.h	/^	BaseBattery* battery;$/;"	m	class:Veins::BatteryAccess
bboxP1	src/veins/modules/obstacle/Obstacle.h	/^		Coord bboxP1;$/;"	m	class:Veins::Obstacle
bboxP2	src/veins/modules/obstacle/Obstacle.h	/^		Coord bboxP2;$/;"	m	class:Veins::Obstacle
beaconLengthBits	src/veins/modules/application/ieee80211p/BaseWaveApplLayer.h	/^		int beaconLengthBits;$/;"	m	class:BaseWaveApplLayer
beaconPriority	src/veins/modules/application/ieee80211p/BaseWaveApplLayer.h	/^		int beaconPriority;$/;"	m	class:BaseWaveApplLayer
beaconingInterval	src/veins/modules/application/platooning/protocols/BaseProtocol.h	/^		SimTime beaconingInterval;$/;"	m	class:BaseProtocol
begin	src/veins/base/phyLayer/MappingBase.h	/^	const_iterator begin() const { return values.begin(); }$/;"	f	class:Argument
begin	src/veins/base/phyLayer/MappingBase.h	/^	iterator begin() { return values.begin(); }$/;"	f	class:Argument
beginIntpl	src/veins/base/phyLayer/Interpolation.h	/^	const_iterator_intpl beginIntpl() const{$/;"	f	class:InterpolateableMap
beginIntpl	src/veins/base/phyLayer/Interpolation.h	/^	iterator_intpl beginIntpl() {$/;"	f	class:InterpolateableMap
bikeFSM	src/veins/modules/application/platooning/bikes/BikeManeuver.h	/^        cFSM leaderFSM, followerFSM, bikeFSM;$/;"	m	class:BikeManeuver
bikeFsm	src/veins/modules/application/platooning/bikeplatoons/BikesApp.h	/^		cFSM leaderFsm, followerFsm, leaverFsm, bikeFsm;$/;"	m	class:BikesApp
bitErrorRate	src/veins/base/utils/MacToNetwControlInfo.h	/^	double bitErrorRate;$/;"	m	class:MacToNetwControlInfo
bitrate	src/veins/base/phyLayer/Signal_.h	/^	Mapping* bitrate;$/;"	m	class:Signal
bitrate	src/veins/modules/mac/ieee80211p/Mac1609_4.h	/^		uint64_t bitrate;$/;"	m	class:Mac1609_4
bitrate	src/veins/modules/phy/DeciderResult80211.h	/^	double bitrate;$/;"	m	class:DeciderResult80211
blue	src/veins/modules/mobility/traci/TraCIColor.h	/^		uint8_t blue;$/;"	m	class:Veins::TraCIColor
breakpointDistance	src/veins/modules/analogueModel/BreakpointPathlossModel.h	/^    double breakpointDistance;$/;"	m	class:BreakpointPathlossModel
buf	src/veins/modules/mobility/traci/TraCIBuffer.h	/^		std::string buf;$/;"	m	class:Veins::TraCIBuffer
buf_index	src/veins/modules/mobility/traci/TraCIBuffer.h	/^		size_t buf_index;$/;"	m	class:Veins::TraCIBuffer
busyThreshold	src/veins/modules/phy/SNRThresholdDecider.h	/^	double busyThreshold;$/;"	m	class:SNRThresholdDecider
cMaxNotFound	src/veins/base/phyLayer/MappingUtils.cc	/^const Argument::mapped_type MappingUtils::cMaxNotFound = -std::numeric_limits<Argument::mapped_type>::infinity();$/;"	m	class:MappingUtils	file:
cMaxNotFound	src/veins/base/phyLayer/MappingUtils.h	/^	const static Argument::mapped_type cMaxNotFound;$/;"	m	class:MappingUtils
cMinNotFound	src/veins/base/phyLayer/MappingUtils.cc	/^const Argument::mapped_type MappingUtils::cMinNotFound =  std::numeric_limits<Argument::mapped_type>::infinity();$/;"	m	class:MappingUtils	file:
cMinNotFound	src/veins/base/phyLayer/MappingUtils.h	/^	const static Argument::mapped_type cMinNotFound;$/;"	m	class:MappingUtils
caccC1	src/veins/modules/application/platooning/apps/BaseApp.h	/^		double caccXi, caccOmegaN, caccC1, engineTau;$/;"	m	class:BaseApp
caccOmegaN	src/veins/modules/application/platooning/apps/BaseApp.h	/^		double caccXi, caccOmegaN, caccC1, engineTau;$/;"	m	class:BaseApp
caccXi	src/veins/modules/application/platooning/apps/BaseApp.h	/^		double caccXi, caccOmegaN, caccC1, engineTau;$/;"	m	class:BaseApp
cacheEntries	src/veins/modules/obstacle/ObstacleControl.h	/^		mutable CacheEntries cacheEntries;$/;"	m	class:Veins::ObstacleControl
calcChannelSenseRSSI	src/veins/base/phyLayer/BaseDecider.cc	/^double BaseDecider::calcChannelSenseRSSI(simtime_t_cref start, simtime_t_cref end) {$/;"	f	class:BaseDecider
calcChannelSenseRSSI	src/veins/modules/phy/Decider80211p.cc	/^double Decider80211p::calcChannelSenseRSSI(simtime_t_cref start, simtime_t_cref end) {$/;"	f	class:Decider80211p
calcInterfDist	src/veins/base/connectionManager/ConnectionManager.cc	/^double ConnectionManager::calcInterfDist()$/;"	f	class:ConnectionManager
calcPathloss	src/veins/modules/analogueModel/SimplePathlossModel.cc	/^double SimplePathlossModel::calcPathloss(const Coord& receiverPos, const Coord& sendersPos)$/;"	f	class:SimplePathlossModel
calculateAntennaPosition	src/veins/modules/mobility/traci/TraCIMobility.cc	/^Coord TraCIMobility::calculateAntennaPosition(const Coord& vehiclePos) const {$/;"	f	class:TraCIMobility
calculateAttenuation	src/veins/modules/obstacle/Obstacle.cc	/^double Obstacle::calculateAttenuation(const Coord& senderPos, const Coord& receiverPos) const {$/;"	f	class:Obstacle
calculateAttenuation	src/veins/modules/obstacle/ObstacleControl.cc	/^double ObstacleControl::calculateAttenuation(const Coord& senderPos, const Coord& receiverPos) const {$/;"	f	class:ObstacleControl
calculateCO2emission	src/veins/modules/mobility/traci/TraCIMobility.cc	/^double TraCIMobility::calculateCO2emission(double v, double a) const {$/;"	f	class:TraCIMobility
calculateNoiseRSSIMapping	src/veins/modules/phy/Decider80211p.cc	/^Mapping* Decider80211p::calculateNoiseRSSIMapping(simtime_t_cref start, simtime_t_cref end, AirFrame *exclude) {$/;"	f	class:Decider80211p
calculatePe	src/veins/modules/phy/NistErrorRate.cc	/^NistErrorRate::calculatePe (double p, uint32_t bValue)$/;"	f	class:NistErrorRate
calculatePropagationDelay	src/veins/base/connectionManager/ChannelAccess.cc	/^simtime_t ChannelAccess::calculatePropagationDelay(const NicEntry* nic) {$/;"	f	class:ChannelAccess
calculateRSSIMapping	src/veins/base/phyLayer/BaseDecider.cc	/^Mapping* BaseDecider::calculateRSSIMapping( simtime_t_cref start,$/;"	f	class:BaseDecider
calculateSinrAndSnrMapping	src/veins/modules/phy/Decider80211p.cc	/^void Decider80211p::calculateSinrAndSnrMapping(AirFrame* frame, Mapping **sinrMap, Mapping **snrMap) {$/;"	f	class:Decider80211p
calculateSnrMapping	src/veins/base/phyLayer/BaseDecider.cc	/^Mapping* BaseDecider::calculateSnrMapping(AirFrame* frame)$/;"	f	class:BaseDecider
canAnswerAt	src/veins/base/phyLayer/BaseDecider.h	/^		simtime_t canAnswerAt;$/;"	m	struct:BaseDecider::__anon1
canAnswerCSR	src/veins/base/phyLayer/BaseDecider.cc	/^simtime_t BaseDecider::canAnswerCSR(const CSRInfo& requestInfo)$/;"	f	class:BaseDecider
canAnswerCSR	src/veins/modules/phy/SNRThresholdDecider.cc	/^simtime_t SNRThresholdDecider::canAnswerCSR(const CSRInfo& requestInfo) {$/;"	f	class:SNRThresholdDecider
canDiscardInterval	src/veins/base/phyLayer/ChannelInfo.cc	/^bool ChannelInfo::canDiscardInterval(simtime_t_cref startTime,$/;"	f	class:ChannelInfo
cancelScheduledMessage	src/veins/base/phyLayer/BasePhyLayer.cc	/^void BasePhyLayer::cancelScheduledMessage(cMessage* msg) {$/;"	f	class:BasePhyLayer
carrierFrequency	src/veins/modules/analogueModel/BreakpointPathlossModel.h	/^    double carrierFrequency;$/;"	m	class:BreakpointPathlossModel
carrierFrequency	src/veins/modules/analogueModel/JakesFading.h	/^	double carrierFrequency;$/;"	m	class:JakesFading
carrierFrequency	src/veins/modules/analogueModel/SimpleObstacleShadowing.h	/^    double carrierFrequency;$/;"	m	class:SimpleObstacleShadowing
carrierFrequency	src/veins/modules/analogueModel/SimplePathlossModel.h	/^	double carrierFrequency;$/;"	m	class:SimplePathlossModel
cast_it	src/veins/base/phyLayer/Interpolation.h	/^T cast_it(T rValToCast) {$/;"	f
cast_it	src/veins/base/phyLayer/Interpolation.h	/^T cast_it(simtime_t rValToCast) {$/;"	f
cast_it	src/veins/base/phyLayer/Interpolation.h	/^TTo cast_it(TFrom rValToCast) {$/;"	f
catDroppedPacketSignal	src/veins/base/modules/BaseLayer.cc	/^const simsignalwrap_t BaseLayer::catDroppedPacketSignal = simsignalwrap_t(MIXIM_SIGNAL_DROPPEDPACKET_NAME);$/;"	m	class:BaseLayer	file:
catDroppedPacketSignal	src/veins/base/modules/BaseLayer.h	/^    const static simsignalwrap_t catDroppedPacketSignal;$/;"	m	class:BaseLayer
catHostStateSignal	src/veins/base/modules/BaseModule.cc	/^const simsignalwrap_t BaseModule::catHostStateSignal = simsignalwrap_t(MIXIM_SIGNAL_HOSTSTATE_NAME);$/;"	m	class:BaseModule	file:
catHostStateSignal	src/veins/base/modules/BaseModule.h	/^    const static simsignalwrap_t catHostStateSignal;$/;"	m	class:BaseModule
catPacketSignal	src/veins/base/modules/BaseLayer.cc	/^const simsignalwrap_t BaseLayer::catPacketSignal        = simsignalwrap_t(MIXIM_SIGNAL_PACKET_NAME);$/;"	m	class:BaseLayer	file:
catPacketSignal	src/veins/base/modules/BaseLayer.h	/^    const static simsignalwrap_t catPacketSignal;$/;"	m	class:BaseLayer
catPassedMsgSignal	src/veins/base/modules/BaseLayer.cc	/^const simsignalwrap_t BaseLayer::catPassedMsgSignal     = simsignalwrap_t(MIXIM_SIGNAL_PASSEDMSG_NAME);$/;"	m	class:BaseLayer	file:
catPassedMsgSignal	src/veins/base/modules/BaseLayer.h	/^    const static simsignalwrap_t catPassedMsgSignal;$/;"	m	class:BaseLayer
cc	src/veins/base/connectionManager/ChannelAccess.h	/^	BaseConnectionManager* cc;$/;"	m	class:Veins::ChannelAccess
cc	src/veins/modules/mobility/traci/TraCIScenarioManager.h	/^		BaseConnectionManager* cc;$/;"	m	class:Veins::TraCIScenarioManager
ccEV	src/veins/base/connectionManager/BaseConnectionManager.cc	11;"	d	file:
ccEV	src/veins/base/connectionManager/ConnectionManager.cc	8;"	d	file:
cca	src/veins/modules/phy/Decider80211p.cc	/^bool Decider80211p::cca(simtime_t_cref time, AirFrame* exclude) {$/;"	f	class:Decider80211p
ccaThreshold	src/veins/modules/phy/Decider80211p.h	/^		double ccaThreshold;$/;"	m	class:Decider80211p
ccaThreshold	src/veins/modules/phy/PhyLayer80211p.h	/^		double ccaThreshold;$/;"	m	class:PhyLayer80211p
centerFrequency	src/veins/modules/phy/Decider80211p.h	/^		double centerFrequency;$/;"	m	class:Decider80211p
chAccess	src/veins/base/connectionManager/NicEntry.h	/^    ChannelAccess* chAccess;$/;"	m	class:NicEntry
changeFrequency	src/veins/modules/phy/Decider80211p.cc	/^void Decider80211p::changeFrequency(double freq) {$/;"	f	class:Decider80211p
changeListeningFrequency	src/veins/modules/phy/PhyLayer80211p.cc	/^void PhyLayer80211p::changeListeningFrequency(double freq) {$/;"	f	class:PhyLayer80211p
changeParkingState	src/veins/modules/mobility/traci/TraCIMobility.cc	/^void TraCIMobility::changeParkingState(bool newState) {$/;"	f	class:TraCIMobility
changePosition	src/veins/modules/mobility/traci/TraCIMobility.cc	/^void TraCIMobility::changePosition()$/;"	f	class:TraCIMobility
changeRoute	src/veins/modules/mobility/traci/TraCICommandInterface.cc	/^void TraCICommandInterface::Vehicle::changeRoute(std::string roadId, double travelTime) {$/;"	f	class:Veins::TraCICommandInterface::Vehicle
changeServiceChannel	src/veins/modules/mac/ieee80211p/Mac1609_4.cc	/^void Mac1609_4::changeServiceChannel(int cN) {$/;"	f	class:Mac1609_4
changeSpeed	src/veins/modules/application/platooning/apps/SimplePlatooningApp.h	/^		cMessage *changeSpeed;$/;"	m	class:SimplePlatooningApp
changeVehicleRoute	src/veins/modules/mobility/traci/TraCICommandInterface.cc	/^bool TraCICommandInterface::Vehicle::changeVehicleRoute(const std::list<std::string>& edges) {$/;"	f	class:Veins::TraCICommandInterface::Vehicle
channelBusy	src/veins/modules/mac/ieee80211p/Mac1609_4.cc	/^void Mac1609_4::channelBusy() {$/;"	f	class:Mac1609_4
channelBusySelf	src/veins/modules/mac/ieee80211p/Mac1609_4.cc	/^void Mac1609_4::channelBusySelf(bool generateTxOp) {$/;"	f	class:Mac1609_4
channelChanged	src/veins/base/phyLayer/Decider.h	/^	virtual void channelChanged(int newChannel) {}$/;"	f	class:Decider
channelIdle	src/veins/modules/mac/ieee80211p/Mac1609_4.cc	/^void Mac1609_4::channelIdle(bool afterSwitch) {$/;"	f	class:Mac1609_4
channelInfo	src/veins/base/phyLayer/BasePhyLayer.h	/^	ChannelInfo channelInfo;$/;"	m	class:BasePhyLayer
channelNumber_var	src/veins/modules/messages/WaveShortMessage_m.h	/^    int channelNumber_var;$/;"	m	class:WaveShortMessage
channelStateChanged	src/veins/base/phyLayer/BaseDecider.cc	/^void BaseDecider::channelStateChanged()$/;"	f	class:BaseDecider
channelType	src/veins/modules/mac/ieee80211p/Mac1609_4.h	/^				t_channel channelType;$/;"	m	class:Mac1609_4::EDCA
channel_var	src/veins/base/messages/AirFrame_m.h	/^    int channel_var;$/;"	m	class:Veins::AirFrame
channel_var	src/veins/modules/application/platooning/messages/UnicastMessage_m.h	/^    int channel_var;$/;"	m	class:UnicastMessage
checkAndCleanFrom	src/veins/base/phyLayer/ChannelInfo.h	/^	void checkAndCleanFrom(simtime_t_cref start) {$/;"	f	class:ChannelInfo
checkAndCleanInterval	src/veins/base/phyLayer/ChannelInfo.cc	/^void ChannelInfo::checkAndCleanInterval(simtime_t_cref startTime,$/;"	f	class:ChannelInfo
checkFreeGates	src/veins/base/connectionManager/NicEntryDebug.h	/^    bool checkFreeGates;$/;"	m	class:NicEntryDebug
checkGrid	src/veins/base/connectionManager/BaseConnectionManager.cc	/^void BaseConnectionManager::checkGrid(BaseConnectionManager::GridCoord& oldCell,$/;"	f	class:BaseConnectionManager
checkIfAboveThreshold	src/veins/modules/phy/SNRThresholdDecider.cc	/^bool SNRThresholdDecider::checkIfAboveThreshold(Mapping* map, simtime_t_cref start, simtime_t_cref end)$/;"	f	class:SNRThresholdDecider
checkIfOutside	src/veins/base/modules/BaseMobility.cc	/^BaseMobility::BorderHandling BaseMobility::checkIfOutside( Coord targetPos,$/;"	f	class:BaseMobility
checkIfSignalOk	src/veins/modules/phy/Decider80211p.cc	/^DeciderResult* Decider80211p::checkIfSignalOk(AirFrame* frame) {$/;"	f	class:Decider80211p
check_kill_daemon	sumo-launchd.py	/^def check_kill_daemon(pidfile):$/;"	f
cleanAnalogueModelUntil	src/veins/base/phyLayer/PhyUtils.h	/^	virtual void cleanAnalogueModelUntil(simtime_t_cref t) {$/;"	f	class:Veins::Radio
cleanUp	src/veins/modules/mac/ieee80211p/Mac1609_4.cc	/^void Mac1609_4::EDCA::cleanUp() {$/;"	f	class:Mac1609_4::EDCA
cleanUpUntil	src/veins/base/phyLayer/PhyUtils.cc	/^void RadioStateAnalogueModel::cleanUpUntil(simtime_t_cref t)$/;"	f	class:RadioStateAnalogueModel
clear	src/veins/modules/mobility/traci/TraCIBuffer.cc	/^void TraCIBuffer::clear() {$/;"	f	class:Veins::TraCIBuffer
clone	src/veins/base/phyLayer/MappingUtils.h	/^	virtual Mapping* clone() const { return new MultiDimMapping<Interpolator>(*this); }$/;"	f	class:MultiDimMapping
clone	src/veins/base/phyLayer/MappingUtils.h	/^	virtual Mapping* clone() const { return new TimeMapping<Interpolator>(*this); }$/;"	f	class:TimeMapping
clone	src/veins/base/phyLayer/MappingUtils.h	/^	virtual Mapping* clone() const {$/;"	f	class:ConstMappingWrapper
clone	src/veins/base/phyLayer/MappingUtils.h	/^	virtual Mapping* clone() const {$/;"	f	class:DelayedMapping
clone	src/veins/base/phyLayer/MappingUtils.h	/^	virtual Mapping* clone() const{ assert(false); return 0; }$/;"	f	class:LinearIntplMapping
close	src/veins/base/utils/FWMath.h	/^  static bool close(double one, double two) { return fabs(one-two)<EPSILON; }$/;"	f	class:FWMath
cmdline	debug	/^cmdline = prefix + ['opp_run'] + lib_flags + ned_flags + sys.argv[1:]$/;"	v
cmdline	memcheck	/^cmdline = prefix + ['opp_run'] + lib_flags + ned_flags + sys.argv[1:]$/;"	v
cmdline	run	/^cmdline = prefix + ['opp_run'] + lib_flags + ned_flags + sys.argv[1:]$/;"	v
cmdline	src/scripts/debug.in.py	/^cmdline = prefix + ['opp_run'] + lib_flags + ned_flags + sys.argv[1:]$/;"	v
cmdline	src/scripts/memcheck.in.py	/^cmdline = prefix + ['opp_run'] + lib_flags + ned_flags + sys.argv[1:]$/;"	v
cmdline	src/scripts/run.in.py	/^cmdline = prefix + ['opp_run'] + lib_flags + ned_flags + sys.argv[1:]$/;"	v
collectCollisionStatistics	src/veins/modules/phy/PhyLayer80211p.h	/^		bool collectCollisionStatistics;$/;"	m	class:PhyLayer80211p
collectCollisionStats	src/veins/modules/phy/Decider80211p.h	/^		bool collectCollisionStats;$/;"	m	class:Decider80211p
collectFreeGates	src/veins/base/connectionManager/NicEntryDebug.cc	/^void NicEntryDebug::collectFreeGates()$/;"	f	class:NicEntryDebug
collectGates	src/veins/base/connectionManager/NicEntryDebug.cc	/^int NicEntryDebug::collectGates(const char* pattern, GateStack& gates)$/;"	f	class:NicEntryDebug
collision	src/veins/modules/phy/DeciderResult80211.h	/^	bool collision;$/;"	m	class:DeciderResult80211
collisions	src/veins/modules/phy/Decider80211p.h	/^		unsigned int collisions;$/;"	m	class:Decider80211p
color	src/veins/modules/world/annotations/AnnotationManager.h	/^				std::string color;$/;"	m	class:Veins::AnnotationManager::Line
color	src/veins/modules/world/annotations/AnnotationManager.h	/^				std::string color;$/;"	m	class:Veins::AnnotationManager::Point
color	src/veins/modules/world/annotations/AnnotationManager.h	/^				std::string color;$/;"	m	class:Veins::AnnotationManager::Polygon
commandIfc	src/veins/modules/mobility/traci/TraCIScenarioManager.h	/^		TraCICommandInterface* commandIfc;$/;"	m	class:Veins::TraCIScenarioManager
commandInterface	src/veins/modules/mobility/traci/TraCIBaseTrafficManager.h	/^		Veins::TraCICommandInterface *commandInterface;$/;"	m	class:TraCIBaseTrafficManager
commandInterface	src/veins/modules/mobility/traci/TraCIMobility.h	/^		mutable TraCICommandInterface* commandInterface;$/;"	m	class:Veins::TraCIMobility
commandValue_var	src/veins/modules/application/platooning/messages/UnicastProtocolControlMessage_m.h	/^    int commandValue_var;$/;"	m	class:UnicastProtocolControlMessage
communicationDuration	src/veins/modules/application/platooning/protocols/BaseProtocol.h	/^		SimTime communicationDuration;$/;"	m	class:BaseProtocol
comp	src/veins/base/phyLayer/Interpolation.h	/^	comparator_type    comp;$/;"	m	class:InterpolatorBase
comparator_type	src/veins/base/phyLayer/Interpolation.h	/^	typedef PairLess<pair_type, key_type>         comparator_type;$/;"	t	class:InterpolatorBase
comparator_type	src/veins/base/phyLayer/Interpolation.h	/^	typedef typename base_class_type::comparator_type               comparator_type;$/;"	t	class:InterpolateableIterator
comparator_type	src/veins/base/phyLayer/Interpolation.h	/^	typedef typename base_class_type::comparator_type  comparator_type;$/;"	t	class:Linear
comparator_type	src/veins/base/phyLayer/Interpolation.h	/^	typedef typename base_class_type::comparator_type  comparator_type;$/;"	t	class:Nearest
comparator_type	src/veins/base/phyLayer/Interpolation.h	/^	typedef typename base_class_type::comparator_type  comparator_type;$/;"	t	class:NextSmaller
comparator_type	src/veins/base/phyLayer/Interpolation.h	/^	typedef typename interpolator_type::comparator_type  comparator_type;$/;"	t	class:ConstInterpolateableIterator
comparator_type	src/veins/base/phyLayer/MappingUtils.h	/^	typedef base_class_type::comparator_type  comparator_type;$/;"	t	class:Linear
compare	src/veins/base/phyLayer/MappingBase.cc	/^int Argument::compare(const Argument& o, const DimensionSet *const dims \/*= NULL*\/) const$/;"	f	class:Argument
connect	src/veins/modules/mobility/traci/TraCIConnection.cc	/^TraCIConnection* TraCIConnection::connect(const char* host, int port) {$/;"	f	class:Veins::TraCIConnection
connectAndStartTrigger	src/veins/modules/mobility/traci/TraCIScenarioManager.h	/^		cMessage* connectAndStartTrigger; \/**< self-message scheduled for when to connect to TraCI server and start running *\/$/;"	m	class:Veins::TraCIScenarioManager
connectAt	src/veins/modules/mobility/traci/TraCIScenarioManager.h	/^		simtime_t connectAt; \/**< when to connect to TraCI server (must be the initial timestep of the server) *\/$/;"	m	class:Veins::TraCIScenarioManager
connectTo	src/veins/base/connectionManager/NicEntryDebug.cc	/^void NicEntryDebug::connectTo(NicEntry* other) {$/;"	f	class:NicEntryDebug
connectTo	src/veins/base/connectionManager/NicEntryDirect.cc	/^void NicEntryDirect::connectTo(NicEntry* other)$/;"	f	class:NicEntryDirect
connection	src/veins/modules/mobility/traci/TraCICommandInterface.h	/^				TraCIConnection* connection;$/;"	m	class:Veins::TraCICommandInterface::GuiView
connection	src/veins/modules/mobility/traci/TraCICommandInterface.h	/^				TraCIConnection* connection;$/;"	m	class:Veins::TraCICommandInterface::Junction
connection	src/veins/modules/mobility/traci/TraCICommandInterface.h	/^				TraCIConnection* connection;$/;"	m	class:Veins::TraCICommandInterface::Lane
connection	src/veins/modules/mobility/traci/TraCICommandInterface.h	/^				TraCIConnection* connection;$/;"	m	class:Veins::TraCICommandInterface::Poi
connection	src/veins/modules/mobility/traci/TraCICommandInterface.h	/^				TraCIConnection* connection;$/;"	m	class:Veins::TraCICommandInterface::Polygon
connection	src/veins/modules/mobility/traci/TraCICommandInterface.h	/^				TraCIConnection* connection;$/;"	m	class:Veins::TraCICommandInterface::Road
connection	src/veins/modules/mobility/traci/TraCICommandInterface.h	/^				TraCIConnection* connection;$/;"	m	class:Veins::TraCICommandInterface::Route
connection	src/veins/modules/mobility/traci/TraCICommandInterface.h	/^				TraCIConnection* connection;$/;"	m	class:Veins::TraCICommandInterface::Trafficlight
connection	src/veins/modules/mobility/traci/TraCICommandInterface.h	/^				TraCIConnection* connection;$/;"	m	class:Veins::TraCICommandInterface::Vehicle
connection	src/veins/modules/mobility/traci/TraCICommandInterface.h	/^		TraCIConnection& connection;$/;"	m	class:Veins::TraCICommandInterface
connection	src/veins/modules/mobility/traci/TraCIScenarioManager.h	/^		TraCIConnection* connection;$/;"	m	class:Veins::TraCIScenarioManager
constClone	src/veins/base/phyLayer/MappingBase.h	/^	virtual ConstMapping* constClone() const { return clone(); }$/;"	f	class:Mapping
constClone	src/veins/base/phyLayer/MappingUtils.h	/^	ConstMapping* constClone() const  {$/;"	f	class:ConstantSimpleConstMapping
constClone	src/veins/base/phyLayer/MappingUtils.h	/^	virtual ConstMapping* constClone() const { return mapping->constClone(); }$/;"	f	class:ConstMappingWrapper
constClone	src/veins/base/phyLayer/MappingUtils.h	/^	virtual ConstMapping* constClone() const {$/;"	f	class:ConcatConstMapping
constClone	src/veins/base/phyLayer/MappingUtils.h	/^	virtual ConstMapping* constClone() const {$/;"	f	class:ConstDelayedMapping
constClone	src/veins/base/phyLayer/PhyUtils.h	/^	virtual ConstMapping* constClone() const {$/;"	f	class:RSAMMapping
constClone	src/veins/modules/analogueModel/JakesFading.h	/^	ConstMapping* constClone() const$/;"	f	class:JakesFadingMapping
constClone	src/veins/modules/analogueModel/SimplePathlossModel.h	/^	ConstMapping* constClone() const$/;"	f	class:SimplePathlossConstMapping
constClone	src/veins/modules/analogueModel/TwoRayInterferenceModel.h	/^				ConstMapping* constClone() const {$/;"	f	class:TwoRayInterferenceModel::Mapping
const_iterator	src/veins/base/phyLayer/Interpolation.h	/^	typedef typename base_class_type::const_iterator                const_iterator;$/;"	t	class:InterpolateableMap
const_iterator	src/veins/base/phyLayer/Interpolation.h	/^	typedef typename base_class_type::const_iterator   const_iterator;$/;"	t	class:Linear
const_iterator	src/veins/base/phyLayer/Interpolation.h	/^	typedef typename base_class_type::const_iterator   const_iterator;$/;"	t	class:Nearest
const_iterator	src/veins/base/phyLayer/Interpolation.h	/^	typedef typename base_class_type::const_iterator   const_iterator;$/;"	t	class:NextSmaller
const_iterator	src/veins/base/phyLayer/Interpolation.h	/^	typedef typename container_type::const_iterator                 const_iterator;$/;"	t	class:InterpolateableIterator
const_iterator	src/veins/base/phyLayer/Interpolation.h	/^	typedef typename interpolator_type::const_iterator   const_iterator;$/;"	t	class:ConstInterpolateableIterator
const_iterator	src/veins/base/phyLayer/Interpolation.h	/^	typedef typename storage_type::const_iterator const_iterator;$/;"	t	class:InterpolatorBase
const_iterator	src/veins/base/phyLayer/MappingBase.h	/^	typedef container_type::const_iterator const_iterator;$/;"	t	class:Argument
const_iterator	src/veins/base/phyLayer/MappingUtils.h	/^	typedef base_class_type::const_iterator   const_iterator;$/;"	t	class:Linear
const_iterator	src/veins/base/phyLayer/MappingUtils.h	/^	typedef typename interpolator_map_type::const_iterator_intpl const_iterator;$/;"	t	class:MultiDimMapping
const_iterator	src/veins/base/phyLayer/MappingUtils.h	/^	typedef typename interpolator_map_type::const_iterator_intpl const_iterator;$/;"	t	class:MultiDimMappingIterator
const_iterator	src/veins/base/phyLayer/MappingUtils.h	/^	typedef typename interpolator_map_type::const_iterator_intpl const_iterator;$/;"	t	class:TimeMapping
const_iterator	src/veins/base/phyLayer/MappingUtils.h	/^	typedef typename interpolator_map_type::const_iterator_intpl const_iterator;$/;"	t	class:TimeMappingIterator
const_iterator_intpl	src/veins/base/phyLayer/Interpolation.h	/^	typedef ConstInterpolateableIterator<TInterpolator>             const_iterator_intpl;$/;"	t	class:InterpolateableMap
cont	src/veins/base/phyLayer/Interpolation.h	/^	container_type& cont;$/;"	m	class:InterpolateableIterator
container_type	src/veins/base/phyLayer/Interpolation.h	/^	typedef TContainer                                              container_type;$/;"	t	class:InterpolateableMap
container_type	src/veins/base/phyLayer/Interpolation.h	/^	typedef storage_type                          container_type;$/;"	t	class:InterpolatorBase
container_type	src/veins/base/phyLayer/Interpolation.h	/^	typedef typename base_class_type::container_type                container_type;$/;"	t	class:InterpolateableIterator
container_type	src/veins/base/phyLayer/Interpolation.h	/^	typedef typename base_class_type::container_type   container_type;$/;"	t	class:Linear
container_type	src/veins/base/phyLayer/Interpolation.h	/^	typedef typename base_class_type::container_type   container_type;$/;"	t	class:Nearest
container_type	src/veins/base/phyLayer/Interpolation.h	/^	typedef typename base_class_type::container_type   container_type;$/;"	t	class:NextSmaller
container_type	src/veins/base/phyLayer/Interpolation.h	/^	typedef typename interpolator_type::container_type   container_type;$/;"	t	class:ConstInterpolateableIterator
container_type	src/veins/base/phyLayer/MappingBase.h	/^	typedef std::map<key_type, mapped_type> container_type;$/;"	t	class:Argument
container_type	src/veins/base/phyLayer/MappingUtils.h	/^	typedef base_class_type::container_type   container_type;$/;"	t	class:Linear
continueAtOutOfRange	src/veins/base/phyLayer/Interpolation.h	/^	bool continueAtOutOfRange(void) const {$/;"	f	class:InterpolatorBase
continueOutOfRange	src/veins/base/phyLayer/Interpolation.h	/^	bool               continueOutOfRange;$/;"	m	class:InterpolatorBase
continueOutOfRange	src/veins/base/phyLayer/MappingUtils.h	/^	bool                  continueOutOfRange;$/;"	m	class:ConcatConstMapping
controlCommand_var	src/veins/modules/application/platooning/messages/UnicastProtocolControlMessage_m.h	/^    int controlCommand_var;$/;"	m	class:UnicastProtocolControlMessage
controller	src/veins/modules/application/platooning/apps/SimplePlatooningApp.h	/^		enum Plexe::ACTIVE_CONTROLLER controller;$/;"	m	class:SimplePlatooningApp	typeref:enum:SimplePlatooningApp::ACTIVE_CONTROLLER
coords	src/veins/modules/obstacle/Obstacle.h	/^		Coords coords;$/;"	m	class:Veins::Obstacle
coords	src/veins/modules/world/annotations/AnnotationManager.h	/^				std::list<Coord> coords;$/;"	m	class:Veins::AnnotationManager::Polygon
copy	src/veins/base/messages/AirFrame_m.cc	/^void AirFrame::copy(const AirFrame& other)$/;"	f	class:Veins::AirFrame
copy	src/veins/base/messages/BorderMsg_m.cc	/^void BorderMsg::copy(const BorderMsg& other)$/;"	f	class:BorderMsg
copy	src/veins/base/messages/ChannelSenseRequest_m.cc	/^void ChannelSenseRequest::copy(const ChannelSenseRequest& other)$/;"	f	class:ChannelSenseRequest
copy	src/veins/base/messages/MacPkt_m.cc	/^void MacPkt::copy(const MacPkt& other)$/;"	f	class:MacPkt
copy	src/veins/base/utils/Coord.h	/^  void copy(const Coord& other) { x = other.x; y = other.y; z = other.z; }$/;"	f	class:Coord
copy	src/veins/modules/application/platooning/messages/BikesMessage_m.cc	/^void BikesMessage::copy(const BikesMessage& other)$/;"	f	class:BikesMessage
copy	src/veins/modules/application/platooning/messages/ManeuverMessage_m.cc	/^void ManeuverMessage::copy(const ManeuverMessage& other)$/;"	f	class:ManeuverMessage
copy	src/veins/modules/application/platooning/messages/PlatooningBeacon_m.cc	/^void PlatooningBeacon::copy(const PlatooningBeacon& other)$/;"	f	class:PlatooningBeacon
copy	src/veins/modules/application/platooning/messages/UnicastMessage_m.cc	/^void UnicastMessage::copy(const UnicastMessage& other)$/;"	f	class:UnicastMessage
copy	src/veins/modules/application/platooning/messages/UnicastProtocolControlMessage_m.cc	/^void UnicastProtocolControlMessage::copy(const UnicastProtocolControlMessage& other)$/;"	f	class:UnicastProtocolControlMessage
copy	src/veins/modules/messages/AirFrame11p_m.cc	/^void AirFrame11p::copy(const AirFrame11p& other)$/;"	f	class:AirFrame11p
copy	src/veins/modules/messages/Mac80211Pkt_m.cc	/^void Mac80211Pkt::copy(const Mac80211Pkt& other)$/;"	f	class:Mac80211Pkt
copy	src/veins/modules/messages/PhyControlMessage_m.cc	/^void PhyControlMessage::copy(const PhyControlMessage& other)$/;"	f	class:PhyControlMessage
copy	src/veins/modules/messages/WaveShortMessage_m.cc	/^void WaveShortMessage::copy(const WaveShortMessage& other)$/;"	f	class:WaveShortMessage
copySubMappings	src/veins/base/phyLayer/MappingUtils.h	/^	void copySubMappings(const MultiDimMapping& o){$/;"	f	class:MultiDimMapping
copy_and_modify_files	sumo-launchd.py	/^def copy_and_modify_files(basedir, copy_nodes, runpath, remote_port, seed):$/;"	f
coreDebug	src/veins/base/connectionManager/BaseConnectionManager.h	/^	bool coreDebug;$/;"	m	class:BaseConnectionManager
coreDebug	src/veins/base/connectionManager/ChannelAccess.h	/^	bool coreDebug;$/;"	m	class:Veins::ChannelAccess
coreDebug	src/veins/base/connectionManager/NicEntry.h	/^    bool coreDebug;$/;"	m	class:NicEntry
coreDebug	src/veins/base/modules/BaseMacLayer.h	/^    bool coreDebug;$/;"	m	class:BaseMacLayer
coreDebug	src/veins/base/modules/BaseMobility.h	/^    bool coreDebug;$/;"	m	class:BaseMobility
coreEV	src/veins/base/modules/BaseModule.h	38;"	d
coreEV_clear	src/veins/base/modules/BaseModule.h	37;"	d
createCompatibleMapping	src/veins/base/phyLayer/MappingUtils.cc	/^const ConstMapping *const MappingUtils::createCompatibleMapping(const ConstMapping& src, const ConstMapping& dst){$/;"	f	class:MappingUtils
createConcatenatedMapping	src/veins/base/phyLayer/MappingUtils.h	/^	Mapping* createConcatenatedMapping() const {$/;"	f	class:ConcatConstMapping
createConstIterator	src/veins/base/phyLayer/MappingBase.h	/^	virtual ConstMappingIterator* createConstIterator() const {$/;"	f	class:Mapping
createConstIterator	src/veins/base/phyLayer/MappingBase.h	/^	virtual ConstMappingIterator* createConstIterator() const {$/;"	f	class:SimpleConstMapping
createConstIterator	src/veins/base/phyLayer/MappingBase.h	/^	virtual ConstMappingIterator* createConstIterator(const Argument& pos) const {$/;"	f	class:Mapping
createConstIterator	src/veins/base/phyLayer/MappingBase.h	/^	virtual ConstMappingIterator* createConstIterator(const Argument& pos) const {$/;"	f	class:SimpleConstMapping
createConstIterator	src/veins/base/phyLayer/MappingUtils.h	/^	virtual ConstMappingIterator* createConstIterator() const {$/;"	f	class:BaseDelayedMapping
createConstIterator	src/veins/base/phyLayer/MappingUtils.h	/^	virtual ConstMappingIterator* createConstIterator() const {$/;"	f	class:ConcatConstMapping
createConstIterator	src/veins/base/phyLayer/MappingUtils.h	/^	virtual ConstMappingIterator* createConstIterator() const {$/;"	f	class:ConstMappingWrapper
createConstIterator	src/veins/base/phyLayer/MappingUtils.h	/^	virtual ConstMappingIterator* createConstIterator(const Argument& pos) const {$/;"	f	class:BaseDelayedMapping
createConstIterator	src/veins/base/phyLayer/MappingUtils.h	/^	virtual ConstMappingIterator* createConstIterator(const Argument& pos) const {$/;"	f	class:ConcatConstMapping
createConstIterator	src/veins/base/phyLayer/MappingUtils.h	/^	virtual ConstMappingIterator* createConstIterator(const Argument& pos) const {$/;"	f	class:ConstMappingWrapper
createConstIterator	src/veins/base/phyLayer/PhyUtils.cc	/^ConstMappingIterator* RSAMMapping::createConstIterator(const Argument& pos) const$/;"	f	class:RSAMMapping
createConstIterator	src/veins/base/phyLayer/PhyUtils.h	/^	virtual ConstMappingIterator* createConstIterator() const$/;"	f	class:RSAMMapping
createConstantMapping	src/veins/base/modules/BaseMacLayer.cc	/^Mapping* BaseMacLayer::createConstantMapping(simtime_t_cref start, simtime_t_cref end, Argument::mapped_type_cref value)$/;"	f	class:BaseMacLayer
createDummyModule	src/veins/modules/world/annotations/AnnotationManager.cc	/^cModule* AnnotationManager::createDummyModule(std::string displayString) {$/;"	f	class:AnnotationManager
createDummyModuleLine	src/veins/modules/world/annotations/AnnotationManager.cc	/^cModule* AnnotationManager::createDummyModuleLine(Coord p1, Coord p2, std::string color) {$/;"	f	class:AnnotationManager
createGroup	src/veins/modules/world/annotations/AnnotationManager.cc	/^AnnotationManager::Group* AnnotationManager::createGroup(std::string title) {$/;"	f	class:AnnotationManager
createIterator	src/veins/base/phyLayer/MappingUtils.h	/^	virtual MappingIterator* createIterator() {$/;"	f	class:ConstMappingWrapper
createIterator	src/veins/base/phyLayer/MappingUtils.h	/^	virtual MappingIterator* createIterator() {$/;"	f	class:DelayedMapping
createIterator	src/veins/base/phyLayer/MappingUtils.h	/^	virtual MappingIterator* createIterator() {$/;"	f	class:FilledUpMapping
createIterator	src/veins/base/phyLayer/MappingUtils.h	/^	virtual MappingIterator* createIterator() {$/;"	f	class:LinearIntplMapping
createIterator	src/veins/base/phyLayer/MappingUtils.h	/^	virtual MappingIterator* createIterator() {$/;"	f	class:MultiDimMapping
createIterator	src/veins/base/phyLayer/MappingUtils.h	/^	virtual MappingIterator* createIterator() {$/;"	f	class:TimeMapping
createIterator	src/veins/base/phyLayer/MappingUtils.h	/^	virtual MappingIterator* createIterator(const Argument& pos) {$/;"	f	class:ConstMappingWrapper
createIterator	src/veins/base/phyLayer/MappingUtils.h	/^	virtual MappingIterator* createIterator(const Argument& pos) {$/;"	f	class:DelayedMapping
createIterator	src/veins/base/phyLayer/MappingUtils.h	/^	virtual MappingIterator* createIterator(const Argument& pos) {$/;"	f	class:FilledUpMapping
createIterator	src/veins/base/phyLayer/MappingUtils.h	/^	virtual MappingIterator* createIterator(const Argument& pos) {$/;"	f	class:LinearIntplMapping
createIterator	src/veins/base/phyLayer/MappingUtils.h	/^	virtual MappingIterator* createIterator(const Argument& pos) {$/;"	f	class:MultiDimMapping
createIterator	src/veins/base/phyLayer/MappingUtils.h	/^	virtual MappingIterator* createIterator(const Argument& pos) {$/;"	f	class:TimeMapping
createKeyEntries	src/veins/base/phyLayer/MappingBase.cc	/^void SimpleConstMapping::createKeyEntries(const Argument& from, const Argument& to, const Argument& step, Argument& pos)$/;"	f	class:SimpleConstMapping
createKeyEntries	src/veins/base/phyLayer/MappingBase.cc	/^void SimpleConstMapping::createKeyEntries(const Argument& from, const Argument& to, const Argument& step,$/;"	f	class:SimpleConstMapping
createMapping	src/veins/base/phyLayer/MappingUtils.cc	/^Mapping* MappingUtils::createMapping(Mapping::argument_value_cref_t outOfRangeVal, const DimensionSet& domain, Mapping::InterpolationMethod intpl) {$/;"	f	class:MappingUtils
createMapping	src/veins/base/phyLayer/MappingUtils.cc	/^Mapping* MappingUtils::createMapping(const DimensionSet& domain, Mapping::InterpolationMethod intpl) {$/;"	f	class:MappingUtils
createNewRadio	src/veins/base/phyLayer/PhyUtils.h	/^	static Radio* createNewRadio(bool recordStats = false,$/;"	f	class:Veins::Radio
createQueue	src/veins/modules/mac/ieee80211p/Mac1609_4.cc	/^int Mac1609_4::EDCA::createQueue(int aifsn, int cwMin, int cwMax,t_access_category ac) {$/;"	f	class:Mac1609_4::EDCA
createRectangleMapping	src/veins/base/modules/BaseMacLayer.cc	/^Mapping* BaseMacLayer::createRectangleMapping(simtime_t_cref start, simtime_t_cref end, Argument::mapped_type_cref value)$/;"	f	class:BaseMacLayer
createSignal	src/veins/base/modules/BaseMacLayer.cc	/^Signal* BaseMacLayer::createSignal(simtime_t_cref start, simtime_t_cref length, double power, double bitrate)$/;"	f	class:BaseMacLayer
createSignal	src/veins/modules/mac/ieee80211p/Mac1609_4.cc	/^Signal* Mac1609_4::createSignal(simtime_t start, simtime_t length, double power, uint64_t bitrate, double frequency) {$/;"	f	class:Mac1609_4
createSingleFrequencyMapping	src/veins/base/modules/BaseMacLayer.cc	/^ConstMapping* BaseMacLayer::createSingleFrequencyMapping(simtime_t_cref             start,$/;"	f	class:BaseMacLayer
createSubSignal	src/veins/base/phyLayer/MappingUtils.h	/^	Mapping* createSubSignal() const{$/;"	f	class:FilledUpMapping
createSubSignal	src/veins/base/phyLayer/MappingUtils.h	/^	mapped_type createSubSignal() const{$/;"	f	class:MultiDimMapping
curPosition	src/veins/modules/application/ieee80211p/BaseWaveApplLayer.h	/^		Coord curPosition;$/;"	m	class:BaseWaveApplLayer
current	examples/platoonBikes/sumocfg/runner.py	/^        current = traci.vehicle.getSpeed(vehicleID)$/;"	v
current	src/veins/base/connectionManager/BaseConnectionManager.h	/^		unsigned current;$/;"	m	class:BaseConnectionManager::CoordSet
currentAcceleration	src/veins/modules/application/platooning/apps/BaseApp.h	/^		double currentSpeed, currentAcceleration, currentControllerAcceleration;$/;"	m	class:BaseApp
currentAccelerationVec	src/veins/modules/mobility/traci/TraCIMobility.h	/^		cOutVector currentAccelerationVec; \/**< vector plotting acceleration *\/$/;"	m	class:Veins::TraCIMobility
currentBackoff	src/veins/modules/mac/ieee80211p/Mac1609_4.h	/^						int currentBackoff; \/\/current Backoff value for this queue$/;"	m	class:Mac1609_4::EDCA::EDCAQueue
currentCO2EmissionVec	src/veins/modules/mobility/traci/TraCIMobility.h	/^		cOutVector currentCO2EmissionVec; \/**< vector plotting current CO2 emission *\/$/;"	m	class:Veins::TraCIMobility
currentChannel	src/veins/base/phyLayer/PhyUtils.h	/^	int currentChannel;$/;"	m	class:Veins::Radio
currentChannelSenseRequest	src/veins/base/phyLayer/BaseDecider.h	/^	CSRInfo currentChannelSenseRequest;$/;"	m	class:BaseDecider
currentControllerAcceleration	src/veins/modules/application/platooning/apps/BaseApp.h	/^		double currentSpeed, currentAcceleration, currentControllerAcceleration;$/;"	m	class:BaseApp
currentMsg	src/veins/modules/application/platooning/UnicastProtocol.h	/^		UnicastMessage *currentMsg;$/;"	m	class:UnicastProtocol
currentPosXVec	src/veins/modules/mobility/traci/TraCIMobility.h	/^		cOutVector currentPosXVec; \/**< vector plotting posx *\/$/;"	m	class:Veins::TraCIMobility
currentPosYVec	src/veins/modules/mobility/traci/TraCIMobility.h	/^		cOutVector currentPosYVec; \/**< vector plotting posy *\/$/;"	m	class:Veins::TraCIMobility
currentSignal	src/veins/base/phyLayer/BaseDecider.h	/^	ReceivedSignal currentSignal;$/;"	m	class:BaseDecider
currentSpeed	src/veins/modules/application/platooning/apps/BaseApp.h	/^		double currentSpeed, currentAcceleration, currentControllerAcceleration;$/;"	m	class:BaseApp
currentSpeedVec	src/veins/modules/mobility/traci/TraCIMobility.h	/^		cOutVector currentSpeedVec; \/**< vector plotting speed *\/$/;"	m	class:Veins::TraCIMobility
currentlyTracking	src/veins/base/phyLayer/PhyUtils.h	/^	bool currentlyTracking;$/;"	m	class:RadioStateAnalogueModel
cwCur	src/veins/modules/mac/ieee80211p/Mac1609_4.h	/^						int cwCur; \/\/current contention window$/;"	m	class:Mac1609_4::EDCA::EDCAQueue
cwMax	src/veins/modules/mac/ieee80211p/Mac1609_4.h	/^						int cwMax; \/\/maximum contention size$/;"	m	class:Mac1609_4::EDCA::EDCAQueue
cwMin	src/veins/modules/mac/ieee80211p/Mac1609_4.h	/^						int cwMin; \/\/minimum contention window$/;"	m	class:Mac1609_4::EDCA::EDCAQueue
d	src/veins/modules/analogueModel/TwoRayInterferenceModel.h	/^				double d;$/;"	m	class:TwoRayInterferenceModel::Mapping
dBm2mW	src/veins/base/utils/FWMath.h	/^  static double dBm2mW(double dBm) { return pow(10.0, dBm\/10.0); }$/;"	f	class:FWMath
d_dir	src/veins/modules/analogueModel/TwoRayInterferenceModel.h	/^				double d_dir;$/;"	m	class:TwoRayInterferenceModel::Mapping
d_ref	src/veins/modules/analogueModel/TwoRayInterferenceModel.h	/^				double d_ref;$/;"	m	class:TwoRayInterferenceModel::Mapping
daemonize	sumo-launchd.py	/^def daemonize(pidfile):$/;"	f
data	src/veins/base/connectionManager/BaseConnectionManager.h	/^		std::vector<GridCoord*> data;$/;"	m	class:BaseConnectionManager::CoordSet
dataLengthBits	src/veins/modules/application/ieee80211p/BaseWaveApplLayer.h	/^		int dataLengthBits;$/;"	m	class:BaseWaveApplLayer
dataOnSch	src/veins/modules/application/ieee80211p/BaseWaveApplLayer.h	/^		bool dataOnSch;$/;"	m	class:BaseWaveApplLayer
dataPolling	src/veins/modules/application/platooning/protocols/BaseProtocol.h	/^		cMessage *sendBeacon, *dataPolling;$/;"	m	class:BaseProtocol
dataPriority	src/veins/modules/application/ieee80211p/BaseWaveApplLayer.h	/^		int dataPriority;$/;"	m	class:BaseWaveApplLayer
dataRate_var	src/veins/modules/messages/WaveShortMessage_m.h	/^    int dataRate_var;$/;"	m	class:WaveShortMessage
debug	src/veins/base/modules/BaseModule.h	/^    bool debug;$/;"	m	class:BaseModule
debug	src/veins/base/phyLayer/BaseDecider.h	/^	bool debug;$/;"	m	class:BaseDecider
debug	src/veins/modules/analogueModel/BreakpointPathlossModel.h	/^    bool debug;$/;"	m	class:BreakpointPathlossModel
debug	src/veins/modules/analogueModel/SimpleObstacleShadowing.h	/^	bool debug;$/;"	m	class:SimpleObstacleShadowing
debug	src/veins/modules/analogueModel/SimplePathlossModel.h	/^	bool debug;$/;"	m	class:SimplePathlossModel
debug	src/veins/modules/analogueModel/TwoRayInterferenceModel.h	/^				bool debug;$/;"	m	class:TwoRayInterferenceModel::Mapping
debug	src/veins/modules/analogueModel/TwoRayInterferenceModel.h	/^		bool debug;$/;"	m	class:TwoRayInterferenceModel
debug	src/veins/modules/application/traci/TraCITestApp.h	/^		bool debug;$/;"	m	class:Veins::TraCITestApp
debug	src/veins/modules/mobility/traci/TraCIMobility.h	/^		bool debug; \/**< whether to emit debug messages *\/$/;"	m	class:Veins::TraCIMobility
debug	src/veins/modules/mobility/traci/TraCIScenarioManager.h	/^		bool debug; \/**< whether to emit debug messages *\/$/;"	m	class:Veins::TraCIScenarioManager
debug	src/veins/modules/obstacle/ObstacleControl.h	/^		bool debug; \/**< whether to emit debug messages *\/$/;"	m	class:Veins::ObstacleControl
debug	src/veins/modules/world/annotations/AnnotationManager.h	/^		bool debug; \/**< whether to emit debug messages *\/$/;"	m	class:Veins::AnnotationManager
debugEV	src/veins/base/modules/BaseModule.h	33;"	d
debugEV	src/veins/modules/analogueModel/BreakpointPathlossModel.cc	7;"	d	file:
debugEV	src/veins/modules/analogueModel/SimpleObstacleShadowing.cc	5;"	d	file:
debugEV	src/veins/modules/analogueModel/TwoRayInterferenceModel.cc	26;"	d	file:
debugEV_clear	src/veins/base/modules/BaseModule.h	32;"	d
decapsMsg	src/veins/base/modules/BaseMacLayer.cc	/^cPacket* BaseMacLayer::decapsMsg(MacPkt* msg)$/;"	f	class:BaseMacLayer
decider	src/veins/base/phyLayer/BasePhyLayer.h	/^	Decider* decider;$/;"	m	class:BasePhyLayer
deciderEV	src/veins/base/phyLayer/BaseDecider.h	18;"	d
delay	src/veins/base/phyLayer/MappingUtils.h	/^	simtime_t delay;$/;"	m	class:BaseDelayedIterator
delay	src/veins/base/phyLayer/MappingUtils.h	/^	simtime_t delay;$/;"	m	class:BaseDelayedMapping
delay	src/veins/modules/analogueModel/JakesFading.h	/^	simtime_t* delay;$/;"	m	class:JakesFading
delayMapping	src/veins/base/phyLayer/MappingUtils.h	/^	virtual void delayMapping(simtime_t_cref d) {$/;"	f	class:BaseDelayedMapping
delayPosition	src/veins/base/phyLayer/MappingUtils.h	/^	Argument delayPosition(const Argument& pos) const {$/;"	f	class:BaseDelayedIterator
delayPosition	src/veins/base/phyLayer/MappingUtils.h	/^	Argument delayPosition(const Argument& pos) const {$/;"	f	class:BaseDelayedMapping
deleteAirFrame	src/veins/base/phyLayer/ChannelInfo.cc	/^void ChannelInfo::deleteAirFrame(AirFrameMatrix& airFrames,$/;"	f	class:ChannelInfo
deleteManagedModule	src/veins/modules/mobility/traci/TraCIScenarioManager.cc	/^void TraCIScenarioManager::deleteManagedModule(std::string nodeId) {$/;"	f	class:TraCIScenarioManager
departed	examples/platoonBikes/sumocfg/runner.py	/^    departed = traci.simulation.getSubscriptionResults()[$/;"	v
desacel_dist	examples/platoonBikes/sumocfg/runner.py	/^desacel_dist = 30.0$/;"	v
destAddr_var	src/veins/base/messages/MacPkt_m.h	/^    LAddress::L2Type destAddr_var;$/;"	m	class:MacPkt
destination_var	src/veins/modules/application/platooning/messages/UnicastMessage_m.h	/^    int destination_var;$/;"	m	class:UnicastMessage
deviceID	src/veins/base/modules/BatteryAccess.h	/^	int deviceID;$/;"	m	class:Veins::BatteryAccess
dimensionIDs	src/veins/base/phyLayer/MappingBase.cc	/^Dimension::DimensionIDMap& Dimension::dimensionIDs() {$/;"	f	class:Dimension
dimensionNames	src/veins/base/phyLayer/MappingBase.cc	/^Dimension::DimensionNameMap& Dimension::dimensionNames() {$/;"	f	class:Dimension
dimensions	src/veins/base/phyLayer/MappingBase.h	/^	DimensionSet dimensions;$/;"	m	class:ConstMapping
dimensions	src/veins/base/phyLayer/MappingBase.h	/^	const DimensionSet&         dimensions;$/;"	m	class:SimpleConstMappingIterator
dimensions	src/veins/modules/analogueModel/JakesFading.h	/^	static DimensionSet dimensions;$/;"	m	class:JakesFadingMapping
dimensions	src/veins/modules/analogueModel/TwoRayInterferenceModel.h	/^				static DimensionSet dimensions;$/;"	m	class:TwoRayInterferenceModel::Mapping
direction	src/veins/base/utils/Move.h	/^    Coord direction;$/;"	m	class:Move
direction	src/veins/base/utils/PassedMessage.h	/^    direction_t direction;$/;"	m	class:PassedMessage
direction_t	src/veins/base/utils/PassedMessage.h	/^    enum direction_t {$/;"	g	class:PassedMessage
direction_var	src/veins/base/messages/BorderMsg_m.h	/^    Coord direction_var;$/;"	m	class:BorderMsg
disconnectFrom	src/veins/base/connectionManager/NicEntryDebug.cc	/^void NicEntryDebug::disconnectFrom(NicEntry* other) {$/;"	f	class:NicEntryDebug
disconnectFrom	src/veins/base/connectionManager/NicEntryDirect.cc	/^void NicEntryDirect::disconnectFrom(NicEntry* other)$/;"	f	class:NicEntryDirect
displayPassed	src/veins/base/utils/asserts.cc	/^bool displayPassed = true;$/;"	v
dist	examples/platoonBikes/sumocfg/runner.py	/^        dist = math.sqrt((veh_x - junc_x)**2 + (veh_y - junc_y)**2)$/;"	v
dist	src/veins/base/connectionManager/BaseConnectionManager.cc	/^    static double dist(double coord1, double coord2, double size) {$/;"	f	namespace:__anon2
dist	src/veins/base/utils/Coord.cc	/^static double dist(double coord1, double coord2, double size) {$/;"	f	file:
distFactor	src/veins/modules/analogueModel/SimplePathlossModel.h	/^	const double distFactor;$/;"	m	class:SimplePathlossConstMapping
distance	src/veins/base/utils/Coord.h	/^    double distance(const Coord& a) const {$/;"	f	class:Coord
distanceOut	src/veins/modules/application/platooning/protocols/BaseProtocol.h	/^		cOutVector distanceOut, relSpeedOut, nodeIdOut, speedOut, posxOut, posyOut, accelerationOut;$/;"	m	class:BaseProtocol
div	src/veins/base/utils/FWMath.h	/^  static double div(double dividend, double divisor) {$/;"	f	class:FWMath
divide	src/veins/base/phyLayer/MappingUtils.cc	/^Mapping* MappingUtils::divide(const ConstMapping &f1, const ConstMapping &f2)$/;"	f	class:MappingUtils
divide	src/veins/base/phyLayer/MappingUtils.cc	/^Mapping* MappingUtils::divide(const ConstMapping &f1, const ConstMapping &f2, Mapping::argument_value_cref_t outOfRangeVal)$/;"	f	class:MappingUtils
doPacking	src/veins/base/messages/AirFrame_m.cc	/^void doPacking(cCommBuffer *, T& t) {$/;"	f
doPacking	src/veins/base/messages/AirFrame_m.h	/^inline void doPacking(cCommBuffer *b, AirFrame& obj) {obj.parsimPack(b);}$/;"	f	namespace:Veins
doPacking	src/veins/base/messages/BorderMsg_m.cc	/^void doPacking(cCommBuffer *, T& t) {$/;"	f
doPacking	src/veins/base/messages/BorderMsg_m.h	/^inline void doPacking(cCommBuffer *b, BorderMsg& obj) {obj.parsimPack(b);}$/;"	f
doPacking	src/veins/base/messages/ChannelSenseRequest_m.cc	/^void doPacking(cCommBuffer *, T& t) {$/;"	f
doPacking	src/veins/base/messages/ChannelSenseRequest_m.h	/^inline void doPacking(cCommBuffer *b, ChannelSenseRequest& obj) {obj.parsimPack(b);}$/;"	f
doPacking	src/veins/base/messages/MacPkt_m.cc	/^void doPacking(cCommBuffer *, T& t) {$/;"	f
doPacking	src/veins/base/messages/MacPkt_m.h	/^inline void doPacking(cCommBuffer *b, MacPkt& obj) {obj.parsimPack(b);}$/;"	f
doPacking	src/veins/modules/application/platooning/messages/BikesMessage_m.cc	/^void doPacking(cCommBuffer *, T& t) {$/;"	f
doPacking	src/veins/modules/application/platooning/messages/BikesMessage_m.h	/^inline void doPacking(cCommBuffer *b, BikesMessage& obj) {obj.parsimPack(b);}$/;"	f
doPacking	src/veins/modules/application/platooning/messages/ManeuverMessage_m.cc	/^void doPacking(cCommBuffer *, T& t) {$/;"	f
doPacking	src/veins/modules/application/platooning/messages/ManeuverMessage_m.h	/^inline void doPacking(cCommBuffer *b, ManeuverMessage& obj) {obj.parsimPack(b);}$/;"	f
doPacking	src/veins/modules/application/platooning/messages/PlatooningBeacon_m.cc	/^void doPacking(cCommBuffer *, T& t) {$/;"	f
doPacking	src/veins/modules/application/platooning/messages/PlatooningBeacon_m.h	/^inline void doPacking(cCommBuffer *b, PlatooningBeacon& obj) {obj.parsimPack(b);}$/;"	f
doPacking	src/veins/modules/application/platooning/messages/UnicastMessage_m.cc	/^void doPacking(cCommBuffer *, T& t) {$/;"	f
doPacking	src/veins/modules/application/platooning/messages/UnicastMessage_m.h	/^inline void doPacking(cCommBuffer *b, UnicastMessage& obj) {obj.parsimPack(b);}$/;"	f
doPacking	src/veins/modules/application/platooning/messages/UnicastProtocolControlMessage_m.cc	/^void doPacking(cCommBuffer *, T& t) {$/;"	f
doPacking	src/veins/modules/application/platooning/messages/UnicastProtocolControlMessage_m.h	/^inline void doPacking(cCommBuffer *b, UnicastProtocolControlMessage& obj) {obj.parsimPack(b);}$/;"	f
doPacking	src/veins/modules/messages/AirFrame11p_m.cc	/^void doPacking(cCommBuffer *, T& t) {$/;"	f
doPacking	src/veins/modules/messages/AirFrame11p_m.h	/^inline void doPacking(cCommBuffer *b, AirFrame11p& obj) {obj.parsimPack(b);}$/;"	f
doPacking	src/veins/modules/messages/Mac80211Pkt_m.cc	/^void doPacking(cCommBuffer *, T& t) {$/;"	f
doPacking	src/veins/modules/messages/Mac80211Pkt_m.h	/^inline void doPacking(cCommBuffer *b, Mac80211Pkt& obj) {obj.parsimPack(b);}$/;"	f
doPacking	src/veins/modules/messages/PhyControlMessage_m.cc	/^void doPacking(cCommBuffer *, T& t) {$/;"	f
doPacking	src/veins/modules/messages/PhyControlMessage_m.h	/^inline void doPacking(cCommBuffer *b, PhyControlMessage& obj) {obj.parsimPack(b);}$/;"	f
doPacking	src/veins/modules/messages/WaveShortMessage_m.cc	/^void doPacking(cCommBuffer *, T& t) {$/;"	f
doPacking	src/veins/modules/messages/WaveShortMessage_m.h	/^inline void doPacking(cCommBuffer *b, WaveShortMessage& obj) {obj.parsimPack(b);}$/;"	f
doUnpacking	src/veins/base/messages/AirFrame_m.cc	/^void doUnpacking(cCommBuffer *, T& t) {$/;"	f
doUnpacking	src/veins/base/messages/AirFrame_m.h	/^inline void doUnpacking(cCommBuffer *b, AirFrame& obj) {obj.parsimUnpack(b);}$/;"	f	namespace:Veins
doUnpacking	src/veins/base/messages/BorderMsg_m.cc	/^void doUnpacking(cCommBuffer *, T& t) {$/;"	f
doUnpacking	src/veins/base/messages/BorderMsg_m.h	/^inline void doUnpacking(cCommBuffer *b, BorderMsg& obj) {obj.parsimUnpack(b);}$/;"	f
doUnpacking	src/veins/base/messages/ChannelSenseRequest_m.cc	/^void doUnpacking(cCommBuffer *, T& t) {$/;"	f
doUnpacking	src/veins/base/messages/ChannelSenseRequest_m.h	/^inline void doUnpacking(cCommBuffer *b, ChannelSenseRequest& obj) {obj.parsimUnpack(b);}$/;"	f
doUnpacking	src/veins/base/messages/MacPkt_m.cc	/^void doUnpacking(cCommBuffer *, T& t) {$/;"	f
doUnpacking	src/veins/base/messages/MacPkt_m.h	/^inline void doUnpacking(cCommBuffer *b, MacPkt& obj) {obj.parsimUnpack(b);}$/;"	f
doUnpacking	src/veins/modules/application/platooning/messages/BikesMessage_m.cc	/^void doUnpacking(cCommBuffer *, T& t) {$/;"	f
doUnpacking	src/veins/modules/application/platooning/messages/BikesMessage_m.h	/^inline void doUnpacking(cCommBuffer *b, BikesMessage& obj) {obj.parsimUnpack(b);}$/;"	f
doUnpacking	src/veins/modules/application/platooning/messages/ManeuverMessage_m.cc	/^void doUnpacking(cCommBuffer *, T& t) {$/;"	f
doUnpacking	src/veins/modules/application/platooning/messages/ManeuverMessage_m.h	/^inline void doUnpacking(cCommBuffer *b, ManeuverMessage& obj) {obj.parsimUnpack(b);}$/;"	f
doUnpacking	src/veins/modules/application/platooning/messages/PlatooningBeacon_m.cc	/^void doUnpacking(cCommBuffer *, T& t) {$/;"	f
doUnpacking	src/veins/modules/application/platooning/messages/PlatooningBeacon_m.h	/^inline void doUnpacking(cCommBuffer *b, PlatooningBeacon& obj) {obj.parsimUnpack(b);}$/;"	f
doUnpacking	src/veins/modules/application/platooning/messages/UnicastMessage_m.cc	/^void doUnpacking(cCommBuffer *, T& t) {$/;"	f
doUnpacking	src/veins/modules/application/platooning/messages/UnicastMessage_m.h	/^inline void doUnpacking(cCommBuffer *b, UnicastMessage& obj) {obj.parsimUnpack(b);}$/;"	f
doUnpacking	src/veins/modules/application/platooning/messages/UnicastProtocolControlMessage_m.cc	/^void doUnpacking(cCommBuffer *, T& t) {$/;"	f
doUnpacking	src/veins/modules/application/platooning/messages/UnicastProtocolControlMessage_m.h	/^inline void doUnpacking(cCommBuffer *b, UnicastProtocolControlMessage& obj) {obj.parsimUnpack(b);}$/;"	f
doUnpacking	src/veins/modules/messages/AirFrame11p_m.cc	/^void doUnpacking(cCommBuffer *, T& t) {$/;"	f
doUnpacking	src/veins/modules/messages/AirFrame11p_m.h	/^inline void doUnpacking(cCommBuffer *b, AirFrame11p& obj) {obj.parsimUnpack(b);}$/;"	f
doUnpacking	src/veins/modules/messages/Mac80211Pkt_m.cc	/^void doUnpacking(cCommBuffer *, T& t) {$/;"	f
doUnpacking	src/veins/modules/messages/Mac80211Pkt_m.h	/^inline void doUnpacking(cCommBuffer *b, Mac80211Pkt& obj) {obj.parsimUnpack(b);}$/;"	f
doUnpacking	src/veins/modules/messages/PhyControlMessage_m.cc	/^void doUnpacking(cCommBuffer *, T& t) {$/;"	f
doUnpacking	src/veins/modules/messages/PhyControlMessage_m.h	/^inline void doUnpacking(cCommBuffer *b, PhyControlMessage& obj) {obj.parsimUnpack(b);}$/;"	f
doUnpacking	src/veins/modules/messages/WaveShortMessage_m.cc	/^void doUnpacking(cCommBuffer *, T& t) {$/;"	f
doUnpacking	src/veins/modules/messages/WaveShortMessage_m.h	/^inline void doUnpacking(cCommBuffer *b, WaveShortMessage& obj) {obj.parsimUnpack(b);}$/;"	f
doesSupport	src/veins/base/messages/AirFrame_m.cc	/^bool AirFrameDescriptor::doesSupport(cObject *obj) const$/;"	f	class:Veins::AirFrameDescriptor
doesSupport	src/veins/base/messages/BorderMsg_m.cc	/^bool BorderMsgDescriptor::doesSupport(cObject *obj) const$/;"	f	class:BorderMsgDescriptor
doesSupport	src/veins/base/messages/ChannelSenseRequest_m.cc	/^bool ChannelSenseRequestDescriptor::doesSupport(cObject *obj) const$/;"	f	class:ChannelSenseRequestDescriptor
doesSupport	src/veins/base/messages/MacPkt_m.cc	/^bool MacPktDescriptor::doesSupport(cObject *obj) const$/;"	f	class:MacPktDescriptor
doesSupport	src/veins/modules/application/platooning/messages/BikesMessage_m.cc	/^bool BikesMessageDescriptor::doesSupport(cObject *obj) const$/;"	f	class:BikesMessageDescriptor
doesSupport	src/veins/modules/application/platooning/messages/ManeuverMessage_m.cc	/^bool ManeuverMessageDescriptor::doesSupport(cObject *obj) const$/;"	f	class:ManeuverMessageDescriptor
doesSupport	src/veins/modules/application/platooning/messages/PlatooningBeacon_m.cc	/^bool PlatooningBeaconDescriptor::doesSupport(cObject *obj) const$/;"	f	class:PlatooningBeaconDescriptor
doesSupport	src/veins/modules/application/platooning/messages/UnicastMessage_m.cc	/^bool UnicastMessageDescriptor::doesSupport(cObject *obj) const$/;"	f	class:UnicastMessageDescriptor
doesSupport	src/veins/modules/application/platooning/messages/UnicastProtocolControlMessage_m.cc	/^bool UnicastProtocolControlMessageDescriptor::doesSupport(cObject *obj) const$/;"	f	class:UnicastProtocolControlMessageDescriptor
doesSupport	src/veins/modules/messages/AirFrame11p_m.cc	/^bool AirFrame11pDescriptor::doesSupport(cObject *obj) const$/;"	f	class:AirFrame11pDescriptor
doesSupport	src/veins/modules/messages/Mac80211Pkt_m.cc	/^bool Mac80211PktDescriptor::doesSupport(cObject *obj) const$/;"	f	class:Mac80211PktDescriptor
doesSupport	src/veins/modules/messages/PhyControlMessage_m.cc	/^bool PhyControlMessageDescriptor::doesSupport(cObject *obj) const$/;"	f	class:PhyControlMessageDescriptor
doesSupport	src/veins/modules/messages/WaveShortMessage_m.cc	/^bool WaveShortMessageDescriptor::doesSupport(cObject *obj) const$/;"	f	class:WaveShortMessageDescriptor
draw	src/veins/base/modules/BatteryAccess.cc	/^void BatteryAccess::draw(DrawAmount& amount, int account) {$/;"	f	class:BatteryAccess
drawBubble	src/veins/modules/world/annotations/AnnotationManager.cc	/^void AnnotationManager::drawBubble(Coord p1, std::string text) {$/;"	f	class:AnnotationManager
drawCurrent	src/veins/base/modules/BatteryAccess.cc	/^void BatteryAccess::drawCurrent(double amount, int account) {$/;"	f	class:BatteryAccess
drawCurrent	src/veins/base/phyLayer/BasePhyLayer.cc	/^void BasePhyLayer::drawCurrent(double amount, int activity) {$/;"	f	class:BasePhyLayer
drawEnergy	src/veins/base/modules/BatteryAccess.cc	/^void BatteryAccess::drawEnergy(double amount, int account) {$/;"	f	class:BatteryAccess
drawLine	src/veins/modules/world/annotations/AnnotationManager.cc	/^AnnotationManager::Line* AnnotationManager::drawLine(Coord p1, Coord p2, std::string color, Group* group) {$/;"	f	class:AnnotationManager
drawMIR	src/veins/base/connectionManager/BaseConnectionManager.h	/^	bool drawMIR;$/;"	m	class:BaseConnectionManager
drawPoint	src/veins/modules/world/annotations/AnnotationManager.cc	/^AnnotationManager::Point* AnnotationManager::drawPoint(Coord p, std::string color, std::string text, Group* group) {$/;"	f	class:AnnotationManager
drawPolygon	src/veins/modules/world/annotations/AnnotationManager.cc	/^AnnotationManager::Polygon* AnnotationManager::drawPolygon(std::list<Coord> coords, std::string color, Group* group) {$/;"	f	class:AnnotationManager
drawPolygon	src/veins/modules/world/annotations/AnnotationManager.cc	/^AnnotationManager::Polygon* AnnotationManager::drawPolygon(std::vector<Coord> coords, std::string color, Group* group) {$/;"	f	class:AnnotationManager
drivingVehicleCount	src/veins/modules/mobility/traci/TraCIScenarioManager.h	/^		uint32_t drivingVehicleCount; \/**< number of driving, as reported by sumo *\/$/;"	m	class:Veins::TraCIScenarioManager
dummyObjects	src/veins/modules/world/annotations/AnnotationManager.h	/^				mutable std::list<cModule*> dummyObjects;$/;"	m	class:Veins::AnnotationManager::Annotation
dup	src/veins/base/messages/AirFrame_m.h	/^    virtual AirFrame *dup() const {return new AirFrame(*this);}$/;"	f	class:Veins::AirFrame
dup	src/veins/base/messages/BorderMsg_m.h	/^    virtual BorderMsg *dup() const {return new BorderMsg(*this);}$/;"	f	class:BorderMsg
dup	src/veins/base/messages/ChannelSenseRequest_m.h	/^    virtual ChannelSenseRequest *dup() const {return new ChannelSenseRequest(*this);}$/;"	f	class:ChannelSenseRequest
dup	src/veins/base/messages/MacPkt_m.h	/^    virtual MacPkt *dup() const {return new MacPkt(*this);}$/;"	f	class:MacPkt
dup	src/veins/modules/application/platooning/messages/BikesMessage_m.h	/^    virtual BikesMessage *dup() const {return new BikesMessage(*this);}$/;"	f	class:BikesMessage
dup	src/veins/modules/application/platooning/messages/ManeuverMessage_m.h	/^    virtual ManeuverMessage *dup() const {return new ManeuverMessage(*this);}$/;"	f	class:ManeuverMessage
dup	src/veins/modules/application/platooning/messages/PlatooningBeacon_m.h	/^    virtual PlatooningBeacon *dup() const {return new PlatooningBeacon(*this);}$/;"	f	class:PlatooningBeacon
dup	src/veins/modules/application/platooning/messages/UnicastMessage_m.h	/^    virtual UnicastMessage *dup() const {return new UnicastMessage(*this);}$/;"	f	class:UnicastMessage
dup	src/veins/modules/application/platooning/messages/UnicastProtocolControlMessage_m.h	/^    virtual UnicastProtocolControlMessage *dup() const {return new UnicastProtocolControlMessage(*this);}$/;"	f	class:UnicastProtocolControlMessage
dup	src/veins/modules/messages/AirFrame11p_m.h	/^    virtual AirFrame11p *dup() const {return new AirFrame11p(*this);}$/;"	f	class:AirFrame11p
dup	src/veins/modules/messages/Mac80211Pkt_m.h	/^    virtual Mac80211Pkt *dup() const {return new Mac80211Pkt(*this);}$/;"	f	class:Mac80211Pkt
dup	src/veins/modules/messages/PhyControlMessage_m.h	/^    virtual PhyControlMessage *dup() const {return new PhyControlMessage(*this);}$/;"	f	class:PhyControlMessage
dup	src/veins/modules/messages/WaveShortMessage_m.h	/^    virtual WaveShortMessage *dup() const {return new WaveShortMessage(*this);}$/;"	f	class:WaveShortMessage
duration	src/veins/base/phyLayer/Signal_.h	/^	simtime_t duration;$/;"	m	class:Signal
duration_var	src/veins/base/messages/AirFrame_m.h	/^    simtime_t duration_var;$/;"	m	class:Veins::AirFrame
duration_var	src/veins/modules/messages/Mac80211Pkt_m.h	/^    simtime_t duration_var;$/;"	m	class:Mac80211Pkt
earliestInfoPoint	src/veins/base/phyLayer/ChannelInfo.h	/^	simtime_t earliestInfoPoint;$/;"	m	class:ChannelInfo
enableAck	src/veins/modules/application/platooning/UnicastProtocol.h	/^		bool enableAck;$/;"	m	class:UnicastProtocol
encapsMsg	src/veins/base/modules/BaseMacLayer.cc	/^MacPkt* BaseMacLayer::encapsMsg(cPacket *netwPkt)$/;"	f	class:BaseMacLayer
encapsMsg	src/veins/base/phyLayer/BasePhyLayer.cc	/^AirFrame *BasePhyLayer::encapsMsg(cPacket *macPkt)$/;"	f	class:BasePhyLayer
encapsMsg	src/veins/modules/phy/PhyLayer80211p.cc	/^AirFrame *PhyLayer80211p::encapsMsg(cPacket *macPkt)$/;"	f	class:PhyLayer80211p
end	src/veins/base/phyLayer/MappingBase.h	/^	const_iterator end() const { return values.end(); }$/;"	f	class:Argument
end	src/veins/base/phyLayer/MappingBase.h	/^	iterator end() { return values.end(); }$/;"	f	class:Argument
endIt	src/veins/base/phyLayer/ChannelInfo.h	/^		ItMatrix endIt;$/;"	m	class:ChannelInfo::BaseIntersectionIterator
endSwitch	src/veins/base/phyLayer/PhyUtils.cc	/^void Radio::endSwitch(simtime_t_cref now)$/;"	f	class:Radio
engineTau	src/veins/modules/application/platooning/apps/BaseApp.h	/^		double caccXi, caccOmegaN, caccC1, engineTau;$/;"	m	class:BaseApp
entries	src/veins/base/phyLayer/MappingUtils.h	/^	interpolator_map_type       entries;$/;"	m	class:MultiDimMapping
entries	src/veins/base/phyLayer/MappingUtils.h	/^	interpolator_map_type entries;$/;"	m	class:TimeMapping
eof	src/veins/modules/mobility/traci/TraCIBuffer.cc	/^bool TraCIBuffer::eof() const {$/;"	f	class:Veins::TraCIBuffer
epsilon_r	src/veins/modules/analogueModel/TwoRayInterferenceModel.h	/^		double epsilon_r;$/;"	m	class:TwoRayInterferenceModel
erase	src/veins/modules/obstacle/ObstacleControl.cc	/^void ObstacleControl::erase(const Obstacle* obstacle) {$/;"	f	class:ObstacleControl
erase	src/veins/modules/world/annotations/AnnotationManager.cc	/^void AnnotationManager::erase(const Annotation* annotation) {$/;"	f	class:AnnotationManager
eraseAirFrame	src/veins/base/phyLayer/ChannelInfo.h	/^		void eraseAirFrame()$/;"	f	class:ChannelInfo::IntersectionIterator
eraseAll	src/veins/modules/world/annotations/AnnotationManager.cc	/^void AnnotationManager::eraseAll(Group* group) {$/;"	f	class:AnnotationManager
executeOneTimestep	src/veins/modules/mobility/traci/TraCIScenarioManager.cc	/^void TraCIScenarioManager::executeOneTimestep() {$/;"	f	class:TraCIScenarioManager
executeOneTimestepTrigger	src/veins/modules/mobility/traci/TraCIScenarioManager.h	/^		cMessage* executeOneTimestepTrigger; \/**< self-message scheduled for when to next call executeOneTimestep *\/$/;"	m	class:Veins::TraCIScenarioManager
external_id	src/veins/modules/mobility/traci/TraCIMobility.h	/^		std::string external_id; \/**< updated by setExternalId() *\/$/;"	m	class:Veins::TraCIMobility
f	configure	/^f = open(os.path.join('out', 'config.py'), 'w')$/;"	v
factor	src/veins/base/phyLayer/MappingUtils.h	/^	argument_value_t      factor;$/;"	m	class:LinearIntplMappingIterator
factor	src/veins/base/phyLayer/MappingUtils.h	/^	argument_value_t    factor;$/;"	m	class:LinearIntplMapping
fadingPaths	src/veins/modules/analogueModel/JakesFading.h	/^	int fadingPaths;$/;"	m	class:JakesFading
fail	src/veins/base/utils/asserts.cc	/^void fail(std::string msg) {$/;"	f
fail	src/veins/base/utils/asserts.h	/^template<class T, class T2> void fail(std::string msg, T expected, T2 actual) {$/;"	f
figure	src/veins/modules/world/annotations/AnnotationManager.h	/^				mutable cFigure* figure;$/;"	m	class:Veins::AnnotationManager::Annotation
fillRef	src/veins/base/phyLayer/MappingUtils.h	/^	Mapping*      fillRef;$/;"	m	class:FilledUpMapping
fillRefIfNecessary	src/veins/base/phyLayer/MappingUtils.h	/^	void fillRefIfNecessary() {$/;"	f	class:FilledUpMapping
fillUnionWithNeighbors	src/veins/base/connectionManager/BaseConnectionManager.cc	/^void BaseConnectionManager::fillUnionWithNeighbors(CoordSet& gridUnion,$/;"	f	class:BaseConnectionManager
filterSignal	src/veins/base/phyLayer/BasePhyLayer.cc	/^void BasePhyLayer::filterSignal(AirFrame *frame) {$/;"	f	class:BasePhyLayer
filterSignal	src/veins/base/phyLayer/PhyUtils.cc	/^void RadioStateAnalogueModel::filterSignal(AirFrame *frame, const Coord& sendersPos, const Coord& receiverPos)$/;"	f	class:RadioStateAnalogueModel
filterSignal	src/veins/modules/analogueModel/BreakpointPathlossModel.cc	/^void BreakpointPathlossModel::filterSignal(AirFrame *frame, const Coord& sendersPos, const Coord& receiverPos) {$/;"	f	class:BreakpointPathlossModel
filterSignal	src/veins/modules/analogueModel/JakesFading.cc	/^void JakesFading::filterSignal(AirFrame *frame, const Coord& sendersPos, const Coord& receiverPos)$/;"	f	class:JakesFading
filterSignal	src/veins/modules/analogueModel/LogNormalShadowing.cc	/^void LogNormalShadowing::filterSignal(AirFrame *frame, const Coord& sendersPos, const Coord& receiverPos) {$/;"	f	class:LogNormalShadowing
filterSignal	src/veins/modules/analogueModel/PERModel.cc	/^void PERModel::filterSignal(AirFrame *frame, const Coord& sendersPos, const Coord& receiverPos) {$/;"	f	class:PERModel
filterSignal	src/veins/modules/analogueModel/SimpleObstacleShadowing.cc	/^void SimpleObstacleShadowing::filterSignal(AirFrame *frame, const Coord& sendersPos, const Coord& receiverPos) {$/;"	f	class:SimpleObstacleShadowing
filterSignal	src/veins/modules/analogueModel/SimplePathlossModel.cc	/^void SimplePathlossModel::filterSignal(AirFrame *frame, const Coord& sendersPos, const Coord& receiverPos)$/;"	f	class:SimplePathlossModel
filterSignal	src/veins/modules/analogueModel/TwoRayInterferenceModel.cc	/^void TwoRayInterferenceModel::filterSignal(AirFrame *frame, const Coord& senderPos, const Coord& receiverPos) {$/;"	f	class:TwoRayInterferenceModel
find	src/veins/base/phyLayer/MappingBase.cc	/^Argument::const_iterator Argument::find(const Argument::key_type& dim) const{$/;"	f	class:Argument
find	src/veins/base/phyLayer/MappingBase.cc	/^Argument::iterator Argument::find(const Argument::key_type& dim){$/;"	f	class:Argument
findDistance	src/veins/base/connectionManager/BaseConnectionManager.h	/^    Coord findDistance;$/;"	m	class:BaseConnectionManager
findEarliestInfoPoint	src/veins/base/phyLayer/ChannelInfo.cc	/^simtime_t ChannelInfo::findEarliestInfoPoint()$/;"	f	class:ChannelInfo
findField	src/veins/base/messages/AirFrame_m.cc	/^int AirFrameDescriptor::findField(void *object, const char *fieldName) const$/;"	f	class:Veins::AirFrameDescriptor
findField	src/veins/base/messages/BorderMsg_m.cc	/^int BorderMsgDescriptor::findField(void *object, const char *fieldName) const$/;"	f	class:BorderMsgDescriptor
findField	src/veins/base/messages/ChannelSenseRequest_m.cc	/^int ChannelSenseRequestDescriptor::findField(void *object, const char *fieldName) const$/;"	f	class:ChannelSenseRequestDescriptor
findField	src/veins/base/messages/MacPkt_m.cc	/^int MacPktDescriptor::findField(void *object, const char *fieldName) const$/;"	f	class:MacPktDescriptor
findField	src/veins/modules/application/platooning/messages/BikesMessage_m.cc	/^int BikesMessageDescriptor::findField(void *object, const char *fieldName) const$/;"	f	class:BikesMessageDescriptor
findField	src/veins/modules/application/platooning/messages/ManeuverMessage_m.cc	/^int ManeuverMessageDescriptor::findField(void *object, const char *fieldName) const$/;"	f	class:ManeuverMessageDescriptor
findField	src/veins/modules/application/platooning/messages/PlatooningBeacon_m.cc	/^int PlatooningBeaconDescriptor::findField(void *object, const char *fieldName) const$/;"	f	class:PlatooningBeaconDescriptor
findField	src/veins/modules/application/platooning/messages/UnicastMessage_m.cc	/^int UnicastMessageDescriptor::findField(void *object, const char *fieldName) const$/;"	f	class:UnicastMessageDescriptor
findField	src/veins/modules/application/platooning/messages/UnicastProtocolControlMessage_m.cc	/^int UnicastProtocolControlMessageDescriptor::findField(void *object, const char *fieldName) const$/;"	f	class:UnicastProtocolControlMessageDescriptor
findField	src/veins/modules/messages/AirFrame11p_m.cc	/^int AirFrame11pDescriptor::findField(void *object, const char *fieldName) const$/;"	f	class:AirFrame11pDescriptor
findField	src/veins/modules/messages/Mac80211Pkt_m.cc	/^int Mac80211PktDescriptor::findField(void *object, const char *fieldName) const$/;"	f	class:Mac80211PktDescriptor
findField	src/veins/modules/messages/PhyControlMessage_m.cc	/^int PhyControlMessageDescriptor::findField(void *object, const char *fieldName) const$/;"	f	class:PhyControlMessageDescriptor
findField	src/veins/modules/messages/WaveShortMessage_m.cc	/^int WaveShortMessageDescriptor::findField(void *object, const char *fieldName) const$/;"	f	class:WaveShortMessageDescriptor
findGlobalModule	src/veins/base/utils/FindModule.h	/^		static T findGlobalModule() {return findSubModule(simulation.getSystemModule());}$/;"	f	class:FindModule
findHost	src/veins/base/modules/BaseModule.cc	/^cModule *const BaseModule::findHost(void)$/;"	f	class:BaseModule
findHost	src/veins/base/modules/BaseModule.cc	/^const cModule *const BaseModule::findHost(void) const$/;"	f	class:BaseModule
findHost	src/veins/base/utils/FindModule.h	/^		static cModule *const findHost(cModule *const m) {$/;"	f	class:FindModule
findHost	src/veins/base/utils/FindModule.h	/^		static const cModule *const findHost(const cModule *const m) {$/;"	f	class:FindModule
findIntpl	src/veins/base/phyLayer/Interpolation.h	/^	const_iterator_intpl findIntpl(key_cref_type pos) const{$/;"	f	class:InterpolateableMap
findIntpl	src/veins/base/phyLayer/Interpolation.h	/^	iterator_intpl findIntpl(key_cref_type pos)  __attribute__ ((noinline)) {$/;"	f	class:InterpolateableMap
findMax	src/veins/base/phyLayer/MappingUtils.cc	/^Mapping::argument_value_t MappingUtils::findMax(const ConstMapping& m, Argument::mapped_type_cref cRetNotFound \/*= cMaxNotFound*\/) {$/;"	f	class:MappingUtils
findMax	src/veins/base/phyLayer/MappingUtils.cc	/^Mapping::argument_value_t MappingUtils::findMax(const ConstMapping& m, const Argument& pRangeFrom, const Argument& pRangeTo, Argument::mapped_type_cref cRetNotFound \/*= cMaxNotFound*\/){$/;"	f	class:MappingUtils
findMin	src/veins/base/phyLayer/MappingUtils.cc	/^Mapping::argument_value_t MappingUtils::findMin(const ConstMapping& m, Argument::mapped_type_cref cRetNotFound \/*= cMinNotFound*\/) {$/;"	f	class:MappingUtils
findMin	src/veins/base/phyLayer/MappingUtils.cc	/^Mapping::argument_value_t MappingUtils::findMin(const ConstMapping& m, const Argument& pRangeFrom, const Argument& pRangeTo, Argument::mapped_type_cref cRetNotFound \/*= cMinNotFound*\/) {$/;"	f	class:MappingUtils
findSubModule	src/veins/base/utils/FindModule.h	/^		static T findSubModule(const cModule *const top)$/;"	f	class:FindModule
findVehicleTypeIndex	src/veins/modules/mobility/traci/TraCIBaseTrafficManager.cc	/^int TraCIBaseTrafficManager::findVehicleTypeIndex(std::string vehType) {$/;"	f	class:TraCIBaseTrafficManager
find_unused_port	sumo-launchd.py	/^def find_unused_port():$/;"	f
finish	src/veins/base/modules/BaseLayer.cc	/^void BaseLayer::finish() {$/;"	f	class:BaseLayer
finish	src/veins/base/modules/BaseMobility.h	/^    virtual void finish(){};$/;"	f	class:BaseMobility
finish	src/veins/base/phyLayer/BasePhyLayer.cc	/^void BasePhyLayer::finish(){$/;"	f	class:BasePhyLayer
finish	src/veins/base/phyLayer/Decider.h	/^	virtual void finish() {}$/;"	f	class:Decider
finish	src/veins/modules/application/ieee80211p/BaseWaveApplLayer.cc	/^void BaseWaveApplLayer::finish() {$/;"	f	class:BaseWaveApplLayer
finish	src/veins/modules/application/platooning/UnicastProtocol.cc	/^void UnicastProtocol::finish()$/;"	f	class:UnicastProtocol
finish	src/veins/modules/application/platooning/apps/BaseApp.cc	/^void BaseApp::finish() {$/;"	f	class:BaseApp
finish	src/veins/modules/application/platooning/apps/SimplePlatooningApp.cc	/^void SimplePlatooningApp::finish() {$/;"	f	class:SimplePlatooningApp
finish	src/veins/modules/application/platooning/bikeplatoons/BikesApp.cc	/^void BikesApp::finish()$/;"	f	class:BikesApp
finish	src/veins/modules/application/platooning/maneuver/JoinManeuverApp.cc	/^void JoinManeuverApp::finish() {$/;"	f	class:JoinManeuverApp
finish	src/veins/modules/application/platooning/protocols/BaseProtocol.cc	/^void BaseProtocol::finish() {$/;"	f	class:BaseProtocol
finish	src/veins/modules/application/platooning/protocols/SimplePlatooningBeaconing.cc	/^void SimplePlatooningBeaconing::finish(){$/;"	f	class:SimplePlatooningBeaconing
finish	src/veins/modules/application/traci/TraCITestApp.cc	/^void TraCITestApp::finish() {$/;"	f	class:TraCITestApp
finish	src/veins/modules/mac/ieee80211p/Mac1609_4.cc	/^void Mac1609_4::finish() {$/;"	f	class:Mac1609_4
finish	src/veins/modules/mobility/traci/SumoTrafficManager.cc	/^void SumoTrafficManager::finish() {$/;"	f	class:SumoTrafficManager
finish	src/veins/modules/mobility/traci/TestTrafficManager.cc	/^void TestTrafficManager::finish() {$/;"	f	class:TestTrafficManager
finish	src/veins/modules/mobility/traci/TraCIBaseTrafficManager.cc	/^void TraCIBaseTrafficManager::finish() {$/;"	f	class:TraCIBaseTrafficManager
finish	src/veins/modules/mobility/traci/TraCIMobility.cc	/^void TraCIMobility::finish()$/;"	f	class:TraCIMobility
finish	src/veins/modules/mobility/traci/TraCIScenarioManager.cc	/^void TraCIScenarioManager::finish() {$/;"	f	class:TraCIScenarioManager
finish	src/veins/modules/mobility/traci/TraCIScenarioManagerLaunchd.cc	/^void TraCIScenarioManagerLaunchd::finish()$/;"	f	class:TraCIScenarioManagerLaunchd
finish	src/veins/modules/mobility/traci/TraCIScreenRecorder.cc	/^void TraCIScreenRecorder::finish()$/;"	f	class:TraCIScreenRecorder
finish	src/veins/modules/obstacle/ObstacleControl.cc	/^void ObstacleControl::finish() {$/;"	f	class:ObstacleControl
finish	src/veins/modules/phy/Decider80211p.cc	/^void Decider80211p::finish() {$/;"	f	class:Decider80211p
finish	src/veins/modules/world/annotations/AnnotationManager.cc	/^void AnnotationManager::finish() {$/;"	f	class:AnnotationManager
finishRadioSwitching	src/veins/base/phyLayer/BasePhyLayer.cc	/^void BasePhyLayer::finishRadioSwitching()$/;"	f	class:BasePhyLayer
first	src/veins/base/phyLayer/BaseDecider.h	/^		ChannelSenseRequest* first;$/;"	m	struct:BaseDecider::__anon1
first	src/veins/base/phyLayer/Interpolation.h	/^	used_iterator             first;$/;"	m	class:ConstInterpolateableIterator
firstRoadNumber	src/veins/modules/mobility/traci/TraCIMobility.h	/^				double firstRoadNumber; \/**< for statistics: number of first road we encountered (if road id can be expressed as a number) *\/$/;"	m	class:Veins::TraCIMobility::Statistics
firstStepAt	src/veins/modules/mobility/traci/TraCIScenarioManager.h	/^		simtime_t firstStepAt; \/**< when to start synchronizing with the TraCI server (-1: immediately after connecting) *\/$/;"	m	class:Veins::TraCIScenarioManager
fixIfHostGetsOutside	src/veins/base/modules/BaseMobility.h	/^    virtual void fixIfHostGetsOutside(){$/;"	f	class:BaseMobility
fixIfHostGetsOutside	src/veins/modules/mobility/traci/TraCIMobility.cc	/^void TraCIMobility::fixIfHostGetsOutside()$/;"	f	class:TraCIMobility
floorToZero	src/veins/base/utils/FWMath.h	/^  static double floorToZero(double d) { return (d >= 0.0)? floor(d) : ceil(d); }$/;"	f	class:FWMath
fname	configure	/^    fname = os.path.join(options.inet, 'Version')$/;"	v
followerFSM	src/veins/modules/application/platooning/bikes/BikeManeuver.h	/^        cFSM leaderFSM, followerFSM, bikeFSM;$/;"	m	class:BikeManeuver
followerFsm	src/veins/modules/application/platooning/bikeplatoons/BikesApp.h	/^		cFSM leaderFsm, followerFsm, leaverFsm, bikeFsm;$/;"	m	class:BikesApp
followerFsm	src/veins/modules/application/platooning/maneuver/JoinManeuverApp.h	/^		cFSM leaderFsm, joinerFsm, followerFsm;$/;"	m	class:JoinManeuverApp
followerVehicleId_var	src/veins/modules/application/platooning/messages/BikesMessage_m.h	/^    int followerVehicleId_var;$/;"	m	class:BikesMessage
followerVehicleId_var	src/veins/modules/application/platooning/messages/ManeuverMessage_m.h	/^    int followerVehicleId_var;$/;"	m	class:ManeuverMessage
formation	src/veins/modules/application/platooning/bikeplatoons/BikesApp.h	/^			std::vector<int>	formation;	\/\/list of vehicles in the platoon$/;"	m	struct:BikesApp::VEHICLE_DATA
formation	src/veins/modules/application/platooning/bikes/BikeManeuver.h	/^			std::vector < int > formation;  \/\/list of vehicles in the platoon$/;"	m	struct:BikeManeuver::VEHICLE_DATA
formation	src/veins/modules/application/platooning/maneuver/JoinManeuverApp.h	/^			std::vector<int>	formation;	\/\/list of vehicles in the platoon$/;"	m	struct:JoinManeuverApp::VEHICLE_DATA
forward_connection	sumo-launchd.py	/^def forward_connection(client_socket, server_socket, process):$/;"	f
fragmentation_var	src/veins/modules/messages/Mac80211Pkt_m.h	/^    int fragmentation_var;$/;"	m	class:Mac80211Pkt
freeInGates	src/veins/base/connectionManager/NicEntryDebug.h	/^    GateStack freeInGates;$/;"	m	class:NicEntryDebug
freeOutGates	src/veins/base/connectionManager/NicEntryDebug.h	/^    GateStack freeOutGates;$/;"	m	class:NicEntryDebug
frequency	src/veins/base/phyLayer/MappingBase.cc	/^const Dimension             Dimension::frequency = Dimension::frequency_static();$/;"	m	class:Dimension	file:
frequency	src/veins/base/phyLayer/MappingBase.h	/^	static const Dimension frequency;$/;"	m	class:Dimension
frequency	src/veins/modules/mac/ieee80211p/Mac1609_4.h	/^		std::map<int,double> frequency;$/;"	m	class:Mac1609_4
frequency_static	src/veins/base/phyLayer/MappingBase.cc	/^Dimension& Dimension::frequency_static() {$/;"	f	class:Dimension
from	src/veins/base/phyLayer/ChannelInfo.h	/^		simtime_t from;$/;"	m	class:ChannelInfo::BaseIntersectionIterator
fromModule	src/veins/base/utils/PassedMessage.h	/^    int fromModule;$/;"	m	class:PassedMessage
fromTkColor	src/veins/modules/mobility/traci/TraCIColor.cc	/^TraCIColor TraCIColor::fromTkColor(std::string tkColorName) {$/;"	f	class:TraCIColor
frontId	src/veins/modules/application/platooning/apps/BaseApp.h	/^		int leaderId, frontId;$/;"	m	class:BaseApp
frontId	src/veins/modules/application/platooning/bikeplatoons/BikesApp.h	/^			int					frontId;	\/\/id of the vehicle in front$/;"	m	struct:BikesApp::VEHICLE_DATA
frontId	src/veins/modules/application/platooning/bikes/BikeManeuver.h	/^			int frontId;                \/\/id of the vehicle in front$/;"	m	struct:BikeManeuver::VEHICLE_DATA
frontId	src/veins/modules/application/platooning/maneuver/JoinManeuverApp.h	/^			int					frontId;	\/\/id of the vehicle in front$/;"	m	struct:JoinManeuverApp::VEHICLE_DATA
frontVehicleId_var	src/veins/modules/application/platooning/messages/BikesMessage_m.h	/^    int frontVehicleId_var;$/;"	m	class:BikesMessage
frontVehicleId_var	src/veins/modules/application/platooning/messages/ManeuverMessage_m.h	/^    int frontVehicleId_var;$/;"	m	class:ManeuverMessage
gamma	src/veins/modules/analogueModel/TwoRayInterferenceModel.h	/^				double gamma;$/;"	m	class:TwoRayInterferenceModel::Mapping
gateToString	src/veins/base/utils/PassedMessage.h	/^    static const char *gateToString(gates_t g) {$/;"	f	class:PassedMessage
gateType	src/veins/base/utils/PassedMessage.h	/^    gates_t gateType;$/;"	m	class:PassedMessage
gates_t	src/veins/base/utils/PassedMessage.h	/^    enum gates_t {$/;"	g	class:PassedMessage
generateMessage	src/veins/modules/application/platooning/bikeplatoons/BikesApp.cc	/^BikesMessage *BikesApp::generateMessage()$/;"	f	class:BikesApp
generateMessage	src/veins/modules/application/platooning/maneuver/JoinManeuverApp.cc	/^ManeuverMessage *JoinManeuverApp::generateMessage() {$/;"	f	class:JoinManeuverApp
generateVehicle	src/veins/modules/mobility/traci/TestTrafficManager.h	/^		cMessage *generateVehicle;$/;"	m	class:TestTrafficManager
genericGetCoord	src/veins/modules/mobility/traci/TraCICommandInterface.cc	/^Coord TraCICommandInterface::genericGetCoord(uint8_t commandId, std::string objectId, uint8_t variableId, uint8_t responseId) {$/;"	f	class:Veins::TraCICommandInterface
genericGetCoordList	src/veins/modules/mobility/traci/TraCICommandInterface.cc	/^std::list<Coord> TraCICommandInterface::genericGetCoordList(uint8_t commandId, std::string objectId, uint8_t variableId, uint8_t responseId) {$/;"	f	class:Veins::TraCICommandInterface
genericGetDouble	src/veins/modules/mobility/traci/TraCICommandInterface.cc	/^double TraCICommandInterface::genericGetDouble(uint8_t commandId, std::string objectId, uint8_t variableId, uint8_t responseId) {$/;"	f	class:Veins::TraCICommandInterface
genericGetInt	src/veins/modules/mobility/traci/TraCICommandInterface.cc	/^int32_t TraCICommandInterface::genericGetInt(uint8_t commandId, std::string objectId, uint8_t variableId, uint8_t responseId) {$/;"	f	class:Veins::TraCICommandInterface
genericGetString	src/veins/modules/mobility/traci/TraCICommandInterface.cc	/^std::string TraCICommandInterface::genericGetString(uint8_t commandId, std::string objectId, uint8_t variableId, uint8_t responseId) {$/;"	f	class:Veins::TraCICommandInterface
genericGetStringList	src/veins/modules/mobility/traci/TraCICommandInterface.cc	/^std::list<std::string> TraCICommandInterface::genericGetStringList(uint8_t commandId, std::string objectId, uint8_t variableId, uint8_t responseId) {$/;"	f	class:Veins::TraCICommandInterface
get	src/veins/base/utils/FindModule.h	/^		T *const get(cModule *const from = NULL)$/;"	f	class:AccessModuleWrap
get	src/veins/base/utils/HostState.h	/^    States get() const { return state; }$/;"	f	class:HostState
get	src/veins/modules/mobility/traci/TraCIMobility.h	/^		TraCIMobility* get(cModule* host) {$/;"	f	class:Veins::TraCIMobilityAccess
get	src/veins/modules/mobility/traci/TraCIScenarioManager.h	/^		TraCIScenarioManager* get() {$/;"	f	class:Veins::TraCIScenarioManagerAccess
get	src/veins/modules/mobility/traci/TraCIScenarioManagerLaunchd.h	/^		TraCIScenarioManagerLaunchd* get() {$/;"	f	class:Veins::TraCIScenarioManagerLaunchdAccess
get16QamBer	src/veins/modules/phy/NistErrorRate.cc	/^NistErrorRate::get16QamBer (double snr)$/;"	f	class:NistErrorRate
get64QamBer	src/veins/modules/phy/NistErrorRate.cc	/^NistErrorRate::get64QamBer (double snr)$/;"	f	class:NistErrorRate
getACCAcceleration	src/veins/modules/mobility/traci/TraCICommandInterface.cc	/^double TraCICommandInterface::Vehicle::getACCAcceleration() {$/;"	f	class:Veins::TraCICommandInterface::Vehicle
getAcceleration	src/veins/modules/application/platooning/messages/PlatooningBeacon_m.cc	/^double PlatooningBeacon::getAcceleration() const$/;"	f	class:PlatooningBeacon
getActiveController	src/veins/modules/mobility/traci/TraCICommandInterface.cc	/^int TraCICommandInterface::Vehicle::getActiveController() {$/;"	f	class:Veins::TraCICommandInterface::Vehicle
getAddress	src/veins/base/utils/MacToNetwControlInfo.h	/^    static const LAddress::L2Type& getAddress(cMessage *const pMsg) {$/;"	f	class:MacToNetwControlInfo
getAddress3	src/veins/modules/messages/Mac80211Pkt_m.cc	/^int Mac80211Pkt::getAddress3() const$/;"	f	class:Mac80211Pkt
getAddress4	src/veins/modules/messages/Mac80211Pkt_m.cc	/^int Mac80211Pkt::getAddress4() const$/;"	f	class:Mac80211Pkt
getAddressFromControlInfo	src/veins/base/utils/MacToNetwControlInfo.h	/^    static const LAddress::L2Type& getAddressFromControlInfo(cObject *const pCtrlInfo) {$/;"	f	class:MacToNetwControlInfo
getAirFrames	src/veins/base/phyLayer/ChannelInfo.cc	/^void ChannelInfo::getAirFrames(simtime_t_cref from, simtime_t_cref to,$/;"	f	class:ChannelInfo
getAnalogueModel	src/veins/base/phyLayer/PhyUtils.h	/^	virtual RadioStateAnalogueModel* getAnalogueModel() {$/;"	f	class:Veins::Radio
getAnalogueModelFromName	src/veins/base/phyLayer/BasePhyLayer.cc	/^AnalogueModel* BasePhyLayer::getAnalogueModelFromName(std::string name, ParameterMap& params) {$/;"	f	class:BasePhyLayer
getAnalogueModelFromName	src/veins/modules/phy/PhyLayer80211p.cc	/^AnalogueModel* PhyLayer80211p::getAnalogueModelFromName(std::string name, ParameterMap& params) {$/;"	f	class:PhyLayer80211p
getAngleRad	src/veins/modules/mobility/traci/TraCIMobility.h	/^		virtual double getAngleRad() const {$/;"	f	class:Veins::TraCIMobility
getAnswerTime	src/veins/base/phyLayer/BaseDecider.h	/^		simtime_t_cref getAnswerTime() const { return canAnswerAt; }$/;"	f	struct:BaseDecider::__anon1
getAntennaPositionOffset	src/veins/modules/mobility/traci/TraCIMobility.h	/^		virtual double getAntennaPositionOffset() const {$/;"	f	class:Veins::TraCIMobility
getArgValue	src/veins/base/phyLayer/MappingBase.cc	/^Argument::mapped_type_cref Argument::getArgValue(const Argument::key_type & dim) const$/;"	f	class:Argument
getArraySize	src/veins/base/messages/AirFrame_m.cc	/^int AirFrameDescriptor::getArraySize(void *object, int field) const$/;"	f	class:Veins::AirFrameDescriptor
getArraySize	src/veins/base/messages/BorderMsg_m.cc	/^int BorderMsgDescriptor::getArraySize(void *object, int field) const$/;"	f	class:BorderMsgDescriptor
getArraySize	src/veins/base/messages/ChannelSenseRequest_m.cc	/^int ChannelSenseRequestDescriptor::getArraySize(void *object, int field) const$/;"	f	class:ChannelSenseRequestDescriptor
getArraySize	src/veins/base/messages/MacPkt_m.cc	/^int MacPktDescriptor::getArraySize(void *object, int field) const$/;"	f	class:MacPktDescriptor
getArraySize	src/veins/modules/application/platooning/messages/BikesMessage_m.cc	/^int BikesMessageDescriptor::getArraySize(void *object, int field) const$/;"	f	class:BikesMessageDescriptor
getArraySize	src/veins/modules/application/platooning/messages/ManeuverMessage_m.cc	/^int ManeuverMessageDescriptor::getArraySize(void *object, int field) const$/;"	f	class:ManeuverMessageDescriptor
getArraySize	src/veins/modules/application/platooning/messages/PlatooningBeacon_m.cc	/^int PlatooningBeaconDescriptor::getArraySize(void *object, int field) const$/;"	f	class:PlatooningBeaconDescriptor
getArraySize	src/veins/modules/application/platooning/messages/UnicastMessage_m.cc	/^int UnicastMessageDescriptor::getArraySize(void *object, int field) const$/;"	f	class:UnicastMessageDescriptor
getArraySize	src/veins/modules/application/platooning/messages/UnicastProtocolControlMessage_m.cc	/^int UnicastProtocolControlMessageDescriptor::getArraySize(void *object, int field) const$/;"	f	class:UnicastProtocolControlMessageDescriptor
getArraySize	src/veins/modules/messages/AirFrame11p_m.cc	/^int AirFrame11pDescriptor::getArraySize(void *object, int field) const$/;"	f	class:AirFrame11pDescriptor
getArraySize	src/veins/modules/messages/Mac80211Pkt_m.cc	/^int Mac80211PktDescriptor::getArraySize(void *object, int field) const$/;"	f	class:Mac80211PktDescriptor
getArraySize	src/veins/modules/messages/PhyControlMessage_m.cc	/^int PhyControlMessageDescriptor::getArraySize(void *object, int field) const$/;"	f	class:PhyControlMessageDescriptor
getArraySize	src/veins/modules/messages/WaveShortMessage_m.cc	/^int WaveShortMessageDescriptor::getArraySize(void *object, int field) const$/;"	f	class:WaveShortMessageDescriptor
getAttenuation	src/veins/base/phyLayer/Signal_.h	/^	const ConstMappingList& getAttenuation() const {$/;"	f	class:Signal
getAutoShutdownTriggered	src/veins/modules/mobility/traci/TraCIScenarioManager.h	/^		bool getAutoShutdownTriggered() {$/;"	f	class:Veins::TraCIScenarioManager
getBandwidth	src/veins/modules/utility/ConstsPhy.h	/^inline uint64_t getBandwidth(enum Bandwidth bw) {$/;"	f
getBboxP1	src/veins/modules/obstacle/Obstacle.cc	/^const Coord Obstacle::getBboxP1() const {$/;"	f	class:Obstacle
getBboxP2	src/veins/modules/obstacle/Obstacle.cc	/^const Coord Obstacle::getBboxP2() const {$/;"	f	class:Obstacle
getBitErrorRate	src/veins/base/utils/MacToNetwControlInfo.h	/^	double getBitErrorRate() const$/;"	f	class:MacToNetwControlInfo
getBitrate	src/veins/base/phyLayer/Signal_.h	/^	Mapping* getBitrate() {$/;"	f	class:Signal
getBitrate	src/veins/modules/phy/DeciderResult80211.h	/^	double getBitrate() const { return bitrate; }$/;"	f	class:DeciderResult80211
getBpskBer	src/veins/modules/phy/NistErrorRate.cc	/^NistErrorRate::getBpskBer (double snr)$/;"	f	class:NistErrorRate
getCACCConstantSpacing	src/veins/modules/mobility/traci/TraCICommandInterface.cc	/^double TraCICommandInterface::Vehicle::getCACCConstantSpacing() {$/;"	f	class:Veins::TraCICommandInterface::Vehicle
getCCAThreshold	src/veins/modules/phy/Decider80211p.cc	/^double Decider80211p::getCCAThreshold() {$/;"	f	class:Decider80211p
getCCAThreshold	src/veins/modules/phy/PhyLayer80211p.cc	/^double PhyLayer80211p::getCCAThreshold() {$/;"	f	class:PhyLayer80211p
getCellEntries	src/veins/base/connectionManager/BaseConnectionManager.cc	/^	::getCellEntries(BaseConnectionManager::GridCoord& cell)$/;"	f	class:BaseConnectionManager
getCellForCoordinate	src/veins/base/connectionManager/BaseConnectionManager.cc	/^	::getCellForCoordinate(const Coord& c)$/;"	f	class:BaseConnectionManager
getChannel	src/veins/base/messages/AirFrame_m.cc	/^int AirFrame::getChannel() const$/;"	f	class:Veins::AirFrame
getChannel	src/veins/modules/application/platooning/messages/UnicastMessage_m.cc	/^int UnicastMessage::getChannel() const$/;"	f	class:UnicastMessage
getChannelInfo	src/veins/base/phyLayer/BaseDecider.cc	/^void BaseDecider::getChannelInfo(simtime_t_cref start, simtime_t_cref end,$/;"	f	class:BaseDecider
getChannelInfo	src/veins/base/phyLayer/BasePhyLayer.cc	/^void BasePhyLayer::getChannelInfo(simtime_t_cref from, simtime_t_cref to, AirFrameVector& out) {$/;"	f	class:BasePhyLayer
getChannelNumber	src/veins/modules/messages/WaveShortMessage_m.cc	/^int WaveShortMessage::getChannelNumber() const$/;"	f	class:WaveShortMessage
getChannelState	src/veins/base/phyLayer/BaseDecider.cc	/^ChannelState BaseDecider::getChannelState() {$/;"	f	class:BaseDecider
getChannelState	src/veins/base/phyLayer/BasePhyLayer.cc	/^ChannelState BasePhyLayer::getChannelState() {$/;"	f	class:BasePhyLayer
getChannelState	src/veins/base/phyLayer/Decider.cc	/^ChannelState Decider::getChannelState() {$/;"	f	class:Decider
getChannelState	src/veins/modules/phy/SNRThresholdDecider.cc	/^ChannelState SNRThresholdDecider::getChannelState() {$/;"	f	class:SNRThresholdDecider
getChunkSuccessRate	src/veins/modules/phy/NistErrorRate.cc	/^NistErrorRate::getChunkSuccessRate (unsigned int datarate, enum Bandwidth bw, double snr_mW, uint32_t nbits)$/;"	f	class:NistErrorRate
getCommandInterface	src/veins/modules/mobility/traci/TraCIMobility.h	/^		virtual TraCICommandInterface* getCommandInterface() const {$/;"	f	class:Veins::TraCIMobility
getCommandInterface	src/veins/modules/mobility/traci/TraCIScenarioManager.h	/^		TraCICommandInterface* getCommandInterface() const { return commandIfc; }$/;"	f	class:Veins::TraCIScenarioManager
getCommandValue	src/veins/modules/application/platooning/messages/UnicastProtocolControlMessage_m.cc	/^int UnicastProtocolControlMessage::getCommandValue() const$/;"	f	class:UnicastProtocolControlMessage
getConnectionManager	src/veins/base/connectionManager/ChannelAccess.cc	/^BaseConnectionManager* ChannelAccess::getConnectionManager(cModule* nic)$/;"	f	class:ChannelAccess
getConnectionManager	src/veins/base/modules/BaseMacLayer.cc	/^BaseConnectionManager* BaseMacLayer::getConnectionManager() {$/;"	f	class:BaseMacLayer
getControlCommand	src/veins/modules/application/platooning/messages/UnicastProtocolControlMessage_m.cc	/^int UnicastProtocolControlMessage::getControlCommand() const$/;"	f	class:UnicastProtocolControlMessage
getCurrentChannel	src/veins/base/phyLayer/PhyUtils.h	/^	int getCurrentChannel() {$/;"	f	class:Veins::Radio
getCurrentPosition	src/veins/base/modules/BaseMobility.h	/^    virtual Coord getCurrentPosition(\/*simtime_t_cref stWhen = simTime()*\/) const {$/;"	f	class:BaseMobility
getCurrentPosition	src/veins/base/utils/Move.h	/^    virtual const Coord& getCurrentPosition() const$/;"	f	class:Move
getCurrentRadioChannel	src/veins/base/phyLayer/BasePhyLayer.cc	/^int BasePhyLayer::getCurrentRadioChannel() {$/;"	f	class:BasePhyLayer
getCurrentRoadOnRoute	src/veins/modules/mobility/traci/TraCICommandInterface.cc	/^std::string TraCICommandInterface::Vehicle::getCurrentRoadOnRoute() {$/;"	f	class:Veins::TraCICommandInterface::Vehicle
getCurrentSpeed	src/veins/base/modules/BaseMobility.h	/^    virtual Coord getCurrentSpeed() const {$/;"	f	class:BaseMobility
getCurrentState	src/veins/base/phyLayer/PhyUtils.h	/^	virtual int getCurrentState() const {$/;"	f	class:Veins::Radio
getCurrentTimeMs	src/veins/modules/mobility/traci/TraCIScenarioManager.cc	/^uint32_t TraCIScenarioManager::getCurrentTimeMs() {$/;"	f	class:TraCIScenarioManager
getCurrentTravelTime	src/veins/modules/mobility/traci/TraCICommandInterface.cc	/^double TraCICommandInterface::Road::getCurrentTravelTime() {$/;"	f	class:Veins::TraCICommandInterface::Road
getDataRate	src/veins/modules/messages/WaveShortMessage_m.cc	/^int WaveShortMessage::getDataRate() const$/;"	f	class:WaveShortMessage
getDeciderFromName	src/veins/base/phyLayer/BasePhyLayer.cc	/^Decider* BasePhyLayer::getDeciderFromName(std::string name, ParameterMap& params)$/;"	f	class:BasePhyLayer
getDeciderFromName	src/veins/modules/phy/PhyLayer80211p.cc	/^Decider* PhyLayer80211p::getDeciderFromName(std::string name, ParameterMap& params) {$/;"	f	class:PhyLayer80211p
getDeciderResult	src/veins/base/phyLayer/PhyToMacControlInfo.h	/^	DeciderResult* getDeciderResult() const {$/;"	f	class:PhyToMacControlInfo
getDeciderResult	src/veins/base/phyLayer/PhyToMacControlInfo.h	/^    static DeciderResult *const getDeciderResult(cMessage *const pMsg) {$/;"	f	class:PhyToMacControlInfo
getDeciderResultFromControlInfo	src/veins/base/phyLayer/PhyToMacControlInfo.h	/^    static DeciderResult *const getDeciderResultFromControlInfo(cObject *const pCtrlInfo) {$/;"	f	class:PhyToMacControlInfo
getDelay	src/veins/base/phyLayer/MappingUtils.h	/^	virtual simtime_t_cref getDelay() const {$/;"	f	class:BaseDelayedMapping
getDest	src/veins/base/utils/NetwToMacControlInfo.h	/^    virtual const LAddress::L2Type& getDest() const {$/;"	f	class:NetwToMacControlInfo
getDestAddr	src/veins/base/messages/MacPkt_m.cc	/^LAddress::L2Type& MacPkt::getDestAddr()$/;"	f	class:MacPkt
getDestAddr	src/veins/base/messages/MacPkt_m.h	/^    virtual const LAddress::L2Type& getDestAddr() const {return const_cast<MacPkt*>(this)->getDestAddr();}$/;"	f	class:MacPkt
getDestFromControlInfo	src/veins/base/utils/NetwToMacControlInfo.cc	/^const LAddress::L2Type& NetwToMacControlInfo::getDestFromControlInfo(const cObject *const pCtrlInfo)$/;"	f	class:NetwToMacControlInfo
getDestination	src/veins/modules/application/platooning/messages/UnicastMessage_m.cc	/^int UnicastMessage::getDestination() const$/;"	f	class:UnicastMessage
getDimension	src/veins/base/phyLayer/MappingUtils.h	/^	Dimension getDimension() { return myDimension; }$/;"	f	class:MultiDimMapping
getDimensionID	src/veins/base/phyLayer/MappingBase.cc	/^Dimension::DimensionIdType Dimension::getDimensionID(const Dimension::DimensionNameType& name)$/;"	f	class:Dimension
getDimensionSet	src/veins/base/phyLayer/MappingBase.h	/^	const DimensionSet& getDimensionSet() const {$/;"	f	class:ConstMapping
getDimensions	src/veins/base/phyLayer/MappingBase.h	/^	DimensionSet getDimensions() const {$/;"	f	class:Argument
getDirection	src/veins/base/messages/BorderMsg_m.cc	/^Coord& BorderMsg::getDirection()$/;"	f	class:BorderMsg
getDirection	src/veins/base/messages/BorderMsg_m.h	/^    virtual const Coord& getDirection() const {return const_cast<BorderMsg*>(this)->getDirection();}$/;"	f	class:BorderMsg
getDirection	src/veins/base/utils/Move.h	/^	const Coord& getDirection() const$/;"	f	class:Move
getDistance	src/veins/modules/mobility/traci/TraCICommandInterface.cc	/^double TraCICommandInterface::getDistance(const Coord& p1, const Coord& p2, bool returnDrivingDistance) {$/;"	f	class:Veins::TraCICommandInterface
getDistanceFromRouteBegin	src/veins/modules/mobility/traci/TraCICommandInterface.cc	/^double TraCICommandInterface::Vehicle::getDistanceFromRouteBegin() {$/;"	f	class:Veins::TraCICommandInterface::Vehicle
getDistanceToRouteEnd	src/veins/modules/mobility/traci/TraCICommandInterface.cc	/^double TraCICommandInterface::Vehicle::getDistanceToRouteEnd() {$/;"	f	class:Veins::TraCICommandInterface::Vehicle
getDuration	src/veins/base/messages/AirFrame_m.cc	/^simtime_t AirFrame::getDuration() const$/;"	f	class:Veins::AirFrame
getDuration	src/veins/base/phyLayer/Signal.cc	/^simtime_t_cref Signal::getDuration() const{$/;"	f	class:Signal
getDuration	src/veins/modules/messages/Mac80211Pkt_m.cc	/^simtime_t Mac80211Pkt::getDuration() const$/;"	f	class:Mac80211Pkt
getEarliestInfoPoint	src/veins/base/phyLayer/ChannelInfo.h	/^	simtime_t getEarliestInfoPoint()$/;"	f	class:ChannelInfo
getExternalId	src/veins/modules/application/platooning/apps/BaseApp.cc	/^std::string BaseApp::getExternalId() {$/;"	f	class:BaseApp
getExternalId	src/veins/modules/mobility/traci/TraCIMobility.h	/^		virtual std::string getExternalId() const {$/;"	f	class:Veins::TraCIMobility
getFec16QamBer	src/veins/modules/phy/NistErrorRate.cc	/^NistErrorRate::getFec16QamBer (double snr, uint32_t nbits, uint32_t bValue)$/;"	f	class:NistErrorRate
getFec64QamBer	src/veins/modules/phy/NistErrorRate.cc	/^NistErrorRate::getFec64QamBer (double snr, uint32_t nbits, uint32_t bValue)$/;"	f	class:NistErrorRate
getFecBpskBer	src/veins/modules/phy/NistErrorRate.cc	/^NistErrorRate::getFecBpskBer (double snr, uint32_t nbits, uint32_t bValue)$/;"	f	class:NistErrorRate
getFecQpskBer	src/veins/modules/phy/NistErrorRate.cc	/^NistErrorRate::getFecQpskBer (double snr, uint32_t nbits, uint32_t bValue)$/;"	f	class:NistErrorRate
getFieldAsString	src/veins/base/messages/AirFrame_m.cc	/^std::string AirFrameDescriptor::getFieldAsString(void *object, int field, int i) const$/;"	f	class:Veins::AirFrameDescriptor
getFieldAsString	src/veins/base/messages/BorderMsg_m.cc	/^std::string BorderMsgDescriptor::getFieldAsString(void *object, int field, int i) const$/;"	f	class:BorderMsgDescriptor
getFieldAsString	src/veins/base/messages/ChannelSenseRequest_m.cc	/^std::string ChannelSenseRequestDescriptor::getFieldAsString(void *object, int field, int i) const$/;"	f	class:ChannelSenseRequestDescriptor
getFieldAsString	src/veins/base/messages/MacPkt_m.cc	/^std::string MacPktDescriptor::getFieldAsString(void *object, int field, int i) const$/;"	f	class:MacPktDescriptor
getFieldAsString	src/veins/modules/application/platooning/messages/BikesMessage_m.cc	/^std::string BikesMessageDescriptor::getFieldAsString(void *object, int field, int i) const$/;"	f	class:BikesMessageDescriptor
getFieldAsString	src/veins/modules/application/platooning/messages/ManeuverMessage_m.cc	/^std::string ManeuverMessageDescriptor::getFieldAsString(void *object, int field, int i) const$/;"	f	class:ManeuverMessageDescriptor
getFieldAsString	src/veins/modules/application/platooning/messages/PlatooningBeacon_m.cc	/^std::string PlatooningBeaconDescriptor::getFieldAsString(void *object, int field, int i) const$/;"	f	class:PlatooningBeaconDescriptor
getFieldAsString	src/veins/modules/application/platooning/messages/UnicastMessage_m.cc	/^std::string UnicastMessageDescriptor::getFieldAsString(void *object, int field, int i) const$/;"	f	class:UnicastMessageDescriptor
getFieldAsString	src/veins/modules/application/platooning/messages/UnicastProtocolControlMessage_m.cc	/^std::string UnicastProtocolControlMessageDescriptor::getFieldAsString(void *object, int field, int i) const$/;"	f	class:UnicastProtocolControlMessageDescriptor
getFieldAsString	src/veins/modules/messages/AirFrame11p_m.cc	/^std::string AirFrame11pDescriptor::getFieldAsString(void *object, int field, int i) const$/;"	f	class:AirFrame11pDescriptor
getFieldAsString	src/veins/modules/messages/Mac80211Pkt_m.cc	/^std::string Mac80211PktDescriptor::getFieldAsString(void *object, int field, int i) const$/;"	f	class:Mac80211PktDescriptor
getFieldAsString	src/veins/modules/messages/PhyControlMessage_m.cc	/^std::string PhyControlMessageDescriptor::getFieldAsString(void *object, int field, int i) const$/;"	f	class:PhyControlMessageDescriptor
getFieldAsString	src/veins/modules/messages/WaveShortMessage_m.cc	/^std::string WaveShortMessageDescriptor::getFieldAsString(void *object, int field, int i) const$/;"	f	class:WaveShortMessageDescriptor
getFieldCount	src/veins/base/messages/AirFrame_m.cc	/^int AirFrameDescriptor::getFieldCount(void *object) const$/;"	f	class:Veins::AirFrameDescriptor
getFieldCount	src/veins/base/messages/BorderMsg_m.cc	/^int BorderMsgDescriptor::getFieldCount(void *object) const$/;"	f	class:BorderMsgDescriptor
getFieldCount	src/veins/base/messages/ChannelSenseRequest_m.cc	/^int ChannelSenseRequestDescriptor::getFieldCount(void *object) const$/;"	f	class:ChannelSenseRequestDescriptor
getFieldCount	src/veins/base/messages/MacPkt_m.cc	/^int MacPktDescriptor::getFieldCount(void *object) const$/;"	f	class:MacPktDescriptor
getFieldCount	src/veins/modules/application/platooning/messages/BikesMessage_m.cc	/^int BikesMessageDescriptor::getFieldCount(void *object) const$/;"	f	class:BikesMessageDescriptor
getFieldCount	src/veins/modules/application/platooning/messages/ManeuverMessage_m.cc	/^int ManeuverMessageDescriptor::getFieldCount(void *object) const$/;"	f	class:ManeuverMessageDescriptor
getFieldCount	src/veins/modules/application/platooning/messages/PlatooningBeacon_m.cc	/^int PlatooningBeaconDescriptor::getFieldCount(void *object) const$/;"	f	class:PlatooningBeaconDescriptor
getFieldCount	src/veins/modules/application/platooning/messages/UnicastMessage_m.cc	/^int UnicastMessageDescriptor::getFieldCount(void *object) const$/;"	f	class:UnicastMessageDescriptor
getFieldCount	src/veins/modules/application/platooning/messages/UnicastProtocolControlMessage_m.cc	/^int UnicastProtocolControlMessageDescriptor::getFieldCount(void *object) const$/;"	f	class:UnicastProtocolControlMessageDescriptor
getFieldCount	src/veins/modules/messages/AirFrame11p_m.cc	/^int AirFrame11pDescriptor::getFieldCount(void *object) const$/;"	f	class:AirFrame11pDescriptor
getFieldCount	src/veins/modules/messages/Mac80211Pkt_m.cc	/^int Mac80211PktDescriptor::getFieldCount(void *object) const$/;"	f	class:Mac80211PktDescriptor
getFieldCount	src/veins/modules/messages/PhyControlMessage_m.cc	/^int PhyControlMessageDescriptor::getFieldCount(void *object) const$/;"	f	class:PhyControlMessageDescriptor
getFieldCount	src/veins/modules/messages/WaveShortMessage_m.cc	/^int WaveShortMessageDescriptor::getFieldCount(void *object) const$/;"	f	class:WaveShortMessageDescriptor
getFieldName	src/veins/base/messages/AirFrame_m.cc	/^const char *AirFrameDescriptor::getFieldName(void *object, int field) const$/;"	f	class:Veins::AirFrameDescriptor
getFieldName	src/veins/base/messages/BorderMsg_m.cc	/^const char *BorderMsgDescriptor::getFieldName(void *object, int field) const$/;"	f	class:BorderMsgDescriptor
getFieldName	src/veins/base/messages/ChannelSenseRequest_m.cc	/^const char *ChannelSenseRequestDescriptor::getFieldName(void *object, int field) const$/;"	f	class:ChannelSenseRequestDescriptor
getFieldName	src/veins/base/messages/MacPkt_m.cc	/^const char *MacPktDescriptor::getFieldName(void *object, int field) const$/;"	f	class:MacPktDescriptor
getFieldName	src/veins/modules/application/platooning/messages/BikesMessage_m.cc	/^const char *BikesMessageDescriptor::getFieldName(void *object, int field) const$/;"	f	class:BikesMessageDescriptor
getFieldName	src/veins/modules/application/platooning/messages/ManeuverMessage_m.cc	/^const char *ManeuverMessageDescriptor::getFieldName(void *object, int field) const$/;"	f	class:ManeuverMessageDescriptor
getFieldName	src/veins/modules/application/platooning/messages/PlatooningBeacon_m.cc	/^const char *PlatooningBeaconDescriptor::getFieldName(void *object, int field) const$/;"	f	class:PlatooningBeaconDescriptor
getFieldName	src/veins/modules/application/platooning/messages/UnicastMessage_m.cc	/^const char *UnicastMessageDescriptor::getFieldName(void *object, int field) const$/;"	f	class:UnicastMessageDescriptor
getFieldName	src/veins/modules/application/platooning/messages/UnicastProtocolControlMessage_m.cc	/^const char *UnicastProtocolControlMessageDescriptor::getFieldName(void *object, int field) const$/;"	f	class:UnicastProtocolControlMessageDescriptor
getFieldName	src/veins/modules/messages/AirFrame11p_m.cc	/^const char *AirFrame11pDescriptor::getFieldName(void *object, int field) const$/;"	f	class:AirFrame11pDescriptor
getFieldName	src/veins/modules/messages/Mac80211Pkt_m.cc	/^const char *Mac80211PktDescriptor::getFieldName(void *object, int field) const$/;"	f	class:Mac80211PktDescriptor
getFieldName	src/veins/modules/messages/PhyControlMessage_m.cc	/^const char *PhyControlMessageDescriptor::getFieldName(void *object, int field) const$/;"	f	class:PhyControlMessageDescriptor
getFieldName	src/veins/modules/messages/WaveShortMessage_m.cc	/^const char *WaveShortMessageDescriptor::getFieldName(void *object, int field) const$/;"	f	class:WaveShortMessageDescriptor
getFieldProperty	src/veins/base/messages/AirFrame_m.cc	/^const char *AirFrameDescriptor::getFieldProperty(void *object, int field, const char *propertyname) const$/;"	f	class:Veins::AirFrameDescriptor
getFieldProperty	src/veins/base/messages/BorderMsg_m.cc	/^const char *BorderMsgDescriptor::getFieldProperty(void *object, int field, const char *propertyname) const$/;"	f	class:BorderMsgDescriptor
getFieldProperty	src/veins/base/messages/ChannelSenseRequest_m.cc	/^const char *ChannelSenseRequestDescriptor::getFieldProperty(void *object, int field, const char *propertyname) const$/;"	f	class:ChannelSenseRequestDescriptor
getFieldProperty	src/veins/base/messages/MacPkt_m.cc	/^const char *MacPktDescriptor::getFieldProperty(void *object, int field, const char *propertyname) const$/;"	f	class:MacPktDescriptor
getFieldProperty	src/veins/modules/application/platooning/messages/BikesMessage_m.cc	/^const char *BikesMessageDescriptor::getFieldProperty(void *object, int field, const char *propertyname) const$/;"	f	class:BikesMessageDescriptor
getFieldProperty	src/veins/modules/application/platooning/messages/ManeuverMessage_m.cc	/^const char *ManeuverMessageDescriptor::getFieldProperty(void *object, int field, const char *propertyname) const$/;"	f	class:ManeuverMessageDescriptor
getFieldProperty	src/veins/modules/application/platooning/messages/PlatooningBeacon_m.cc	/^const char *PlatooningBeaconDescriptor::getFieldProperty(void *object, int field, const char *propertyname) const$/;"	f	class:PlatooningBeaconDescriptor
getFieldProperty	src/veins/modules/application/platooning/messages/UnicastMessage_m.cc	/^const char *UnicastMessageDescriptor::getFieldProperty(void *object, int field, const char *propertyname) const$/;"	f	class:UnicastMessageDescriptor
getFieldProperty	src/veins/modules/application/platooning/messages/UnicastProtocolControlMessage_m.cc	/^const char *UnicastProtocolControlMessageDescriptor::getFieldProperty(void *object, int field, const char *propertyname) const$/;"	f	class:UnicastProtocolControlMessageDescriptor
getFieldProperty	src/veins/modules/messages/AirFrame11p_m.cc	/^const char *AirFrame11pDescriptor::getFieldProperty(void *object, int field, const char *propertyname) const$/;"	f	class:AirFrame11pDescriptor
getFieldProperty	src/veins/modules/messages/Mac80211Pkt_m.cc	/^const char *Mac80211PktDescriptor::getFieldProperty(void *object, int field, const char *propertyname) const$/;"	f	class:Mac80211PktDescriptor
getFieldProperty	src/veins/modules/messages/PhyControlMessage_m.cc	/^const char *PhyControlMessageDescriptor::getFieldProperty(void *object, int field, const char *propertyname) const$/;"	f	class:PhyControlMessageDescriptor
getFieldProperty	src/veins/modules/messages/WaveShortMessage_m.cc	/^const char *WaveShortMessageDescriptor::getFieldProperty(void *object, int field, const char *propertyname) const$/;"	f	class:WaveShortMessageDescriptor
getFieldStructName	src/veins/base/messages/AirFrame_m.cc	/^const char *AirFrameDescriptor::getFieldStructName(void *object, int field) const$/;"	f	class:Veins::AirFrameDescriptor
getFieldStructName	src/veins/base/messages/BorderMsg_m.cc	/^const char *BorderMsgDescriptor::getFieldStructName(void *object, int field) const$/;"	f	class:BorderMsgDescriptor
getFieldStructName	src/veins/base/messages/ChannelSenseRequest_m.cc	/^const char *ChannelSenseRequestDescriptor::getFieldStructName(void *object, int field) const$/;"	f	class:ChannelSenseRequestDescriptor
getFieldStructName	src/veins/base/messages/MacPkt_m.cc	/^const char *MacPktDescriptor::getFieldStructName(void *object, int field) const$/;"	f	class:MacPktDescriptor
getFieldStructName	src/veins/modules/application/platooning/messages/BikesMessage_m.cc	/^const char *BikesMessageDescriptor::getFieldStructName(void *object, int field) const$/;"	f	class:BikesMessageDescriptor
getFieldStructName	src/veins/modules/application/platooning/messages/ManeuverMessage_m.cc	/^const char *ManeuverMessageDescriptor::getFieldStructName(void *object, int field) const$/;"	f	class:ManeuverMessageDescriptor
getFieldStructName	src/veins/modules/application/platooning/messages/PlatooningBeacon_m.cc	/^const char *PlatooningBeaconDescriptor::getFieldStructName(void *object, int field) const$/;"	f	class:PlatooningBeaconDescriptor
getFieldStructName	src/veins/modules/application/platooning/messages/UnicastMessage_m.cc	/^const char *UnicastMessageDescriptor::getFieldStructName(void *object, int field) const$/;"	f	class:UnicastMessageDescriptor
getFieldStructName	src/veins/modules/application/platooning/messages/UnicastProtocolControlMessage_m.cc	/^const char *UnicastProtocolControlMessageDescriptor::getFieldStructName(void *object, int field) const$/;"	f	class:UnicastProtocolControlMessageDescriptor
getFieldStructName	src/veins/modules/messages/AirFrame11p_m.cc	/^const char *AirFrame11pDescriptor::getFieldStructName(void *object, int field) const$/;"	f	class:AirFrame11pDescriptor
getFieldStructName	src/veins/modules/messages/Mac80211Pkt_m.cc	/^const char *Mac80211PktDescriptor::getFieldStructName(void *object, int field) const$/;"	f	class:Mac80211PktDescriptor
getFieldStructName	src/veins/modules/messages/PhyControlMessage_m.cc	/^const char *PhyControlMessageDescriptor::getFieldStructName(void *object, int field) const$/;"	f	class:PhyControlMessageDescriptor
getFieldStructName	src/veins/modules/messages/WaveShortMessage_m.cc	/^const char *WaveShortMessageDescriptor::getFieldStructName(void *object, int field) const$/;"	f	class:WaveShortMessageDescriptor
getFieldStructPointer	src/veins/base/messages/AirFrame_m.cc	/^void *AirFrameDescriptor::getFieldStructPointer(void *object, int field, int i) const$/;"	f	class:Veins::AirFrameDescriptor
getFieldStructPointer	src/veins/base/messages/BorderMsg_m.cc	/^void *BorderMsgDescriptor::getFieldStructPointer(void *object, int field, int i) const$/;"	f	class:BorderMsgDescriptor
getFieldStructPointer	src/veins/base/messages/ChannelSenseRequest_m.cc	/^void *ChannelSenseRequestDescriptor::getFieldStructPointer(void *object, int field, int i) const$/;"	f	class:ChannelSenseRequestDescriptor
getFieldStructPointer	src/veins/base/messages/MacPkt_m.cc	/^void *MacPktDescriptor::getFieldStructPointer(void *object, int field, int i) const$/;"	f	class:MacPktDescriptor
getFieldStructPointer	src/veins/modules/application/platooning/messages/BikesMessage_m.cc	/^void *BikesMessageDescriptor::getFieldStructPointer(void *object, int field, int i) const$/;"	f	class:BikesMessageDescriptor
getFieldStructPointer	src/veins/modules/application/platooning/messages/ManeuverMessage_m.cc	/^void *ManeuverMessageDescriptor::getFieldStructPointer(void *object, int field, int i) const$/;"	f	class:ManeuverMessageDescriptor
getFieldStructPointer	src/veins/modules/application/platooning/messages/PlatooningBeacon_m.cc	/^void *PlatooningBeaconDescriptor::getFieldStructPointer(void *object, int field, int i) const$/;"	f	class:PlatooningBeaconDescriptor
getFieldStructPointer	src/veins/modules/application/platooning/messages/UnicastMessage_m.cc	/^void *UnicastMessageDescriptor::getFieldStructPointer(void *object, int field, int i) const$/;"	f	class:UnicastMessageDescriptor
getFieldStructPointer	src/veins/modules/application/platooning/messages/UnicastProtocolControlMessage_m.cc	/^void *UnicastProtocolControlMessageDescriptor::getFieldStructPointer(void *object, int field, int i) const$/;"	f	class:UnicastProtocolControlMessageDescriptor
getFieldStructPointer	src/veins/modules/messages/AirFrame11p_m.cc	/^void *AirFrame11pDescriptor::getFieldStructPointer(void *object, int field, int i) const$/;"	f	class:AirFrame11pDescriptor
getFieldStructPointer	src/veins/modules/messages/Mac80211Pkt_m.cc	/^void *Mac80211PktDescriptor::getFieldStructPointer(void *object, int field, int i) const$/;"	f	class:Mac80211PktDescriptor
getFieldStructPointer	src/veins/modules/messages/PhyControlMessage_m.cc	/^void *PhyControlMessageDescriptor::getFieldStructPointer(void *object, int field, int i) const$/;"	f	class:PhyControlMessageDescriptor
getFieldStructPointer	src/veins/modules/messages/WaveShortMessage_m.cc	/^void *WaveShortMessageDescriptor::getFieldStructPointer(void *object, int field, int i) const$/;"	f	class:WaveShortMessageDescriptor
getFieldTypeFlags	src/veins/base/messages/AirFrame_m.cc	/^unsigned int AirFrameDescriptor::getFieldTypeFlags(void *object, int field) const$/;"	f	class:Veins::AirFrameDescriptor
getFieldTypeFlags	src/veins/base/messages/BorderMsg_m.cc	/^unsigned int BorderMsgDescriptor::getFieldTypeFlags(void *object, int field) const$/;"	f	class:BorderMsgDescriptor
getFieldTypeFlags	src/veins/base/messages/ChannelSenseRequest_m.cc	/^unsigned int ChannelSenseRequestDescriptor::getFieldTypeFlags(void *object, int field) const$/;"	f	class:ChannelSenseRequestDescriptor
getFieldTypeFlags	src/veins/base/messages/MacPkt_m.cc	/^unsigned int MacPktDescriptor::getFieldTypeFlags(void *object, int field) const$/;"	f	class:MacPktDescriptor
getFieldTypeFlags	src/veins/modules/application/platooning/messages/BikesMessage_m.cc	/^unsigned int BikesMessageDescriptor::getFieldTypeFlags(void *object, int field) const$/;"	f	class:BikesMessageDescriptor
getFieldTypeFlags	src/veins/modules/application/platooning/messages/ManeuverMessage_m.cc	/^unsigned int ManeuverMessageDescriptor::getFieldTypeFlags(void *object, int field) const$/;"	f	class:ManeuverMessageDescriptor
getFieldTypeFlags	src/veins/modules/application/platooning/messages/PlatooningBeacon_m.cc	/^unsigned int PlatooningBeaconDescriptor::getFieldTypeFlags(void *object, int field) const$/;"	f	class:PlatooningBeaconDescriptor
getFieldTypeFlags	src/veins/modules/application/platooning/messages/UnicastMessage_m.cc	/^unsigned int UnicastMessageDescriptor::getFieldTypeFlags(void *object, int field) const$/;"	f	class:UnicastMessageDescriptor
getFieldTypeFlags	src/veins/modules/application/platooning/messages/UnicastProtocolControlMessage_m.cc	/^unsigned int UnicastProtocolControlMessageDescriptor::getFieldTypeFlags(void *object, int field) const$/;"	f	class:UnicastProtocolControlMessageDescriptor
getFieldTypeFlags	src/veins/modules/messages/AirFrame11p_m.cc	/^unsigned int AirFrame11pDescriptor::getFieldTypeFlags(void *object, int field) const$/;"	f	class:AirFrame11pDescriptor
getFieldTypeFlags	src/veins/modules/messages/Mac80211Pkt_m.cc	/^unsigned int Mac80211PktDescriptor::getFieldTypeFlags(void *object, int field) const$/;"	f	class:Mac80211PktDescriptor
getFieldTypeFlags	src/veins/modules/messages/PhyControlMessage_m.cc	/^unsigned int PhyControlMessageDescriptor::getFieldTypeFlags(void *object, int field) const$/;"	f	class:PhyControlMessageDescriptor
getFieldTypeFlags	src/veins/modules/messages/WaveShortMessage_m.cc	/^unsigned int WaveShortMessageDescriptor::getFieldTypeFlags(void *object, int field) const$/;"	f	class:WaveShortMessageDescriptor
getFieldTypeString	src/veins/base/messages/AirFrame_m.cc	/^const char *AirFrameDescriptor::getFieldTypeString(void *object, int field) const$/;"	f	class:Veins::AirFrameDescriptor
getFieldTypeString	src/veins/base/messages/BorderMsg_m.cc	/^const char *BorderMsgDescriptor::getFieldTypeString(void *object, int field) const$/;"	f	class:BorderMsgDescriptor
getFieldTypeString	src/veins/base/messages/ChannelSenseRequest_m.cc	/^const char *ChannelSenseRequestDescriptor::getFieldTypeString(void *object, int field) const$/;"	f	class:ChannelSenseRequestDescriptor
getFieldTypeString	src/veins/base/messages/MacPkt_m.cc	/^const char *MacPktDescriptor::getFieldTypeString(void *object, int field) const$/;"	f	class:MacPktDescriptor
getFieldTypeString	src/veins/modules/application/platooning/messages/BikesMessage_m.cc	/^const char *BikesMessageDescriptor::getFieldTypeString(void *object, int field) const$/;"	f	class:BikesMessageDescriptor
getFieldTypeString	src/veins/modules/application/platooning/messages/ManeuverMessage_m.cc	/^const char *ManeuverMessageDescriptor::getFieldTypeString(void *object, int field) const$/;"	f	class:ManeuverMessageDescriptor
getFieldTypeString	src/veins/modules/application/platooning/messages/PlatooningBeacon_m.cc	/^const char *PlatooningBeaconDescriptor::getFieldTypeString(void *object, int field) const$/;"	f	class:PlatooningBeaconDescriptor
getFieldTypeString	src/veins/modules/application/platooning/messages/UnicastMessage_m.cc	/^const char *UnicastMessageDescriptor::getFieldTypeString(void *object, int field) const$/;"	f	class:UnicastMessageDescriptor
getFieldTypeString	src/veins/modules/application/platooning/messages/UnicastProtocolControlMessage_m.cc	/^const char *UnicastProtocolControlMessageDescriptor::getFieldTypeString(void *object, int field) const$/;"	f	class:UnicastProtocolControlMessageDescriptor
getFieldTypeString	src/veins/modules/messages/AirFrame11p_m.cc	/^const char *AirFrame11pDescriptor::getFieldTypeString(void *object, int field) const$/;"	f	class:AirFrame11pDescriptor
getFieldTypeString	src/veins/modules/messages/Mac80211Pkt_m.cc	/^const char *Mac80211PktDescriptor::getFieldTypeString(void *object, int field) const$/;"	f	class:Mac80211PktDescriptor
getFieldTypeString	src/veins/modules/messages/PhyControlMessage_m.cc	/^const char *PhyControlMessageDescriptor::getFieldTypeString(void *object, int field) const$/;"	f	class:PhyControlMessageDescriptor
getFieldTypeString	src/veins/modules/messages/WaveShortMessage_m.cc	/^const char *WaveShortMessageDescriptor::getFieldTypeString(void *object, int field) const$/;"	f	class:WaveShortMessageDescriptor
getFollowerVehicleId	src/veins/modules/application/platooning/messages/BikesMessage_m.cc	/^int BikesMessage::getFollowerVehicleId() const$/;"	f	class:BikesMessage
getFollowerVehicleId	src/veins/modules/application/platooning/messages/ManeuverMessage_m.cc	/^int ManeuverMessage::getFollowerVehicleId() const$/;"	f	class:ManeuverMessage
getFragmentation	src/veins/modules/messages/Mac80211Pkt_m.cc	/^int Mac80211Pkt::getFragmentation() const$/;"	f	class:Mac80211Pkt
getFrameDuration	src/veins/modules/mac/ieee80211p/Mac1609_4.cc	/^simtime_t Mac1609_4::getFrameDuration(int payloadLengthBits, enum PHY_MCS mcs) const {$/;"	f	class:Mac1609_4
getFrontVehicleId	src/veins/modules/application/platooning/messages/BikesMessage_m.cc	/^int BikesMessage::getFrontVehicleId() const$/;"	f	class:BikesMessage
getFrontVehicleId	src/veins/modules/application/platooning/messages/ManeuverMessage_m.cc	/^int ManeuverMessage::getFrontVehicleId() const$/;"	f	class:ManeuverMessage
getGateList	src/veins/base/connectionManager/BaseConnectionManager.cc	/^const NicEntry::GateList& BaseConnectionManager::getGateList(int nicID) const$/;"	f	class:BaseConnectionManager
getGateList	src/veins/base/connectionManager/NicEntry.h	/^    const GateList& getGateList(){$/;"	f	class:NicEntry
getGenericInformation	src/veins/modules/mobility/traci/TraCICommandInterface.cc	/^void TraCICommandInterface::Vehicle::getGenericInformation(int type, const void* params, int paramsLength, void *result) {$/;"	f	class:Veins::TraCICommandInterface::Vehicle
getID	src/veins/base/phyLayer/MappingBase.h	/^	DimensionIdType getID() const { return id; }$/;"	f	class:Dimension
getId	src/veins/base/messages/AirFrame_m.cc	/^long AirFrame::getId() const$/;"	f	class:Veins::AirFrame
getIfExists	src/veins/modules/obstacle/ObstacleControl.h	/^		ObstacleControl* getIfExists() {$/;"	f	class:Veins::ObstacleControlAccess
getIfExists	src/veins/modules/world/annotations/AnnotationManager.h	/^		AnnotationManager* getIfExists() {$/;"	f	class:Veins::AnnotationManagerAccess
getInformationDS	src/veins/modules/messages/Mac80211Pkt_m.cc	/^int Mac80211Pkt::getInformationDS() const$/;"	f	class:Mac80211Pkt
getInterpolator	src/veins/base/phyLayer/Interpolation.h	/^	const interpolator_type&  getInterpolator() const {$/;"	f	class:ConstInterpolateableIterator
getIntersections	src/veins/base/phyLayer/ChannelInfo.cc	/^void ChannelInfo::getIntersections( const AirFrameMatrix& airFrames,$/;"	f	class:ChannelInfo
getIntplValue	src/veins/base/phyLayer/Interpolation.h	/^	interpolated getIntplValue(key_cref_type pos) const {$/;"	f	class:InterpolateableMap
getJunctionIds	src/veins/modules/mobility/traci/TraCICommandInterface.cc	/^std::list<std::string> TraCICommandInterface::getJunctionIds() {$/;"	f	class:Veins::TraCICommandInterface
getLaneChangeAction	src/veins/modules/mobility/traci/TraCICommandInterface.cc	/^int TraCICommandInterface::Vehicle::getLaneChangeAction() {$/;"	f	class:Veins::TraCICommandInterface::Vehicle
getLaneId	src/veins/modules/mobility/traci/TraCICommandInterface.cc	/^std::string TraCICommandInterface::Vehicle::getLaneId() {$/;"	f	class:Veins::TraCICommandInterface::Vehicle
getLaneIds	src/veins/modules/mobility/traci/TraCICommandInterface.cc	/^std::list<std::string> TraCICommandInterface::getLaneIds() {$/;"	f	class:Veins::TraCICommandInterface
getLaneIndex	src/veins/modules/mobility/traci/TraCICommandInterface.cc	/^int32_t TraCICommandInterface::Vehicle::getLaneIndex() {$/;"	f	class:Veins::TraCICommandInterface::Vehicle
getLanePosition	src/veins/modules/mobility/traci/TraCICommandInterface.cc	/^double TraCICommandInterface::Vehicle::getLanePosition() {$/;"	f	class:Veins::TraCICommandInterface::Vehicle
getLanesCount	src/veins/modules/mobility/traci/TraCICommandInterface.cc	/^unsigned int TraCICommandInterface::Vehicle::getLanesCount() {$/;"	f	class:Veins::TraCICommandInterface::Vehicle
getLastHopMac	src/veins/base/utils/MacToNetwControlInfo.h	/^	const LAddress::L2Type& getLastHopMac() const {$/;"	f	class:MacToNetwControlInfo
getLength	src/veins/modules/mobility/traci/TraCICommandInterface.cc	/^double TraCICommandInterface::Lane::getLength() {$/;"	f	class:Veins::TraCICommandInterface::Lane
getLonLat	src/veins/modules/mobility/traci/TraCICommandInterface.cc	/^std::pair<double, double> TraCICommandInterface::getLonLat(const Coord& coord) {$/;"	f	class:Veins::TraCICommandInterface
getMACAddress	src/veins/base/modules/BaseMacLayer.h	/^    const LAddress::L2Type& getMACAddress() { return myMacAddr; }$/;"	f	class:BaseMacLayer
getMCS	src/veins/modules/utility/ConstsPhy.h	/^inline enum PHY_MCS getMCS(uint64_t datarate, enum Bandwidth bw) {$/;"	f
getManagedHosts	src/veins/modules/mobility/traci/TraCIScenarioManager.h	/^		const std::map<std::string, cModule*>& getManagedHosts() {$/;"	f	class:Veins::TraCIScenarioManager
getManagedModule	src/veins/modules/mobility/traci/TraCIScenarioManager.cc	/^cModule* TraCIScenarioManager::getManagedModule(std::string nodeId) {$/;"	f	class:TraCIScenarioManager
getManager	src/veins/modules/mobility/traci/TraCIMobility.h	/^		virtual TraCIScenarioManager* getManager() const {$/;"	f	class:Veins::TraCIMobility
getMaxSpeed	src/veins/modules/mobility/traci/TraCICommandInterface.cc	/^double TraCICommandInterface::Lane::getMaxSpeed() {$/;"	f	class:Veins::TraCICommandInterface::Lane
getMcs	src/veins/modules/messages/PhyControlMessage_m.cc	/^int PhyControlMessage::getMcs() const$/;"	f	class:PhyControlMessage
getMeanSpeed	src/veins/modules/mobility/traci/TraCICommandInterface.cc	/^double TraCICommandInterface::Lane::getMeanSpeed() {$/;"	f	class:Veins::TraCICommandInterface::Lane
getMeanSpeed	src/veins/modules/mobility/traci/TraCICommandInterface.cc	/^double TraCICommandInterface::Road::getMeanSpeed() {$/;"	f	class:Veins::TraCICommandInterface::Road
getMessageType	src/veins/modules/application/platooning/messages/BikesMessage_m.cc	/^int BikesMessage::getMessageType() const$/;"	f	class:BikesMessage
getMessageType	src/veins/modules/application/platooning/messages/ManeuverMessage_m.cc	/^int ManeuverMessage::getMessageType() const$/;"	f	class:ManeuverMessage
getMobilityModule	src/veins/base/connectionManager/ChannelAccess.h	/^	virtual ChannelMobilityPtrType getMobilityModule() { return ChannelMobilityAccessType::get(this); }$/;"	f	class:Veins::ChannelAccess
getNDBPS	src/veins/modules/utility/ConstsPhy.h	/^inline uint32_t getNDBPS(enum PHY_MCS mcs) {$/;"	f
getName	src/veins/base/phyLayer/MappingBase.h	/^	DimensionNameType getName() const{$/;"	f	class:Dimension
getNbRadioChannels	src/veins/base/phyLayer/BasePhyLayer.cc	/^int BasePhyLayer::getNbRadioChannels() {$/;"	f	class:BasePhyLayer
getNextHopMac	src/veins/base/utils/NetwToMacControlInfo.h	/^    virtual const LAddress::L2Type& getNextHopMac() const {$/;"	f	class:NetwToMacControlInfo
getNextPosition	src/veins/base/phyLayer/Interpolation.h	/^	key_type getNextPosition(){$/;"	f	class:ConstInterpolateableIterator
getNextPosition	src/veins/base/phyLayer/MappingBase.h	/^	virtual const Argument& getNextPosition() const {$/;"	f	class:SimpleConstMappingIterator
getNextPosition	src/veins/base/phyLayer/MappingUtils.h	/^	virtual const Argument& getNextPosition() const { assert(false); return *((Argument *)NULL); }$/;"	f	class:LinearIntplMappingIterator
getNextPosition	src/veins/base/phyLayer/MappingUtils.h	/^	virtual const Argument& getNextPosition() const { return iterator->getNextPosition(); }$/;"	f	class:ConstMappingIteratorWrapper
getNextPosition	src/veins/base/phyLayer/MappingUtils.h	/^	virtual const Argument& getNextPosition() const { return nextPosition; }$/;"	f	class:BaseDelayedIterator
getNextPosition	src/veins/base/phyLayer/MappingUtils.h	/^	virtual const Argument& getNextPosition() const { return origIterator->getNextPosition(); }$/;"	f	class:BaseFilteredIterator
getNextPosition	src/veins/base/phyLayer/MappingUtils.h	/^	virtual const Argument& getNextPosition() const {$/;"	f	class:MultiDimMappingIterator
getNextPosition	src/veins/base/phyLayer/MappingUtils.h	/^	virtual const Argument& getNextPosition() const {$/;"	f	class:TimeMappingIterator
getNextPosition	src/veins/base/phyLayer/PhyUtils.h	/^	virtual const Argument& getNextPosition() const {$/;"	f	class:RSAMConstMappingIterator
getNextValue	src/veins/base/phyLayer/Interpolation.h	/^	interpolated getNextValue() const{$/;"	f	class:ConstInterpolateableIterator
getNode	src/veins/base/modules/BaseModule.h	/^    const cModule *const getNode() const {$/;"	f	class:BaseModule
getOfdmDatarate	src/veins/modules/utility/ConstsPhy.h	/^inline uint64_t getOfdmDatarate(enum PHY_MCS mcs, enum Bandwidth bw) {$/;"	f
getOutGateTo	src/veins/base/connectionManager/BaseConnectionManager.cc	/^const cGate* BaseConnectionManager::getOutGateTo(const NicEntry* nic,$/;"	f	class:BaseConnectionManager
getOutGateTo	src/veins/base/connectionManager/NicEntry.h	/^    const cGate* getOutGateTo(const NicEntry* to)$/;"	f	class:NicEntry
getOutOfRangeVal	src/veins/base/phyLayer/Interpolation.h	/^	mapped_cref_type getOutOfRangeVal(void) const {$/;"	f	class:InterpolatorBase
getParametersFromXML	src/veins/base/phyLayer/BasePhyLayer.cc	/^void BasePhyLayer::getParametersFromXML(cXMLElement* xmlData, ParameterMap& outputMap) {$/;"	f	class:BasePhyLayer
getParkingState	src/veins/modules/mobility/traci/TraCIMobility.h	/^		virtual bool getParkingState() const {$/;"	f	class:Veins::TraCIMobility
getPgs	src/veins/base/modules/BaseWorldUtility.h	/^    const Coord* getPgs(){$/;"	f	class:BaseWorldUtility
getPhyHeaderLength	src/veins/base/phyLayer/BasePhyLayer.cc	/^int BasePhyLayer::getPhyHeaderLength() {$/;"	f	class:BasePhyLayer
getPlannedRoadIds	src/veins/modules/mobility/traci/TraCICommandInterface.cc	/^std::list<std::string> TraCICommandInterface::Vehicle::getPlannedRoadIds() {$/;"	f	class:Veins::TraCICommandInterface::Vehicle
getPlatoonFormation	src/veins/modules/application/platooning/messages/BikesMessage_m.cc	/^int BikesMessage::getPlatoonFormation(unsigned int k) const$/;"	f	class:BikesMessage
getPlatoonFormation	src/veins/modules/application/platooning/messages/ManeuverMessage_m.cc	/^int ManeuverMessage::getPlatoonFormation(unsigned int k) const$/;"	f	class:ManeuverMessage
getPlatoonFormationArraySize	src/veins/modules/application/platooning/messages/BikesMessage_m.cc	/^unsigned int BikesMessage::getPlatoonFormationArraySize() const$/;"	f	class:BikesMessage
getPlatoonFormationArraySize	src/veins/modules/application/platooning/messages/ManeuverMessage_m.cc	/^unsigned int ManeuverMessage::getPlatoonFormationArraySize() const$/;"	f	class:ManeuverMessage
getPlatoonId	src/veins/modules/application/platooning/messages/BikesMessage_m.cc	/^int BikesMessage::getPlatoonId() const$/;"	f	class:BikesMessage
getPlatoonId	src/veins/modules/application/platooning/messages/ManeuverMessage_m.cc	/^int ManeuverMessage::getPlatoonId() const$/;"	f	class:ManeuverMessage
getPlatoonLane	src/veins/modules/application/platooning/messages/BikesMessage_m.cc	/^int BikesMessage::getPlatoonLane() const$/;"	f	class:BikesMessage
getPlatoonLane	src/veins/modules/application/platooning/messages/ManeuverMessage_m.cc	/^int ManeuverMessage::getPlatoonLane() const$/;"	f	class:ManeuverMessage
getPlatoonSpeed	src/veins/modules/application/platooning/messages/BikesMessage_m.cc	/^double BikesMessage::getPlatoonSpeed() const$/;"	f	class:BikesMessage
getPlatoonSpeed	src/veins/modules/application/platooning/messages/ManeuverMessage_m.cc	/^double ManeuverMessage::getPlatoonSpeed() const$/;"	f	class:ManeuverMessage
getPolicy	src/veins/base/messages/BorderMsg_m.cc	/^int BorderMsg::getPolicy() const$/;"	f	class:BorderMsg
getPolygonIds	src/veins/modules/mobility/traci/TraCICommandInterface.cc	/^std::list<std::string> TraCICommandInterface::getPolygonIds() {$/;"	f	class:Veins::TraCICommandInterface
getPosition	src/veins/base/phyLayer/Interpolation.h	/^	key_cref_type getPosition() const{$/;"	f	class:ConstInterpolateableIterator
getPosition	src/veins/base/phyLayer/MappingBase.h	/^	virtual const Argument& getPosition() const { return position; }$/;"	f	class:SimpleConstMappingIterator
getPosition	src/veins/base/phyLayer/MappingUtils.h	/^	virtual const Argument& getPosition() const { return iterator->getPosition(); }$/;"	f	class:ConstMappingIteratorWrapper
getPosition	src/veins/base/phyLayer/MappingUtils.h	/^	virtual const Argument& getPosition() const { return origIterator->getPosition(); }$/;"	f	class:BaseFilteredIterator
getPosition	src/veins/base/phyLayer/MappingUtils.h	/^	virtual const Argument& getPosition() const {$/;"	f	class:BaseDelayedIterator
getPosition	src/veins/base/phyLayer/MappingUtils.h	/^	virtual const Argument& getPosition() const {$/;"	f	class:LinearIntplMappingIterator
getPosition	src/veins/base/phyLayer/MappingUtils.h	/^	virtual const Argument& getPosition() const {$/;"	f	class:MultiDimMappingIterator
getPosition	src/veins/base/phyLayer/MappingUtils.h	/^	virtual const Argument& getPosition() const {$/;"	f	class:TimeMappingIterator
getPosition	src/veins/base/phyLayer/PhyUtils.h	/^	virtual const Argument& getPosition() const {$/;"	f	class:RSAMConstMappingIterator
getPosition	src/veins/modules/mobility/traci/TraCICommandInterface.cc	/^Coord TraCICommandInterface::Junction::getPosition() {$/;"	f	class:Veins::TraCICommandInterface::Junction
getPositionAt	src/veins/base/utils/Move.h	/^    virtual Coord getPositionAt(simtime_t_cref actualTime = simTime()) const$/;"	f	class:Move
getPositionAt	src/veins/modules/mobility/traci/TraCIMobility.h	/^		virtual Coord getPositionAt(const simtime_t& t) const {$/;"	f	class:Veins::TraCIMobility
getPositionX	src/veins/modules/application/platooning/messages/PlatooningBeacon_m.cc	/^double PlatooningBeacon::getPositionX() const$/;"	f	class:PlatooningBeacon
getPositionY	src/veins/modules/application/platooning/messages/PlatooningBeacon_m.cc	/^double PlatooningBeacon::getPositionY() const$/;"	f	class:PlatooningBeacon
getPriority	src/veins/modules/application/platooning/messages/UnicastMessage_m.cc	/^int UnicastMessage::getPriority() const$/;"	f	class:UnicastMessage
getPriority	src/veins/modules/messages/WaveShortMessage_m.cc	/^int WaveShortMessage::getPriority() const$/;"	f	class:WaveShortMessage
getPropagationDelay	src/veins/base/phyLayer/Signal.cc	/^simtime_t_cref Signal::getPropagationDelay() const {$/;"	f	class:Signal
getProperty	src/veins/base/messages/AirFrame_m.cc	/^const char *AirFrameDescriptor::getProperty(const char *propertyname) const$/;"	f	class:Veins::AirFrameDescriptor
getProperty	src/veins/base/messages/BorderMsg_m.cc	/^const char *BorderMsgDescriptor::getProperty(const char *propertyname) const$/;"	f	class:BorderMsgDescriptor
getProperty	src/veins/base/messages/ChannelSenseRequest_m.cc	/^const char *ChannelSenseRequestDescriptor::getProperty(const char *propertyname) const$/;"	f	class:ChannelSenseRequestDescriptor
getProperty	src/veins/base/messages/MacPkt_m.cc	/^const char *MacPktDescriptor::getProperty(const char *propertyname) const$/;"	f	class:MacPktDescriptor
getProperty	src/veins/modules/application/platooning/messages/BikesMessage_m.cc	/^const char *BikesMessageDescriptor::getProperty(const char *propertyname) const$/;"	f	class:BikesMessageDescriptor
getProperty	src/veins/modules/application/platooning/messages/ManeuverMessage_m.cc	/^const char *ManeuverMessageDescriptor::getProperty(const char *propertyname) const$/;"	f	class:ManeuverMessageDescriptor
getProperty	src/veins/modules/application/platooning/messages/PlatooningBeacon_m.cc	/^const char *PlatooningBeaconDescriptor::getProperty(const char *propertyname) const$/;"	f	class:PlatooningBeaconDescriptor
getProperty	src/veins/modules/application/platooning/messages/UnicastMessage_m.cc	/^const char *UnicastMessageDescriptor::getProperty(const char *propertyname) const$/;"	f	class:UnicastMessageDescriptor
getProperty	src/veins/modules/application/platooning/messages/UnicastProtocolControlMessage_m.cc	/^const char *UnicastProtocolControlMessageDescriptor::getProperty(const char *propertyname) const$/;"	f	class:UnicastProtocolControlMessageDescriptor
getProperty	src/veins/modules/messages/AirFrame11p_m.cc	/^const char *AirFrame11pDescriptor::getProperty(const char *propertyname) const$/;"	f	class:AirFrame11pDescriptor
getProperty	src/veins/modules/messages/Mac80211Pkt_m.cc	/^const char *Mac80211PktDescriptor::getProperty(const char *propertyname) const$/;"	f	class:Mac80211PktDescriptor
getProperty	src/veins/modules/messages/PhyControlMessage_m.cc	/^const char *PhyControlMessageDescriptor::getProperty(const char *propertyname) const$/;"	f	class:PhyControlMessageDescriptor
getProperty	src/veins/modules/messages/WaveShortMessage_m.cc	/^const char *WaveShortMessageDescriptor::getProperty(const char *propertyname) const$/;"	f	class:WaveShortMessageDescriptor
getProtocolId	src/veins/base/messages/AirFrame_m.cc	/^int AirFrame::getProtocolId() const$/;"	f	class:Veins::AirFrame
getPsc	src/veins/modules/messages/WaveShortMessage_m.cc	/^const char * WaveShortMessage::getPsc() const$/;"	f	class:WaveShortMessage
getPsid	src/veins/modules/messages/WaveShortMessage_m.cc	/^int WaveShortMessage::getPsid() const$/;"	f	class:WaveShortMessage
getQpskBer	src/veins/modules/phy/NistErrorRate.cc	/^NistErrorRate::getQpskBer (double snr)$/;"	f	class:NistErrorRate
getRSSI	src/veins/base/phyLayer/ChannelState.cc	/^double ChannelState::getRSSI() const {$/;"	f	class:ChannelState
getRSSI	src/veins/base/utils/MacToNetwControlInfo.h	/^	virtual const double getRSSI() {$/;"	f	class:MacToNetwControlInfo
getRadarMeasurements	src/veins/modules/mobility/traci/TraCICommandInterface.cc	/^void TraCICommandInterface::Vehicle::getRadarMeasurements(double &distance, double &relativeSpeed) {$/;"	f	class:Veins::TraCICommandInterface::Vehicle
getRadioState	src/veins/base/phyLayer/BasePhyLayer.cc	/^int BasePhyLayer::getRadioState() {$/;"	f	class:BasePhyLayer
getRadioState	src/veins/modules/phy/PhyLayer80211p.cc	/^int PhyLayer80211p::getRadioState() {$/;"	f	class:PhyLayer80211p
getRandomPosition	src/veins/base/modules/BaseMobility.h	/^	Coord getRandomPosition() { return world->getRandomPosition();}$/;"	f	class:BaseMobility
getRandomPosition	src/veins/base/modules/BaseWorldUtility.cc	/^Coord BaseWorldUtility::getRandomPosition()$/;"	f	class:BaseWorldUtility
getReceivingPower	src/veins/base/phyLayer/Signal_.h	/^	MultipliedMapping* getReceivingPower() {$/;"	f	class:Signal
getReceptionEnd	src/veins/base/phyLayer/Signal.cc	/^simtime_t Signal::getReceptionEnd() const {$/;"	f	class:Signal
getReceptionGate	src/veins/base/phyLayer/Signal.cc	/^cGate *Signal::getReceptionGate() const$/;"	f	class:Signal
getReceptionModule	src/veins/base/phyLayer/Signal_.h	/^	cModule *getReceptionModule() const {return receiverModuleID < 0 ? NULL : simulation.getModule(receiverModuleID);}$/;"	f	class:Signal
getReceptionStart	src/veins/base/phyLayer/Signal.cc	/^simtime_t Signal::getReceptionStart() const {$/;"	f	class:Signal
getRecipientAddress	src/veins/modules/messages/WaveShortMessage_m.cc	/^int WaveShortMessage::getRecipientAddress() const$/;"	f	class:WaveShortMessage
getRecvPower_dBm	src/veins/modules/application/platooning/messages/UnicastMessage_m.cc	/^double UnicastMessage::getRecvPower_dBm() const$/;"	f	class:UnicastMessage
getRecvPower_dBm	src/veins/modules/phy/DeciderResult80211.h	/^	double getRecvPower_dBm() const { return recvPower_dBm; }$/;"	f	class:DeciderResult80211
getRefMapping	src/veins/base/phyLayer/MappingUtils.h	/^	ConstMapping* getRefMapping() {$/;"	f	class:ConcatConstMapping
getRelayerId	src/veins/modules/application/platooning/messages/PlatooningBeacon_m.cc	/^int PlatooningBeacon::getRelayerId() const$/;"	f	class:PlatooningBeacon
getRequest	src/veins/base/phyLayer/BaseDecider.h	/^		ChannelSenseRequest* getRequest() const { return first; }$/;"	f	struct:BaseDecider::__anon1
getResult	src/veins/base/messages/ChannelSenseRequest_m.cc	/^ChannelState& ChannelSenseRequest::getResult()$/;"	f	class:ChannelSenseRequest
getResult	src/veins/base/messages/ChannelSenseRequest_m.h	/^    virtual const ChannelState& getResult() const {return const_cast<ChannelSenseRequest*>(this)->getResult();}$/;"	f	class:ChannelSenseRequest
getRetry	src/veins/modules/messages/Mac80211Pkt_m.cc	/^bool Mac80211Pkt::getRetry() const$/;"	f	class:Mac80211Pkt
getRoadId	src/veins/modules/mobility/traci/TraCICommandInterface.cc	/^std::string TraCICommandInterface::Lane::getRoadId() {$/;"	f	class:Veins::TraCICommandInterface::Lane
getRoadId	src/veins/modules/mobility/traci/TraCICommandInterface.cc	/^std::string TraCICommandInterface::Vehicle::getRoadId() {$/;"	f	class:Veins::TraCICommandInterface::Vehicle
getRoadId	src/veins/modules/mobility/traci/TraCIMobility.h	/^		virtual std::string getRoadId() const {$/;"	f	class:Veins::TraCIMobility
getRoadIds	src/veins/modules/mobility/traci/TraCICommandInterface.cc	/^std::list<std::string> TraCICommandInterface::Route::getRoadIds() {$/;"	f	class:Veins::TraCICommandInterface::Route
getRoadIds	src/veins/modules/mobility/traci/TraCICommandInterface.cc	/^std::list<std::string> TraCICommandInterface::getRoadIds() {$/;"	f	class:Veins::TraCICommandInterface
getRouteId	src/veins/modules/mobility/traci/TraCICommandInterface.cc	/^std::string TraCICommandInterface::Vehicle::getRouteId() {$/;"	f	class:Veins::TraCICommandInterface::Vehicle
getRouteIds	src/veins/modules/mobility/traci/TraCICommandInterface.cc	/^std::list<std::string> TraCICommandInterface::getRouteIds() {$/;"	f	class:Veins::TraCICommandInterface
getRunId	src/veins/base/utils/MiXiMDefs.h	/^	const char* getRunId() const {$/;"	f	class:simsignalwrap_t
getSecurityType	src/veins/modules/messages/WaveShortMessage_m.cc	/^int WaveShortMessage::getSecurityType() const$/;"	f	class:WaveShortMessage
getSenderAddress	src/veins/modules/messages/WaveShortMessage_m.cc	/^int WaveShortMessage::getSenderAddress() const$/;"	f	class:WaveShortMessage
getSenderPos	src/veins/modules/messages/WaveShortMessage_m.cc	/^Coord& WaveShortMessage::getSenderPos()$/;"	f	class:WaveShortMessage
getSenderPos	src/veins/modules/messages/WaveShortMessage_m.h	/^    virtual const Coord& getSenderPos() const {return const_cast<WaveShortMessage*>(this)->getSenderPos();}$/;"	f	class:WaveShortMessage
getSendingEnd	src/veins/base/phyLayer/Signal.cc	/^simtime_t Signal::getSendingEnd() const {$/;"	f	class:Signal
getSendingGate	src/veins/base/phyLayer/Signal.cc	/^cGate *Signal::getSendingGate() const$/;"	f	class:Signal
getSendingModule	src/veins/base/phyLayer/Signal_.h	/^	cModule *getSendingModule() const {return senderModuleID < 0 ? NULL : simulation.getModule(senderModuleID);}$/;"	f	class:Signal
getSendingStart	src/veins/base/phyLayer/Signal.cc	/^simtime_t_cref Signal::getSendingStart() const {$/;"	f	class:Signal
getSenseMode	src/veins/base/messages/ChannelSenseRequest_m.cc	/^int ChannelSenseRequest::getSenseMode() const$/;"	f	class:ChannelSenseRequest
getSenseStart	src/veins/base/phyLayer/BaseDecider.h	/^		simtime_t_cref getSenseStart() const { return second; }$/;"	f	struct:BaseDecider::__anon1
getSenseTimeout	src/veins/base/messages/ChannelSenseRequest_m.cc	/^simtime_t ChannelSenseRequest::getSenseTimeout() const$/;"	f	class:ChannelSenseRequest
getSequenceControl	src/veins/modules/messages/Mac80211Pkt_m.cc	/^int Mac80211Pkt::getSequenceControl() const$/;"	f	class:Mac80211Pkt
getSequenceId	src/veins/base/messages/MacPkt_m.cc	/^long MacPkt::getSequenceId() const$/;"	f	class:MacPkt
getSequenceNumber	src/veins/modules/application/platooning/messages/PlatooningBeacon_m.cc	/^int PlatooningBeacon::getSequenceNumber() const$/;"	f	class:PlatooningBeacon
getSequenceNumber	src/veins/modules/application/platooning/messages/UnicastMessage_m.cc	/^int UnicastMessage::getSequenceNumber() const$/;"	f	class:UnicastMessage
getSerial	src/veins/modules/messages/WaveShortMessage_m.cc	/^int WaveShortMessage::getSerial() const$/;"	f	class:WaveShortMessage
getShape	src/veins/modules/mobility/traci/TraCICommandInterface.cc	/^std::list<Coord> TraCICommandInterface::Lane::getShape() {$/;"	f	class:Veins::TraCICommandInterface::Lane
getShape	src/veins/modules/mobility/traci/TraCICommandInterface.cc	/^std::list<Coord> TraCICommandInterface::Polygon::getShape() {$/;"	f	class:Veins::TraCICommandInterface::Polygon
getShape	src/veins/modules/obstacle/Obstacle.cc	/^const Obstacle::Coords& Obstacle::getShape() const {$/;"	f	class:Obstacle
getSignal	src/veins/base/messages/AirFrame_m.cc	/^Signal& AirFrame::getSignal()$/;"	f	class:Veins::AirFrame
getSignal	src/veins/base/messages/AirFrame_m.h	/^    virtual const Signal& getSignal() const {return const_cast<AirFrame*>(this)->getSignal();}$/;"	f	class:Veins::AirFrame
getSignal	src/veins/base/phyLayer/MacToPhyControlInfo.h	/^    static Signal *const getSignal(cMessage *const pMsg) {$/;"	f	class:MacToPhyControlInfo
getSignalFromControlInfo	src/veins/base/phyLayer/MacToPhyControlInfo.h	/^    static Signal *const getSignalFromControlInfo(cObject *const pCtrlInfo) {$/;"	f	class:MacToPhyControlInfo
getSignalState	src/veins/base/phyLayer/BaseDecider.cc	/^int BaseDecider::getSignalState(AirFrame* frame) {$/;"	f	class:BaseDecider
getSignalState	src/veins/modules/phy/Decider80211p.cc	/^int Decider80211p::getSignalState(AirFrame* frame) {$/;"	f	class:Decider80211p
getSignals	src/veins/modules/mobility/traci/TraCIMobility.h	/^		virtual TraCIScenarioManager::VehicleSignal getSignals() const {$/;"	f	class:Veins::TraCIMobility
getSimTime	src/veins/base/phyLayer/BasePhyLayer.cc	/^simtime_t BasePhyLayer::getSimTime() {$/;"	f	class:BasePhyLayer
getSize	src/veins/base/connectionManager/BaseConnectionManager.h	/^		unsigned getSize() { return size; }$/;"	f	class:BaseConnectionManager::CoordSet
getSnr	src/veins/modules/phy/DeciderResult80211.h	/^	double getSnr() const { return snr; }$/;"	f	class:DeciderResult80211
getSource	src/veins/modules/application/platooning/messages/UnicastMessage_m.cc	/^int UnicastMessage::getSource() const$/;"	f	class:UnicastMessage
getSpeed	src/veins/base/utils/Move.h	/^    double getSpeed() const$/;"	f	class:Move
getSpeed	src/veins/modules/application/platooning/messages/PlatooningBeacon_m.cc	/^double PlatooningBeacon::getSpeed() const$/;"	f	class:PlatooningBeacon
getSpeed	src/veins/modules/mobility/traci/TraCIMobility.h	/^		virtual double getSpeed() const {$/;"	f	class:Veins::TraCIMobility
getSrcAddr	src/veins/base/messages/MacPkt_m.cc	/^LAddress::L2Type& MacPkt::getSrcAddr()$/;"	f	class:MacPkt
getSrcAddr	src/veins/base/messages/MacPkt_m.h	/^    virtual const LAddress::L2Type& getSrcAddr() const {return const_cast<MacPkt*>(this)->getSrcAddr();}$/;"	f	class:MacPkt
getStartPos	src/veins/base/messages/BorderMsg_m.cc	/^Coord& BorderMsg::getStartPos()$/;"	f	class:BorderMsg
getStartPos	src/veins/base/messages/BorderMsg_m.h	/^    virtual const Coord& getStartPos() const {return const_cast<BorderMsg*>(this)->getStartPos();}$/;"	f	class:BorderMsg
getStartPos	src/veins/base/utils/Move.h	/^	const Coord& getStartPos() const$/;"	f	class:Move
getStartTime	src/veins/base/utils/Move.h	/^	simtime_t_cref getStartTime() const$/;"	f	class:Move
getState	src/veins/base/messages/AirFrame_m.cc	/^int AirFrame::getState() const$/;"	f	class:Veins::AirFrame
getThermalNoise	src/veins/base/phyLayer/BasePhyLayer.cc	/^ConstMapping* BasePhyLayer::getThermalNoise(simtime_t_cref from, simtime_t_cref to) {$/;"	f	class:BasePhyLayer
getTime	src/veins/base/phyLayer/MappingBase.cc	/^simtime_t_cref Argument::getTime() const$/;"	f	class:Argument
getTime	src/veins/base/phyLayer/PhyUtils.h	/^		simtime_t getTime() const {$/;"	f	class:RadioStateAnalogueModel::ListEntry
getTime	src/veins/modules/application/platooning/messages/PlatooningBeacon_m.cc	/^double PlatooningBeacon::getTime() const$/;"	f	class:PlatooningBeacon
getTimestamp	src/veins/modules/messages/WaveShortMessage_m.cc	/^simtime_t WaveShortMessage::getTimestamp() const$/;"	f	class:WaveShortMessage
getTransmissionPower	src/veins/base/phyLayer/Signal_.h	/^	ConstMapping* getTransmissionPower() {$/;"	f	class:Signal
getTransmissionPower	src/veins/base/phyLayer/Signal_.h	/^	const ConstMapping* getTransmissionPower() const {$/;"	f	class:Signal
getTxPower_mW	src/veins/modules/messages/PhyControlMessage_m.cc	/^double PhyControlMessage::getTxPower_mW() const$/;"	f	class:PhyControlMessage
getType	src/veins/base/messages/AirFrame_m.cc	/^int AirFrame::getType() const$/;"	f	class:Veins::AirFrame
getType	src/veins/base/modules/BaseBattery.h	/^	virtual int getType() const { return type; }$/;"	f	class:DrawAmount
getType	src/veins/modules/application/platooning/messages/UnicastMessage_m.cc	/^int UnicastMessage::getType() const$/;"	f	class:UnicastMessage
getTypeId	src/veins/modules/mobility/traci/TraCICommandInterface.cc	/^std::string TraCICommandInterface::Polygon::getTypeId() {$/;"	f	class:Veins::TraCICommandInterface::Polygon
getTypeId	src/veins/modules/mobility/traci/TraCICommandInterface.cc	/^std::string TraCICommandInterface::Vehicle::getTypeId() {$/;"	f	class:Veins::TraCICommandInterface::Vehicle
getUnderSensitivity	src/veins/modules/messages/AirFrame11p_m.cc	/^bool AirFrame11p::getUnderSensitivity() const$/;"	f	class:AirFrame11p
getUniqueAirFrameId	src/veins/base/modules/BaseWorldUtility.h	/^    long getUniqueAirFrameId()$/;"	f	class:BaseWorldUtility
getUpdateInterval	src/veins/modules/mobility/traci/TraCIScenarioManager.h	/^		simtime_t getUpdateInterval() {$/;"	f	class:Veins::TraCIScenarioManager
getUpperDestinationFromControlInfo	src/veins/base/modules/BaseMacLayer.cc	/^const LAddress::L2Type& BaseMacLayer::getUpperDestinationFromControlInfo(const cObject *const pCtrlInfo) {$/;"	f	class:BaseMacLayer
getVType	src/veins/modules/mobility/traci/TraCICommandInterface.cc	/^std::string TraCICommandInterface::Vehicle::getVType() {$/;"	f	class:Veins::TraCICommandInterface::Vehicle
getValue	src/veins/base/modules/BaseBattery.h	/^	virtual double getValue() const { return value; }$/;"	f	class:DrawAmount
getValue	src/veins/base/phyLayer/Interpolation.h	/^	interpolated getValue() const{$/;"	f	class:ConstInterpolateableIterator
getValue	src/veins/base/phyLayer/MappingBase.h	/^	virtual argument_value_t getValue() const { return mapping->getValue(position); }$/;"	f	class:SimpleConstMappingIterator
getValue	src/veins/base/phyLayer/MappingUtils.h	/^	const argument_value_t getValue() const {$/;"	f	class:ConstantSimpleConstMapping
getValue	src/veins/base/phyLayer/MappingUtils.h	/^	virtual Argument::mapped_type getValue(const Argument& pos) const {$/;"	f	class:ConcatConstMapping
getValue	src/veins/base/phyLayer/MappingUtils.h	/^	virtual argument_value_t getValue() const { return iterator->getValue(); }$/;"	f	class:ConstMappingIteratorWrapper
getValue	src/veins/base/phyLayer/MappingUtils.h	/^	virtual argument_value_t getValue() const { return origIterator->getValue(); }$/;"	f	class:BaseFilteredIterator
getValue	src/veins/base/phyLayer/MappingUtils.h	/^	virtual argument_value_t getValue() const {$/;"	f	class:LinearIntplMappingIterator
getValue	src/veins/base/phyLayer/MappingUtils.h	/^	virtual argument_value_t getValue() const {$/;"	f	class:MultiDimMappingIterator
getValue	src/veins/base/phyLayer/MappingUtils.h	/^	virtual argument_value_t getValue(const Argument& pos) const { return mapping->getValue(pos); }$/;"	f	class:ConstMappingWrapper
getValue	src/veins/base/phyLayer/MappingUtils.h	/^	virtual argument_value_t getValue(const Argument& pos) const {$/;"	f	class:ConstantSimpleConstMapping
getValue	src/veins/base/phyLayer/MappingUtils.h	/^	virtual argument_value_t getValue(const Argument& pos) const {$/;"	f	class:LinearIntplMapping
getValue	src/veins/base/phyLayer/MappingUtils.h	/^	virtual argument_value_t getValue(const Argument& pos) const {$/;"	f	class:MultiDimMapping
getValue	src/veins/base/phyLayer/MappingUtils.h	/^	virtual argument_value_t getValue(const Argument& pos) const {$/;"	f	class:TimeMapping
getValue	src/veins/base/phyLayer/MappingUtils.h	/^	virtual mapped_type getValue() const {$/;"	f	class:TimeMappingIterator
getValue	src/veins/base/phyLayer/MappingUtils.h	/^	virtual typename Base::argument_value_t getValue(const Argument& pos) const {$/;"	f	class:BaseDelayedMapping
getValue	src/veins/base/phyLayer/PhyUtils.cc	/^RSAMMapping::argument_value_t RSAMMapping::getValue(const Argument& pos) const$/;"	f	class:RSAMMapping
getValue	src/veins/base/phyLayer/PhyUtils.h	/^		Argument::mapped_type getValue() const {$/;"	f	class:RadioStateAnalogueModel::ListEntry
getValue	src/veins/base/phyLayer/PhyUtils.h	/^	virtual argument_value_t getValue() const {$/;"	f	class:RSAMConstMappingIterator
getValue	src/veins/modules/analogueModel/JakesFading.cc	/^double JakesFadingMapping::getValue(const Argument& pos) const {$/;"	f	class:JakesFadingMapping
getValue	src/veins/modules/analogueModel/SimplePathlossModel.cc	/^double SimplePathlossConstMapping::getValue(const Argument& pos) const$/;"	f	class:SimplePathlossConstMapping
getValue	src/veins/modules/analogueModel/TwoRayInterferenceModel.cc	/^double TwoRayInterferenceModel::Mapping::getValue(const Argument& pos) const {$/;"	f	class:TwoRayInterferenceModel::Mapping
getVehicleCommandInterface	src/veins/modules/mobility/traci/TraCIMobility.h	/^		virtual TraCICommandInterface::Vehicle* getVehicleCommandInterface() const {$/;"	f	class:Veins::TraCIMobility
getVehicleData	src/veins/modules/mobility/traci/TraCICommandInterface.cc	/^void TraCICommandInterface::Vehicle::getVehicleData(double &speed, double &acceleration, double &controllerAcceleration, double &positionX, double &positionY, double &time) {$/;"	f	class:Veins::TraCICommandInterface::Vehicle
getVehicleId	src/veins/modules/application/platooning/messages/BikesMessage_m.cc	/^int BikesMessage::getVehicleId() const$/;"	f	class:BikesMessage
getVehicleId	src/veins/modules/application/platooning/messages/ManeuverMessage_m.cc	/^int ManeuverMessage::getVehicleId() const$/;"	f	class:ManeuverMessage
getVehicleId	src/veins/modules/application/platooning/messages/PlatooningBeacon_m.cc	/^int PlatooningBeacon::getVehicleId() const$/;"	f	class:PlatooningBeacon
getVehicleType	src/veins/modules/application/platooning/messages/BikesMessage_m.cc	/^int BikesMessage::getVehicleType() const$/;"	f	class:BikesMessage
getVehicleTypeIds	src/veins/modules/mobility/traci/TraCICommandInterface.cc	/^std::list<std::string> TraCICommandInterface::getVehicleTypeIds() {$/;"	f	class:Veins::TraCICommandInterface
getVersion	src/veins/modules/mobility/traci/TraCICommandInterface.cc	/^std::pair<uint32_t, std::string> TraCICommandInterface::getVersion() {$/;"	f	class:Veins::TraCICommandInterface
getWasTransmitting	src/veins/modules/messages/AirFrame11p_m.cc	/^bool AirFrame11p::getWasTransmitting() const$/;"	f	class:AirFrame11p
getWorldUtility	src/veins/base/phyLayer/BasePhyLayer.cc	/^BaseWorldUtility* BasePhyLayer::getWorldUtility() {$/;"	f	class:BasePhyLayer
getWsmData	src/veins/modules/messages/WaveShortMessage_m.cc	/^const char * WaveShortMessage::getWsmData() const$/;"	f	class:WaveShortMessage
getWsmLength	src/veins/modules/messages/WaveShortMessage_m.cc	/^int WaveShortMessage::getWsmLength() const$/;"	f	class:WaveShortMessage
getWsmVersion	src/veins/modules/messages/WaveShortMessage_m.cc	/^int WaveShortMessage::getWsmVersion() const$/;"	f	class:WaveShortMessage
getmaxSize	src/veins/base/connectionManager/BaseConnectionManager.h	/^		unsigned getmaxSize() { return maxSize; }$/;"	f	class:BaseConnectionManager::CoordSet
goToBorder	src/veins/base/modules/BaseMobility.cc	/^void BaseMobility::goToBorder(BorderPolicy policy, BorderHandling wo,$/;"	f	class:BaseMobility
green	src/veins/modules/mobility/traci/TraCIColor.h	/^		uint8_t green;$/;"	m	class:Veins::TraCIColor
gridDim	src/veins/base/connectionManager/BaseConnectionManager.h	/^    GridCoord gridDim;$/;"	m	class:BaseConnectionManager
group	src/veins/modules/world/annotations/AnnotationManager.h	/^				Group* group;$/;"	m	class:Veins::AnnotationManager::Annotation
groups	src/veins/modules/world/annotations/AnnotationManager.h	/^		Groups groups;$/;"	m	class:Veins::AnnotationManager
guardActive	src/veins/modules/mac/ieee80211p/Mac1609_4.cc	/^bool Mac1609_4::guardActive() const {$/;"	f	class:Mac1609_4
guiView	src/veins/modules/mobility/traci/TraCICommandInterface.h	/^		GuiView guiView(std::string viewId) {$/;"	f	class:Veins::TraCICommandInterface
guisimBinary	examples/platoonBikes/sumocfg/runner.py	/^guisimBinary = "sumo-gui"$/;"	v
guisimPath	examples/platoonBikes/sumocfg/runner.py	/^    guisimPath = guisimBinary$/;"	v
guisimPath	examples/platoonBikes/sumocfg/runner.py	/^    guisimPath = os.environ.get("GUISIM_BINARY", os.path.join($/;"	v
guisimPath	examples/platoonBikes/sumocfg/runner.py	/^    guisimPath = os.path.join(base, guisimBinary)$/;"	v
haltOnFails	src/veins/base/utils/asserts.cc	/^bool haltOnFails = false;$/;"	v
handleAckMessage	src/veins/modules/application/platooning/UnicastProtocol.cc	/^void UnicastProtocol::handleAckMessage(UnicastMessage *ack)$/;"	f	class:UnicastProtocol
handleAirFrame	src/veins/base/phyLayer/BasePhyLayer.cc	/^void BasePhyLayer::handleAirFrame(AirFrame* frame) {$/;"	f	class:BasePhyLayer
handleAirFrameEndReceive	src/veins/base/phyLayer/BasePhyLayer.cc	/^void BasePhyLayer::handleAirFrameEndReceive(AirFrame* frame) {$/;"	f	class:BasePhyLayer
handleAirFrameReceiving	src/veins/base/phyLayer/BasePhyLayer.cc	/^void BasePhyLayer::handleAirFrameReceiving(AirFrame* frame) {$/;"	f	class:BasePhyLayer
handleAirFrameStartReceive	src/veins/base/phyLayer/BasePhyLayer.cc	/^void BasePhyLayer::handleAirFrameStartReceive(AirFrame* frame) {$/;"	f	class:BasePhyLayer
handleBorderMsg	src/veins/base/modules/BaseMobility.cc	/^void BaseMobility::handleBorderMsg(cMessage * msg)$/;"	f	class:BaseMobility
handleChannelSenseRequest	src/veins/base/phyLayer/BaseDecider.cc	/^simtime_t BaseDecider::handleChannelSenseRequest(ChannelSenseRequest* request) {$/;"	f	class:BaseDecider
handleChannelSenseRequest	src/veins/base/phyLayer/BasePhyLayer.cc	/^void BasePhyLayer::handleChannelSenseRequest(cMessage* msg) {$/;"	f	class:BasePhyLayer
handleChannelSenseRequest	src/veins/base/phyLayer/Decider.cc	/^simtime_t Decider::handleChannelSenseRequest(ChannelSenseRequest* request) {$/;"	f	class:Decider
handleFollowerMsg	src/veins/modules/application/platooning/maneuver/JoinManeuverApp.cc	/^void JoinManeuverApp::handleFollowerMsg(cMessage *msg) {$/;"	f	class:JoinManeuverApp
handleHostState	src/veins/base/modules/BaseModule.cc	/^void BaseModule::handleHostState(const HostState& state)$/;"	f	class:BaseModule
handleIfOutside	src/veins/base/modules/BaseMobility.cc	/^bool BaseMobility::handleIfOutside(BorderPolicy policy, Coord& stepTarget,$/;"	f	class:BaseMobility
handleJoinerMsg	src/veins/modules/application/platooning/maneuver/JoinManeuverApp.cc	/^void JoinManeuverApp::handleJoinerMsg(cMessage *msg) {$/;"	f	class:JoinManeuverApp
handleLeaderMsg	src/veins/modules/application/platooning/maneuver/JoinManeuverApp.cc	/^void JoinManeuverApp::handleLeaderMsg(cMessage *msg) {$/;"	f	class:JoinManeuverApp
handleLowerControl	src/veins/base/modules/BaseApplLayer.h	/^	virtual void handleLowerControl(cMessage* msg) {$/;"	f	class:BaseApplLayer
handleLowerControl	src/veins/base/modules/BaseMacLayer.cc	/^void BaseMacLayer::handleLowerControl(cMessage* msg)$/;"	f	class:BaseMacLayer
handleLowerControl	src/veins/modules/application/platooning/apps/BaseApp.cc	/^void BaseApp::handleLowerControl(cMessage *msg) {$/;"	f	class:BaseApp
handleLowerControl	src/veins/modules/application/platooning/bikeplatoons/BikesApp.cc	/^void BikesApp::handleLowerControl( cMessage *msg )$/;"	f	class:BikesApp
handleLowerControl	src/veins/modules/application/platooning/maneuver/JoinManeuverApp.cc	/^void JoinManeuverApp::handleLowerControl(cMessage *msg) {$/;"	f	class:JoinManeuverApp
handleLowerControl	src/veins/modules/application/platooning/protocols/BaseProtocol.cc	/^void BaseProtocol::handleLowerControl(cMessage *msg) {$/;"	f	class:BaseProtocol
handleLowerControl	src/veins/modules/mac/ieee80211p/Mac1609_4.cc	/^void Mac1609_4::handleLowerControl(cMessage* msg) {$/;"	f	class:Mac1609_4
handleLowerMsg	src/veins/base/modules/BaseApplLayer.h	/^	virtual void handleLowerMsg(cMessage* msg) {$/;"	f	class:BaseApplLayer
handleLowerMsg	src/veins/base/modules/BaseMacLayer.cc	/^void BaseMacLayer::handleLowerMsg(cMessage *msg)$/;"	f	class:BaseMacLayer
handleLowerMsg	src/veins/modules/application/ieee80211p/BaseWaveApplLayer.cc	/^void BaseWaveApplLayer::handleLowerMsg(cMessage* msg) {$/;"	f	class:BaseWaveApplLayer
handleLowerMsg	src/veins/modules/application/platooning/UnicastProtocol.cc	/^void UnicastProtocol::handleLowerMsg(cMessage *msg)$/;"	f	class:UnicastProtocol
handleLowerMsg	src/veins/modules/application/platooning/apps/BaseApp.cc	/^void BaseApp::handleLowerMsg(cMessage *msg) {$/;"	f	class:BaseApp
handleLowerMsg	src/veins/modules/application/platooning/bikeplatoons/BikesApp.cc	/^void BikesApp::handleLowerMsg( cMessage *msg )$/;"	f	class:BikesApp
handleLowerMsg	src/veins/modules/application/platooning/maneuver/JoinManeuverApp.cc	/^void JoinManeuverApp::handleLowerMsg(cMessage *msg) {$/;"	f	class:JoinManeuverApp
handleLowerMsg	src/veins/modules/application/platooning/protocols/BaseProtocol.cc	/^void BaseProtocol::handleLowerMsg(cMessage *msg) {$/;"	f	class:BaseProtocol
handleLowerMsg	src/veins/modules/application/traci/TraCITestApp.cc	/^void TraCITestApp::handleLowerMsg(cMessage* msg) {$/;"	f	class:TraCITestApp
handleLowerMsg	src/veins/modules/mac/ieee80211p/Mac1609_4.cc	/^void Mac1609_4::handleLowerMsg(cMessage* msg) {$/;"	f	class:Mac1609_4
handleMessage	src/veins/base/modules/BaseLayer.cc	/^void BaseLayer::handleMessage(cMessage* msg)$/;"	f	class:BaseLayer
handleMessage	src/veins/base/modules/BaseMobility.cc	/^void BaseMobility::handleMessage(cMessage * msg)$/;"	f	class:BaseMobility
handleMessage	src/veins/base/phyLayer/BasePhyLayer.cc	/^void BasePhyLayer::handleMessage(cMessage* msg) {$/;"	f	class:BasePhyLayer
handleMessage	src/veins/modules/mobility/traci/TraCIBaseTrafficManager.cc	/^void TraCIBaseTrafficManager::handleMessage(cMessage *msg) {$/;"	f	class:TraCIBaseTrafficManager
handleMessage	src/veins/modules/mobility/traci/TraCIScenarioManager.cc	/^void TraCIScenarioManager::handleMessage(cMessage *msg) {$/;"	f	class:TraCIScenarioManager
handleMessage	src/veins/modules/mobility/traci/TraCIScreenRecorder.cc	/^void TraCIScreenRecorder::handleMessage(cMessage *msg) {$/;"	f	class:TraCIScreenRecorder
handleMessage	src/veins/modules/obstacle/ObstacleControl.cc	/^void ObstacleControl::handleMessage(cMessage *msg) {$/;"	f	class:ObstacleControl
handleMessage	src/veins/modules/world/annotations/AnnotationManager.cc	/^void AnnotationManager::handleMessage(cMessage *msg) {$/;"	f	class:AnnotationManager
handleMsg	src/veins/modules/application/platooning/bikeplatoons/BikesApp.cc	/^void BikesApp::handleMsg( cMessage *msg )$/;"	f	class:BikesApp
handleNewSenseRequest	src/veins/base/phyLayer/BaseDecider.cc	/^simtime_t BaseDecider::handleNewSenseRequest(ChannelSenseRequest* request)$/;"	f	class:BaseDecider
handleParameterChange	src/veins/modules/world/annotations/AnnotationManager.cc	/^void AnnotationManager::handleParameterChange(const char *parname) {$/;"	f	class:AnnotationManager
handleParkingUpdate	src/veins/modules/application/traci/TraCIDemo11p.cc	/^void TraCIDemo11p::handleParkingUpdate(cObject* obj) {$/;"	f	class:TraCIDemo11p
handlePositionUpdate	src/veins/modules/application/ieee80211p/BaseWaveApplLayer.cc	/^void BaseWaveApplLayer::handlePositionUpdate(cObject* obj) {$/;"	f	class:BaseWaveApplLayer
handlePositionUpdate	src/veins/modules/application/traci/TraCIDemo11p.cc	/^void TraCIDemo11p::handlePositionUpdate(cObject* obj) {$/;"	f	class:TraCIDemo11p
handlePositionUpdate	src/veins/modules/application/traci/TraCITestApp.cc	/^void TraCITestApp::handlePositionUpdate() {$/;"	f	class:TraCITestApp
handleSelfMessage	src/veins/base/phyLayer/BasePhyLayer.cc	/^void BasePhyLayer::handleSelfMessage(cMessage* msg) {$/;"	f	class:BasePhyLayer
handleSelfMessage	src/veins/modules/phy/PhyLayer80211p.cc	/^void PhyLayer80211p::handleSelfMessage(cMessage* msg) {$/;"	f	class:PhyLayer80211p
handleSelfMsg	src/veins/base/modules/BaseApplLayer.h	/^	virtual void handleSelfMsg(cMessage* msg) {$/;"	f	class:BaseApplLayer
handleSelfMsg	src/veins/base/modules/BaseMacLayer.h	/^    virtual void handleSelfMsg(cMessage* msg){$/;"	f	class:BaseMacLayer
handleSelfMsg	src/veins/base/modules/BaseMobility.cc	/^void BaseMobility::handleSelfMsg(cMessage * msg)$/;"	f	class:BaseMobility
handleSelfMsg	src/veins/modules/application/ieee80211p/BaseWaveApplLayer.cc	/^void BaseWaveApplLayer::handleSelfMsg(cMessage* msg) {$/;"	f	class:BaseWaveApplLayer
handleSelfMsg	src/veins/modules/application/platooning/UnicastProtocol.cc	/^void UnicastProtocol::handleSelfMsg(cMessage *msg)$/;"	f	class:UnicastProtocol
handleSelfMsg	src/veins/modules/application/platooning/apps/BaseApp.cc	/^void BaseApp::handleSelfMsg(cMessage *msg) {$/;"	f	class:BaseApp
handleSelfMsg	src/veins/modules/application/platooning/apps/SimplePlatooningApp.cc	/^void SimplePlatooningApp::handleSelfMsg(cMessage *msg) {$/;"	f	class:SimplePlatooningApp
handleSelfMsg	src/veins/modules/application/platooning/bikeplatoons/BikesApp.cc	/^void BikesApp::handleSelfMsg( cMessage *msg )$/;"	f	class:BikesApp
handleSelfMsg	src/veins/modules/application/platooning/maneuver/JoinManeuverApp.cc	/^void JoinManeuverApp::handleSelfMsg(cMessage *msg) {$/;"	f	class:JoinManeuverApp
handleSelfMsg	src/veins/modules/application/platooning/protocols/BaseProtocol.cc	/^void BaseProtocol::handleSelfMsg(cMessage *msg) {$/;"	f	class:BaseProtocol
handleSelfMsg	src/veins/modules/application/platooning/protocols/SimplePlatooningBeaconing.cc	/^void SimplePlatooningBeaconing::handleSelfMsg(cMessage *msg) {$/;"	f	class:SimplePlatooningBeaconing
handleSelfMsg	src/veins/modules/application/traci/TraCITestApp.cc	/^void TraCITestApp::handleSelfMsg(cMessage *msg) {$/;"	f	class:TraCITestApp
handleSelfMsg	src/veins/modules/mac/ieee80211p/Mac1609_4.cc	/^void Mac1609_4::handleSelfMsg(cMessage* msg) {$/;"	f	class:Mac1609_4
handleSelfMsg	src/veins/modules/mobility/traci/TestTrafficManager.cc	/^void TestTrafficManager::handleSelfMsg(cMessage *msg) {$/;"	f	class:TestTrafficManager
handleSelfMsg	src/veins/modules/mobility/traci/TraCIBaseTrafficManager.cc	/^void TraCIBaseTrafficManager::handleSelfMsg(cMessage *msg) {$/;"	f	class:TraCIBaseTrafficManager
handleSelfMsg	src/veins/modules/mobility/traci/TraCIMobility.cc	/^void TraCIMobility::handleSelfMsg(cMessage *msg)$/;"	f	class:TraCIMobility
handleSelfMsg	src/veins/modules/mobility/traci/TraCIScenarioManager.cc	/^void TraCIScenarioManager::handleSelfMsg(cMessage *msg) {$/;"	f	class:TraCIScenarioManager
handleSelfMsg	src/veins/modules/obstacle/ObstacleControl.cc	/^void ObstacleControl::handleSelfMsg(cMessage *msg) {$/;"	f	class:ObstacleControl
handleSelfMsg	src/veins/modules/world/annotations/AnnotationManager.cc	/^void AnnotationManager::handleSelfMsg(cMessage *msg) {$/;"	f	class:AnnotationManager
handleSenseRequestEnd	src/veins/base/phyLayer/BaseDecider.cc	/^void BaseDecider::handleSenseRequestEnd(CSRInfo& requestInfo) {$/;"	f	class:BaseDecider
handleUnicastMessage	src/veins/modules/application/platooning/UnicastProtocol.cc	/^void UnicastProtocol::handleUnicastMessage(UnicastMessage *msg)$/;"	f	class:UnicastProtocol
handleUnicastMsg	src/veins/modules/application/platooning/protocols/BaseProtocol.cc	/^void BaseProtocol::handleUnicastMsg(UnicastMessage *unicast) {$/;"	f	class:BaseProtocol
handleUpperControl	src/veins/base/modules/BaseApplLayer.h	/^	virtual void handleUpperControl(cMessage *msg) {$/;"	f	class:BaseApplLayer
handleUpperControl	src/veins/base/modules/BaseMacLayer.h	/^    virtual void handleUpperControl(cMessage* msg){$/;"	f	class:BaseMacLayer
handleUpperControl	src/veins/modules/application/platooning/UnicastProtocol.cc	/^void UnicastProtocol::handleUpperControl(cMessage *msg)$/;"	f	class:UnicastProtocol
handleUpperControl	src/veins/modules/application/platooning/protocols/BaseProtocol.cc	/^void BaseProtocol::handleUpperControl(cMessage *msg) {$/;"	f	class:BaseProtocol
handleUpperControl	src/veins/modules/mac/ieee80211p/Mac1609_4.cc	/^void Mac1609_4::handleUpperControl(cMessage* msg) {$/;"	f	class:Mac1609_4
handleUpperControlMessage	src/veins/base/phyLayer/BasePhyLayer.cc	/^void BasePhyLayer::handleUpperControlMessage(cMessage* msg){$/;"	f	class:BasePhyLayer
handleUpperMessage	src/veins/base/phyLayer/BasePhyLayer.cc	/^void BasePhyLayer::handleUpperMessage(cMessage* msg){$/;"	f	class:BasePhyLayer
handleUpperMsg	src/veins/base/modules/BaseApplLayer.h	/^	virtual void handleUpperMsg(cMessage *msg) {$/;"	f	class:BaseApplLayer
handleUpperMsg	src/veins/base/modules/BaseMacLayer.cc	/^void BaseMacLayer::handleUpperMsg(cMessage *mac)$/;"	f	class:BaseMacLayer
handleUpperMsg	src/veins/modules/application/platooning/UnicastProtocol.cc	/^void UnicastProtocol::handleUpperMsg(cMessage *msg)$/;"	f	class:UnicastProtocol
handleUpperMsg	src/veins/modules/application/platooning/protocols/BaseProtocol.cc	/^void BaseProtocol::handleUpperMsg(cMessage *msg) {$/;"	f	class:BaseProtocol
handleUpperMsg	src/veins/modules/mac/ieee80211p/Mac1609_4.cc	/^void Mac1609_4::handleUpperMsg(cMessage* msg) {$/;"	f	class:Mac1609_4
handle_connection	sumo-launchd.py	/^def handle_connection(sumo_command, shlex, conn, addr, keep_temp):$/;"	f
handle_get_version	sumo-launchd.py	/^def handle_get_version(conn):$/;"	f
handle_launch_configuration	sumo-launchd.py	/^def handle_launch_configuration(sumo_command, shlex, launch_xml_string, client_socket, keep_temp):$/;"	f
hasArgVal	src/veins/base/phyLayer/MappingBase.cc	/^bool Argument::hasArgVal(const Argument::key_type& dim) const{$/;"	f	class:Argument
hasDimension	src/veins/base/phyLayer/MappingBase.h	/^	bool hasDimension(const DimensionSet::value_type& d) const{$/;"	f	class:DimensionSet
hasFrequency	src/veins/modules/analogueModel/SimplePathlossModel.h	/^	bool hasFrequency;$/;"	m	class:SimplePathlossConstMapping
hasNext	src/veins/base/phyLayer/Interpolation.h	/^	bool hasNext() const{$/;"	f	class:ConstInterpolateableIterator
hasNext	src/veins/base/phyLayer/MappingBase.h	/^	virtual bool hasNext() const { return nextEntry != keyEntries->end(); }$/;"	f	class:SimpleConstMappingIterator
hasNext	src/veins/base/phyLayer/MappingUtils.h	/^	virtual bool hasNext() const { return false; }$/;"	f	class:LinearIntplMappingIterator
hasNext	src/veins/base/phyLayer/MappingUtils.h	/^	virtual bool hasNext() const { return iterator->hasNext(); }$/;"	f	class:ConstMappingIteratorWrapper
hasNext	src/veins/base/phyLayer/MappingUtils.h	/^	virtual bool hasNext() const { return origIterator->hasNext(); }$/;"	f	class:BaseFilteredIterator
hasNext	src/veins/base/phyLayer/MappingUtils.h	/^    virtual bool hasNext() const {$/;"	f	class:MultiDimMappingIterator
hasNext	src/veins/base/phyLayer/MappingUtils.h	/^    virtual bool hasNext() const {$/;"	f	class:TimeMappingIterator
hasNext	src/veins/base/phyLayer/PhyUtils.cc	/^bool RSAMConstMappingIterator::hasNext() const$/;"	f	class:RSAMConstMappingIterator
hasStopped	src/veins/modules/application/traci/TraCITestApp.h	/^		bool hasStopped; \/**< true if at some point in time this vehicle travelled at negligible speed *\/$/;"	m	class:Veins::TraCITestApp
headerLength	src/veins/base/modules/BaseApplLayer.h	/^	int headerLength;$/;"	m	class:BaseApplLayer
headerLength	src/veins/base/modules/BaseMacLayer.h	/^    int headerLength;$/;"	m	class:BaseMacLayer
headerLength	src/veins/base/phyLayer/BasePhyLayer.h	/^	int headerLength;$/;"	m	class:BasePhyLayer
headerLength	src/veins/modules/mac/ieee80211p/Mac1609_4.h	/^		int headerLength;$/;"	m	class:Mac1609_4
hexStr	src/veins/modules/mobility/traci/TraCIBuffer.cc	/^std::string TraCIBuffer::hexStr() const {$/;"	f	class:Veins::TraCIBuffer
hide	src/veins/modules/world/annotations/AnnotationManager.cc	/^void AnnotationManager::hide(const Annotation* annotation) {$/;"	f	class:AnnotationManager
hideAll	src/veins/modules/world/annotations/AnnotationManager.cc	/^void AnnotationManager::hideAll(Group* group) {$/;"	f	class:AnnotationManager
host	src/veins/modules/mobility/traci/TraCIScenarioManager.h	/^		std::string host;$/;"	m	class:Veins::TraCIScenarioManager
hostId	src/veins/base/connectionManager/NicEntry.h	/^    int hostId;$/;"	m	class:NicEntry
hosts	src/veins/modules/mobility/traci/TraCIScenarioManager.h	/^		std::map<std::string, cModule*> hosts; \/**< vector of all hosts managed by us *\/$/;"	m	class:Veins::TraCIScenarioManager
iconSizeTagToSize	src/veins/base/modules/BaseMobility.cc	/^int BaseMobility::iconSizeTagToSize(const char* tag)$/;"	f	class:BaseMobility
iconSizeToTag	src/veins/base/modules/BaseMobility.cc	/^const char* BaseMobility::iconSizeToTag(double size)$/;"	f	class:BaseMobility
id	src/veins/base/phyLayer/MappingBase.h	/^	DimensionIdType id;$/;"	m	class:Dimension
id	src/veins/modules/mobility/traci/TraCIBaseTrafficManager.h	/^			int 		id;			\/\/id of the vehicle in sumo. this is the index of the vehicle type in the array of vehicle types$/;"	m	struct:TraCIBaseTrafficManager::Vehicle
id	src/veins/modules/obstacle/Obstacle.h	/^		std::string id;$/;"	m	class:Veins::Obstacle
id_var	src/veins/base/messages/AirFrame_m.h	/^    long id_var;$/;"	m	class:Veins::AirFrame
idle	src/veins/base/phyLayer/ChannelState.h	/^	bool idle;$/;"	m	class:ChannelState
idleChannel	src/veins/modules/mac/ieee80211p/Mac1609_4.h	/^		bool idleChannel;$/;"	m	class:Mac1609_4
ifInetTraCIMobilityCallNextPosition	src/veins/modules/mobility/traci/TraCIScenarioManagerInet.cc	/^void ifInetTraCIMobilityCallNextPosition(cModule* mod, const Coord& p, const std::string& edge, double speed, double angle) {$/;"	f
ifInetTraCIMobilityCallPreInitialize	src/veins/modules/mobility/traci/TraCIScenarioManagerInet.cc	/^void ifInetTraCIMobilityCallPreInitialize(cModule* mod, const std::string& nodeId, const Coord& position, const std::string& road_id, double speed, double angle) {$/;"	f
inCnt	src/veins/base/connectionManager/NicEntryDebug.h	/^    int inCnt;$/;"	m	class:NicEntryDebug
inRange	src/veins/base/phyLayer/Interpolation.h	/^	bool inRange() const{$/;"	f	class:ConstInterpolateableIterator
inRange	src/veins/base/phyLayer/MappingBase.h	/^	virtual bool inRange() const {$/;"	f	class:SimpleConstMappingIterator
inRange	src/veins/base/phyLayer/MappingUtils.h	/^	virtual bool inRange() const { return false; }$/;"	f	class:LinearIntplMappingIterator
inRange	src/veins/base/phyLayer/MappingUtils.h	/^	virtual bool inRange() const { return iterator->inRange(); }$/;"	f	class:ConstMappingIteratorWrapper
inRange	src/veins/base/phyLayer/MappingUtils.h	/^	virtual bool inRange() const { return origIterator->inRange(); }$/;"	f	class:BaseFilteredIterator
inRange	src/veins/base/phyLayer/MappingUtils.h	/^	virtual bool inRange() const {$/;"	f	class:MultiDimMappingIterator
inRange	src/veins/base/phyLayer/MappingUtils.h	/^	virtual bool inRange() const {$/;"	f	class:TimeMappingIterator
inRange	src/veins/base/phyLayer/PhyUtils.cc	/^bool RSAMConstMappingIterator::inRange() const$/;"	f	class:RSAMConstMappingIterator
inactiveAirFrames	src/veins/base/phyLayer/ChannelInfo.h	/^	AirFrameMatrix inactiveAirFrames;$/;"	m	class:ChannelInfo
index	src/veins/modules/application/platooning/CC_Const.h	/^    int index;           \/\/position in the platoon (0 = first)$/;"	m	struct:Plexe::VEHICLE_DATA
individualOffset	src/veins/modules/application/ieee80211p/BaseWaveApplLayer.h	/^		simtime_t individualOffset;$/;"	m	class:BaseWaveApplLayer
inet_defs	configure	/^    inet_defs = ["-DINET_IMPORT", "-DWITH_INET"]$/;"	v
inet_header_dirs	configure	/^    inet_header_dirs = set()$/;"	v
inet_includes	configure	/^    inet_includes = ['-I' + s for s in inet_header_dirs]$/;"	v
inet_link	configure	/^    inet_link = ["-L" + os.path.join(os.path.relpath(options.inet, 'src'), 'src'), "-linet"]$/;"	v
inet_src_path	configure	/^    inet_src_path = os.path.join(options.inet, 'src')$/;"	v
info	src/veins/base/connectionManager/BaseConnectionManager.h	/^        std::string info() const {$/;"	f	class:BaseConnectionManager::GridCoord
info	src/veins/base/phyLayer/ChannelState.h	/^	std::string info() const {$/;"	f	class:ChannelState
info	src/veins/base/utils/Coord.h	/^inline std::string Coord::info() const {$/;"	f	class:Coord
info	src/veins/base/utils/HostState.h	/^    std::string info() const {$/;"	f	class:HostState
info	src/veins/base/utils/Move.h	/^    std::string info() const {$/;"	f	class:Move
informationDS_var	src/veins/modules/messages/Mac80211Pkt_m.h	/^    int informationDS_var;$/;"	m	class:Mac80211Pkt
initScenario	src/veins/modules/mobility/traci/TraCIBaseTrafficManager.h	/^		bool initScenario;$/;"	m	class:TraCIBaseTrafficManager
init_traci	src/veins/modules/mobility/traci/TraCIScenarioManager.cc	/^void TraCIScenarioManager::init_traci() {$/;"	f	class:TraCIScenarioManager
init_traci	src/veins/modules/mobility/traci/TraCIScenarioManagerLaunchd.cc	/^void TraCIScenarioManagerLaunchd::init_traci() {$/;"	f	class:TraCIScenarioManagerLaunchd
initialize	src/veins/base/connectionManager/BaseConnectionManager.cc	/^void BaseConnectionManager::initialize(int stage)$/;"	f	class:BaseConnectionManager
initialize	src/veins/base/connectionManager/ChannelAccess.cc	/^void ChannelAccess::initialize( int stage )$/;"	f	class:ChannelAccess
initialize	src/veins/base/modules/BaseApplLayer.cc	/^void BaseApplLayer::initialize(int stage)$/;"	f	class:BaseApplLayer
initialize	src/veins/base/modules/BaseLayer.cc	/^void BaseLayer::initialize(int stage)$/;"	f	class:BaseLayer
initialize	src/veins/base/modules/BaseMacLayer.cc	/^void BaseMacLayer::initialize(int stage)$/;"	f	class:BaseMacLayer
initialize	src/veins/base/modules/BaseMobility.cc	/^void BaseMobility::initialize(int stage)$/;"	f	class:BaseMobility
initialize	src/veins/base/modules/BaseModule.cc	/^void BaseModule::initialize(int stage) {$/;"	f	class:BaseModule
initialize	src/veins/base/modules/BaseWorldUtility.cc	/^void BaseWorldUtility::initialize(int stage) {$/;"	f	class:BaseWorldUtility
initialize	src/veins/base/phyLayer/BasePhyLayer.cc	/^void BasePhyLayer::initialize(int stage) {$/;"	f	class:BasePhyLayer
initialize	src/veins/modules/application/ieee80211p/BaseWaveApplLayer.cc	/^void BaseWaveApplLayer::initialize(int stage) {$/;"	f	class:BaseWaveApplLayer
initialize	src/veins/modules/application/platooning/UnicastProtocol.cc	/^void UnicastProtocol::initialize(int stage)$/;"	f	class:UnicastProtocol
initialize	src/veins/modules/application/platooning/apps/BaseApp.cc	/^void BaseApp::initialize(int stage) {$/;"	f	class:BaseApp
initialize	src/veins/modules/application/platooning/apps/SimplePlatooningApp.cc	/^void SimplePlatooningApp::initialize(int stage) {$/;"	f	class:SimplePlatooningApp
initialize	src/veins/modules/application/platooning/bikeplatoons/BikesApp.cc	/^void BikesApp::initialize( int stage )$/;"	f	class:BikesApp
initialize	src/veins/modules/application/platooning/bikes/BikeManeuver.cc	/^void BikeManeuver::initialize( int stage )$/;"	f	class:BikeManeuver
initialize	src/veins/modules/application/platooning/maneuver/JoinManeuverApp.cc	/^void JoinManeuverApp::initialize(int stage) {$/;"	f	class:JoinManeuverApp
initialize	src/veins/modules/application/platooning/protocols/BaseProtocol.cc	/^void BaseProtocol::initialize(int stage) {$/;"	f	class:BaseProtocol
initialize	src/veins/modules/application/platooning/protocols/SimplePlatooningBeaconing.cc	/^void SimplePlatooningBeaconing::initialize(int stage) {$/;"	f	class:SimplePlatooningBeaconing
initialize	src/veins/modules/application/traci/TraCIDemo11p.cc	/^void TraCIDemo11p::initialize(int stage) {$/;"	f	class:TraCIDemo11p
initialize	src/veins/modules/application/traci/TraCIDemoRSU11p.cc	/^void TraCIDemoRSU11p::initialize(int stage) {$/;"	f	class:TraCIDemoRSU11p
initialize	src/veins/modules/application/traci/TraCITestApp.cc	/^void TraCITestApp::initialize(int stage) {$/;"	f	class:TraCITestApp
initialize	src/veins/modules/mac/ieee80211p/Mac1609_4.cc	/^void Mac1609_4::initialize(int stage) {$/;"	f	class:Mac1609_4
initialize	src/veins/modules/mobility/traci/SumoTrafficManager.cc	/^void SumoTrafficManager::initialize(int stage) {$/;"	f	class:SumoTrafficManager
initialize	src/veins/modules/mobility/traci/TestTrafficManager.cc	/^void TestTrafficManager::initialize(int stage) {$/;"	f	class:TestTrafficManager
initialize	src/veins/modules/mobility/traci/TraCIBaseTrafficManager.cc	/^void TraCIBaseTrafficManager::initialize(int stage) {$/;"	f	class:TraCIBaseTrafficManager
initialize	src/veins/modules/mobility/traci/TraCIMobility.cc	/^void TraCIMobility::Statistics::initialize()$/;"	f	class:TraCIMobility::Statistics
initialize	src/veins/modules/mobility/traci/TraCIMobility.cc	/^void TraCIMobility::initialize(int stage)$/;"	f	class:TraCIMobility
initialize	src/veins/modules/mobility/traci/TraCIScenarioManager.cc	/^void TraCIScenarioManager::initialize(int stage) {$/;"	f	class:TraCIScenarioManager
initialize	src/veins/modules/mobility/traci/TraCIScenarioManagerLaunchd.cc	/^void TraCIScenarioManagerLaunchd::initialize(int stage)$/;"	f	class:TraCIScenarioManagerLaunchd
initialize	src/veins/modules/mobility/traci/TraCIScreenRecorder.cc	/^void TraCIScreenRecorder::initialize(int stage)$/;"	f	class:TraCIScreenRecorder
initialize	src/veins/modules/obstacle/ObstacleControl.cc	/^void ObstacleControl::initialize(int stage) {$/;"	f	class:ObstacleControl
initialize	src/veins/modules/phy/PhyLayer80211p.cc	/^void PhyLayer80211p::initialize(int stage) {$/;"	f	class:PhyLayer80211p
initialize	src/veins/modules/world/annotations/AnnotationManager.cc	/^void AnnotationManager::initialize() {$/;"	f	class:AnnotationManager
initializeAnalogueModels	src/veins/base/phyLayer/BasePhyLayer.cc	/^void BasePhyLayer::initializeAnalogueModels(cXMLElement* xmlConfig) {$/;"	f	class:BasePhyLayer
initializeArguments	src/veins/base/phyLayer/MappingBase.cc	/^void SimpleConstMapping::initializeArguments(const Argument& min,$/;"	f	class:SimpleConstMapping
initializeArguments	src/veins/base/phyLayer/MappingBase.h	/^	void initializeArguments(const Argument& key){$/;"	f	class:SimpleConstMapping
initializeArguments	src/veins/base/phyLayer/MappingBase.h	/^	void initializeArguments(const Argument& key1, const Argument& key2){$/;"	f	class:SimpleConstMapping
initializeBreakpointPathlossModel	src/veins/modules/phy/PhyLayer80211p.cc	/^AnalogueModel* PhyLayer80211p::initializeBreakpointPathlossModel(ParameterMap& params) {$/;"	f	class:PhyLayer80211p
initializeDecider	src/veins/base/phyLayer/BasePhyLayer.cc	/^void BasePhyLayer::initializeDecider(cXMLElement* xmlConfig) {$/;"	f	class:BasePhyLayer
initializeDecider80211p	src/veins/modules/phy/PhyLayer80211p.cc	/^Decider* PhyLayer80211p::initializeDecider80211p(ParameterMap& params) {$/;"	f	class:PhyLayer80211p
initializeIfNecessary	src/veins/base/modules/BaseWorldUtility.cc	/^void BaseWorldUtility::initializeIfNecessary()$/;"	f	class:BaseWorldUtility
initializeJakesFading	src/veins/modules/phy/PhyLayer80211p.cc	/^AnalogueModel* PhyLayer80211p::initializeJakesFading(ParameterMap& params) {$/;"	f	class:PhyLayer80211p
initializeLogNormalShadowing	src/veins/modules/phy/PhyLayer80211p.cc	/^AnalogueModel* PhyLayer80211p::initializeLogNormalShadowing(ParameterMap& params) {$/;"	f	class:PhyLayer80211p
initializePERModel	src/veins/modules/phy/PhyLayer80211p.cc	/^AnalogueModel* PhyLayer80211p::initializePERModel(ParameterMap& params) {$/;"	f	class:PhyLayer80211p
initializeRadio	src/veins/base/phyLayer/BasePhyLayer.cc	/^Radio* BasePhyLayer::initializeRadio() {$/;"	f	class:BasePhyLayer
initializeSimpleObstacleShadowing	src/veins/modules/phy/PhyLayer80211p.cc	/^AnalogueModel* PhyLayer80211p::initializeSimpleObstacleShadowing(ParameterMap& params){$/;"	f	class:PhyLayer80211p
initializeSimplePathlossModel	src/veins/modules/phy/PhyLayer80211p.cc	/^AnalogueModel* PhyLayer80211p::initializeSimplePathlossModel(ParameterMap& params){$/;"	f	class:PhyLayer80211p
initializeTwoRayInterferenceModel	src/veins/modules/phy/PhyLayer80211p.cc	/^AnalogueModel* PhyLayer80211p::initializeTwoRayInterferenceModel(ParameterMap& params) {$/;"	f	class:PhyLayer80211p
initiateTransmit	src/veins/modules/mac/ieee80211p/Mac1609_4.cc	/^WaveShortMessage* Mac1609_4::EDCA::initiateTransmit(simtime_t lastIdle) {$/;"	f	class:Mac1609_4::EDCA
insert	src/veins/base/connectionManager/BaseConnectionManager.h	/^		void insert(const GridCoord& c, unsigned pos) {$/;"	f	class:BaseConnectionManager::CoordSet
insertInOrder	src/veins/modules/mobility/traci/TraCIBaseTrafficManager.h	/^		bool insertInOrder;$/;"	m	class:TraCIBaseTrafficManager
insertNewVehicle	src/veins/modules/mobility/traci/TestTrafficManager.cc	/^void TestTrafficManager::insertNewVehicle() {$/;"	f	class:TestTrafficManager
insertValue	src/veins/base/phyLayer/MappingBase.cc	/^inline Argument::iterator Argument::insertValue(iterator pos, const Argument::value_type& valPair, iterator& itEnd, bool ignoreUnknown) {$/;"	f	class:Argument
insertVehicles	src/veins/modules/mobility/traci/TraCIBaseTrafficManager.cc	/^void TraCIBaseTrafficManager::insertVehicles() {$/;"	f	class:TraCIBaseTrafficManager
insertVehiclesTrigger	src/veins/modules/mobility/traci/TraCIBaseTrafficManager.h	/^		cMessage *insertVehiclesTrigger;$/;"	m	class:TraCIBaseTrafficManager
interpolate	src/veins/base/phyLayer/Interpolation.h	/^	const interpolator_type&  interpolate;$/;"	m	class:ConstInterpolateableIterator
interpolate	src/veins/base/phyLayer/Interpolation.h	/^	interpolator_type interpolate;$/;"	m	class:InterpolateableMap
interpolated	src/veins/base/phyLayer/Interpolation.h	/^	typedef Interpolated<mapped_type>             interpolated;$/;"	t	class:InterpolatorBase
interpolated	src/veins/base/phyLayer/Interpolation.h	/^	typedef typename base_class_type::interpolated     interpolated;$/;"	t	class:Linear
interpolated	src/veins/base/phyLayer/Interpolation.h	/^	typedef typename base_class_type::interpolated     interpolated;$/;"	t	class:Nearest
interpolated	src/veins/base/phyLayer/Interpolation.h	/^	typedef typename base_class_type::interpolated     interpolated;$/;"	t	class:NextSmaller
interpolated	src/veins/base/phyLayer/Interpolation.h	/^	typedef typename interpolator_type::interpolated                interpolated;$/;"	t	class:InterpolateableIterator
interpolated	src/veins/base/phyLayer/Interpolation.h	/^	typedef typename interpolator_type::interpolated                interpolated;$/;"	t	class:InterpolateableMap
interpolated	src/veins/base/phyLayer/Interpolation.h	/^	typedef typename interpolator_type::interpolated     interpolated;$/;"	t	class:ConstInterpolateableIterator
interpolated	src/veins/base/phyLayer/MappingUtils.h	/^	typedef base_class_type::interpolated     interpolated;$/;"	t	class:Linear
interpolated	src/veins/base/phyLayer/MappingUtils.h	/^	typedef typename interpolator_map_type::interpolated         interpolated;$/;"	t	class:MultiDimMappingIterator
interpolator_map_type	src/veins/base/phyLayer/MappingUtils.h	/^	                                                             interpolator_map_type;$/;"	t	class:MultiDimMapping
interpolator_map_type	src/veins/base/phyLayer/MappingUtils.h	/^	                                                             interpolator_map_type;$/;"	t	class:MultiDimMappingIterator
interpolator_map_type	src/veins/base/phyLayer/MappingUtils.h	/^	                                                             interpolator_map_type;$/;"	t	class:TimeMapping
interpolator_map_type	src/veins/base/phyLayer/MappingUtils.h	/^	                                                             interpolator_map_type;$/;"	t	class:TimeMappingIterator
interpolator_type	src/veins/base/phyLayer/Interpolation.h	/^	typedef TInterpolator                                           interpolator_type;$/;"	t	class:InterpolateableMap
interpolator_type	src/veins/base/phyLayer/Interpolation.h	/^	typedef _Interpolator                                interpolator_type;$/;"	t	class:ConstInterpolateableIterator
interpolator_type	src/veins/base/phyLayer/Interpolation.h	/^	typedef typename base_class_type::interpolator_type             interpolator_type;$/;"	t	class:InterpolateableIterator
interpolator_type	src/veins/base/phyLayer/MappingUtils.h	/^	typedef typename interpolator_map_type::interpolator_type    interpolator_type;$/;"	t	class:MultiDimMapping
interpolator_type	src/veins/base/phyLayer/MappingUtils.h	/^	typedef typename interpolator_map_type::interpolator_type    interpolator_type;$/;"	t	class:TimeMapping
interpolator_type	src/veins/base/phyLayer/MappingUtils.h	/^	typedef typename interpolator_map_type::interpolator_type    interpolator_type;$/;"	t	class:TimeMappingIterator
interval	src/veins/modules/analogueModel/JakesFading.h	/^	Argument interval;$/;"	m	class:JakesFading
interval	src/veins/modules/analogueModel/LogNormalShadowing.h	/^	simtime_t interval;$/;"	m	class:LogNormalShadowing
intervals	src/veins/base/phyLayer/ChannelInfo.h	/^		C* intervals;$/;"	m	class:ChannelInfo::BaseIntersectionIterator
isActiveAtDestination	src/veins/modules/analogueModel/BreakpointPathlossModel.h	/^	virtual bool isActiveAtDestination() { return true; }$/;"	f	class:BreakpointPathlossModel
isActiveAtOrigin	src/veins/modules/analogueModel/BreakpointPathlossModel.h	/^	virtual bool isActiveAtOrigin() { return false; }$/;"	f	class:BreakpointPathlossModel
isBigEndian	src/veins/modules/mobility/traci/TraCIBuffer.cc	/^bool isBigEndian() {$/;"	f	namespace:Veins
isBlinking	src/veins/modules/application/platooning/bikeplatoons/BikesApp.h	/^            int                 isBlinking; \/\/see if i'm turning -> will become a leaver!$/;"	m	struct:BikesApp::VEHICLE_DATA
isBlinking	src/veins/modules/application/platooning/bikes/BikeManeuver.h	/^			int isBlinking;             \/\/see if i'm turning -> will become a leaver!$/;"	m	struct:BikeManeuver::VEHICLE_DATA
isChannelEmpty	src/veins/base/phyLayer/ChannelInfo.h	/^	bool isChannelEmpty() const {$/;"	f	class:ChannelInfo
isChannelIdle	src/veins/base/phyLayer/BaseDecider.h	/^	bool isChannelIdle;$/;"	m	class:BaseDecider
isClose	src/veins/base/phyLayer/MappingBase.cc	/^bool Argument::isClose(const Argument& o, Argument::mapped_type_cref epsilon) const{$/;"	f	class:Argument
isCollision	src/veins/modules/phy/DeciderResult80211.h	/^	bool isCollision() const { return collision; }$/;"	f	class:DeciderResult80211
isConnected	src/veins/base/connectionManager/NicEntry.h	/^    bool isConnected(const NicEntry* other) {$/;"	f	class:NicEntry
isConnected	src/veins/modules/mobility/traci/TraCIScenarioManager.h	/^		bool isConnected() const { return (connection); }$/;"	f	class:Veins::TraCIScenarioManager
isCorrect	src/veins/base/phyLayer/Decider.h	/^	bool isCorrect;$/;"	m	class:DeciderResult
isCrashed	src/veins/modules/mobility/traci/TraCICommandInterface.cc	/^bool TraCICommandInterface::Vehicle::isCrashed() {$/;"	f	class:Veins::TraCICommandInterface::Vehicle
isCruiseControllerInstalled	src/veins/modules/mobility/traci/TraCICommandInterface.cc	/^bool TraCICommandInterface::Vehicle::isCruiseControllerInstalled() {$/;"	f	class:Veins::TraCICommandInterface::Vehicle
isIdle	src/veins/base/phyLayer/ChannelState.cc	/^bool ChannelState::isIdle() const {$/;"	f	class:ChannelState
isIdleRSSI	src/veins/modules/phy/SNRThresholdDecider.h	/^	bool isIdleRSSI(double rssi) const {$/;"	f	class:SNRThresholdDecider
isInBoundary	src/veins/base/modules/BaseMobility.cc	/^    bool isInBoundary(Coord c, Coord lowerBound, Coord upperBound) {$/;"	f	namespace:__anon3
isInBoundary	src/veins/base/utils/Coord.h	/^    bool isInBoundary(const Coord& lowerBound, const Coord& upperBound) const {$/;"	f	class:Coord
isInRange	src/veins/base/connectionManager/BaseConnectionManager.cc	/^bool BaseConnectionManager::isInRange(BaseConnectionManager::NicEntries::mapped_type pFromNic, BaseConnectionManager::NicEntries::mapped_type pToNic)$/;"	f	class:BaseConnectionManager
isInRegionOfInterest	src/veins/modules/mobility/traci/TraCIScenarioManager.cc	/^bool TraCIScenarioManager::isInRegionOfInterest(const TraCICoord& position, std::string road_id, double speed, double angle) {$/;"	f	class:TraCIScenarioManager
isInitialized	src/veins/base/modules/BaseWorldUtility.h	/^    bool isInitialized;$/;"	m	class:BaseWorldUtility
isInterpolated	src/veins/base/phyLayer/Interpolation.h	/^	const bool isInterpolated;$/;"	m	class:Interpolated
isInterpolated	src/veins/base/phyLayer/MappingUtils.h	/^	bool       isInterpolated;$/;"	m	class:Interpolated
isIntersecting	src/veins/base/phyLayer/ChannelInfo.cc	/^bool ChannelInfo::isIntersecting(const AirFrameMatrix& airFrames,$/;"	f	class:ChannelInfo
isKnownProtocolId	src/veins/base/phyLayer/BasePhyLayer.h	/^	virtual bool isKnownProtocolId(int id) { return id == myProtocolId(); }$/;"	f	class:BasePhyLayer
isL2Broadcast	src/veins/base/utils/SimpleAddress.h	/^    static inline bool isL2Broadcast(const L2Type& pSrcAddr) {$/;"	f	class:LAddress
isL3Broadcast	src/veins/base/utils/SimpleAddress.h	/^    static inline bool isL3Broadcast(const L3Type& pSrcAddr) {$/;"	f	class:LAddress
isMaster	src/veins/base/phyLayer/MappingUtils.h	/^	bool isMaster;$/;"	m	class:MultiDimMapping
isModuleUnequipped	src/veins/modules/mobility/traci/TraCIScenarioManager.cc	/^bool TraCIScenarioManager::isModuleUnequipped(std::string nodeId) {$/;"	f	class:TraCIScenarioManager
isParking	src/veins/modules/application/traci/TraCIDemo11p.h	/^		bool isParking;$/;"	m	class:TraCIDemo11p
isParking	src/veins/modules/mobility/traci/TraCIMobility.h	/^		bool isParking;$/;"	m	class:Veins::TraCIMobility
isPointInObstacle	src/veins/modules/obstacle/Obstacle.cc	/^	bool isPointInObstacle(Coord point, const Obstacle& o) {$/;"	f	namespace:__anon5
isPointer	src/veins/base/phyLayer/MappingUtils.h	/^	bool       isPointer;$/;"	m	class:Interpolated
isPreInitialized	src/veins/modules/mobility/traci/TraCIMobility.h	/^		bool isPreInitialized; \/**< true if preInitialize() has been called immediately before initialize() *\/$/;"	m	class:Veins::TraCIMobility
isRealSubSet	src/veins/base/phyLayer/MappingBase.h	/^	bool isRealSubSet(const DimensionSet& other) const{$/;"	f	class:DimensionSet
isRecording	src/veins/base/phyLayer/ChannelInfo.h	/^	bool isRecording() const$/;"	f	class:ChannelInfo
isRegistered	src/veins/base/connectionManager/ChannelAccess.h	/^	bool isRegistered;$/;"	m	class:Veins::ChannelAccess
isSamePosition	src/veins/base/phyLayer/MappingBase.cc	/^bool Argument::isSamePosition(const Argument & o) const$/;"	f	class:Argument
isSignalCorrect	src/veins/base/phyLayer/Decider.cc	/^bool DeciderResult::isSignalCorrect() const {$/;"	f	class:DeciderResult
isStepMapping	src/veins/base/phyLayer/MappingUtils.h	/^	bool         isStepMapping;$/;"	m	class:TimeMappingIterator
isStepping	src/veins/base/phyLayer/Interpolation.h	/^	virtual bool isStepping() const {return false;}$/;"	f	class:InterpolatorBase
isStepping	src/veins/base/phyLayer/Interpolation.h	/^	virtual bool isStepping() const {return true;}$/;"	f	class:NextSmaller
isSubSet	src/veins/base/phyLayer/MappingBase.h	/^	bool isSubSet(const DimensionSet& other) const{$/;"	f	class:DimensionSet
isTraciInitialized	src/veins/modules/mobility/traci/TraCIScenarioManager.h	/^		bool isTraciInitialized() {$/;"	f	class:Veins::TraCIScenarioManager
it	src/veins/base/phyLayer/PhyUtils.h	/^	CurrList::const_iterator it;$/;"	m	class:RSAMConstMappingIterator
iterateTo	src/veins/base/phyLayer/Interpolation.h	/^	void iterateTo(key_cref_type pos) {$/;"	f	class:ConstInterpolateableIterator
iterateTo	src/veins/base/phyLayer/MappingBase.h	/^	virtual void iterateTo(const Argument& pos) {$/;"	f	class:SimpleConstMappingIterator
iterateTo	src/veins/base/phyLayer/MappingUtils.h	/^	virtual void iterateTo(const Argument& pos) { iterator->iterateTo(pos); }$/;"	f	class:ConstMappingIteratorWrapper
iterateTo	src/veins/base/phyLayer/MappingUtils.h	/^	virtual void iterateTo(const Argument& pos) { origIterator->iterateTo(pos); }$/;"	f	class:BaseFilteredIterator
iterateTo	src/veins/base/phyLayer/MappingUtils.h	/^	virtual void iterateTo(const Argument& pos) {$/;"	f	class:BaseDelayedIterator
iterateTo	src/veins/base/phyLayer/MappingUtils.h	/^	virtual void iterateTo(const Argument& pos){$/;"	f	class:LinearIntplMappingIterator
iterateTo	src/veins/base/phyLayer/MappingUtils.h	/^	void iterateTo(const Argument& pos) {$/;"	f	class:TimeMappingIterator
iterateTo	src/veins/base/phyLayer/MappingUtils.h	/^	void iterateTo(const Argument& pos){$/;"	f	class:MultiDimMappingIterator
iterateTo	src/veins/base/phyLayer/PhyUtils.cc	/^void RSAMConstMappingIterator::iterateTo(const Argument& pos)$/;"	f	class:RSAMConstMappingIterator
iterateToNext	src/veins/base/phyLayer/MappingUtils.cc	/^bool MappingUtils::iterateToNext(ConstMappingIterator* it1, ConstMappingIterator* it2){$/;"	f	class:MappingUtils
iterateToOverZeroSwitches	src/veins/base/phyLayer/PhyUtils.cc	/^void RSAMConstMappingIterator::iterateToOverZeroSwitches(simtime_t_cref t)$/;"	f	class:RSAMConstMappingIterator
iterator	src/veins/base/phyLayer/Interpolation.h	/^	typedef typename base_class_type::iterator                      iterator;$/;"	t	class:InterpolateableMap
iterator	src/veins/base/phyLayer/Interpolation.h	/^	typedef typename base_class_type::iterator         iterator;$/;"	t	class:Linear
iterator	src/veins/base/phyLayer/Interpolation.h	/^	typedef typename base_class_type::iterator         iterator;$/;"	t	class:Nearest
iterator	src/veins/base/phyLayer/Interpolation.h	/^	typedef typename base_class_type::iterator         iterator;$/;"	t	class:NextSmaller
iterator	src/veins/base/phyLayer/Interpolation.h	/^	typedef typename container_type::iterator                       iterator;$/;"	t	class:InterpolateableIterator
iterator	src/veins/base/phyLayer/Interpolation.h	/^	typedef typename interpolator_type::iterator         iterator;$/;"	t	class:ConstInterpolateableIterator
iterator	src/veins/base/phyLayer/Interpolation.h	/^	typedef typename storage_type::iterator       iterator;$/;"	t	class:InterpolatorBase
iterator	src/veins/base/phyLayer/MappingBase.h	/^	typedef container_type::iterator       iterator;$/;"	t	class:Argument
iterator	src/veins/base/phyLayer/MappingUtils.h	/^	ConstMappingIterator *const iterator;$/;"	m	class:ConstMappingIteratorWrapper
iterator	src/veins/base/phyLayer/MappingUtils.h	/^	typedef base_class_type::iterator         iterator;$/;"	t	class:Linear
iterator	src/veins/base/phyLayer/MappingUtils.h	/^	typedef typename interpolator_map_type::iterator_intpl       iterator;$/;"	t	class:MultiDimMapping
iterator	src/veins/base/phyLayer/MappingUtils.h	/^	typedef typename interpolator_map_type::iterator_intpl       iterator;$/;"	t	class:MultiDimMappingIterator
iterator	src/veins/base/phyLayer/MappingUtils.h	/^	typedef typename interpolator_map_type::iterator_intpl       iterator;$/;"	t	class:TimeMapping
iterator	src/veins/base/phyLayer/MappingUtils.h	/^	typedef typename interpolator_map_type::iterator_intpl       iterator;$/;"	t	class:TimeMappingIterator
iterator_intpl	src/veins/base/phyLayer/Interpolation.h	/^	typedef InterpolateableIterator<TInterpolator>                  iterator_intpl;$/;"	t	class:InterpolateableMap
joinLane	src/veins/modules/application/platooning/maneuver/JoinManeuverApp.h	/^			int					joinLane;	\/\/the lane chosen for joining the platoon$/;"	m	struct:JoinManeuverApp::VEHICLE_DATA
joinerFsm	src/veins/modules/application/platooning/maneuver/JoinManeuverApp.h	/^		cFSM leaderFsm, joinerFsm, followerFsm;$/;"	m	class:JoinManeuverApp
joinerId	src/veins/modules/application/platooning/maneuver/JoinManeuverApp.h	/^			int					joinerId;	\/\/the id of the vehicle joining the platoon$/;"	m	struct:JoinManeuverApp::VEHICLE_DATA
jumpTo	src/veins/base/phyLayer/Interpolation.h	/^	void jumpTo(key_cref_type pos) {$/;"	f	class:ConstInterpolateableIterator
jumpTo	src/veins/base/phyLayer/MappingBase.h	/^	virtual void jumpTo(const Argument& pos) {$/;"	f	class:SimpleConstMappingIterator
jumpTo	src/veins/base/phyLayer/MappingUtils.h	/^	virtual void jumpTo(const Argument& pos) { iterator->jumpTo(pos); }$/;"	f	class:ConstMappingIteratorWrapper
jumpTo	src/veins/base/phyLayer/MappingUtils.h	/^	virtual void jumpTo(const Argument& pos) { origIterator->jumpTo(pos); }$/;"	f	class:BaseFilteredIterator
jumpTo	src/veins/base/phyLayer/MappingUtils.h	/^	virtual void jumpTo(const Argument& pos) {$/;"	f	class:BaseDelayedIterator
jumpTo	src/veins/base/phyLayer/MappingUtils.h	/^	virtual void jumpTo(const Argument& pos){$/;"	f	class:LinearIntplMappingIterator
jumpTo	src/veins/base/phyLayer/MappingUtils.h	/^	void jumpTo(const Argument& pos) {$/;"	f	class:TimeMappingIterator
jumpTo	src/veins/base/phyLayer/MappingUtils.h	/^	void jumpTo(const Argument& pos){$/;"	f	class:MultiDimMappingIterator
jumpTo	src/veins/base/phyLayer/PhyUtils.cc	/^void RSAMConstMappingIterator::jumpTo(const Argument& pos)$/;"	f	class:RSAMConstMappingIterator
jumpToBegin	src/veins/base/phyLayer/Interpolation.h	/^	void jumpToBegin() {$/;"	f	class:ConstInterpolateableIterator
jumpToBegin	src/veins/base/phyLayer/MappingBase.h	/^	virtual void jumpToBegin(){$/;"	f	class:SimpleConstMappingIterator
jumpToBegin	src/veins/base/phyLayer/MappingUtils.h	/^	virtual void jumpToBegin() { assert(false); }$/;"	f	class:LinearIntplMappingIterator
jumpToBegin	src/veins/base/phyLayer/MappingUtils.h	/^	virtual void jumpToBegin() { iterator->jumpToBegin(); }$/;"	f	class:ConstMappingIteratorWrapper
jumpToBegin	src/veins/base/phyLayer/MappingUtils.h	/^	virtual void jumpToBegin() { origIterator->jumpToBegin(); }$/;"	f	class:BaseFilteredIterator
jumpToBegin	src/veins/base/phyLayer/MappingUtils.h	/^	virtual void jumpToBegin() {$/;"	f	class:BaseDelayedIterator
jumpToBegin	src/veins/base/phyLayer/MappingUtils.h	/^	virtual void jumpToBegin() {$/;"	f	class:TimeMappingIterator
jumpToBegin	src/veins/base/phyLayer/MappingUtils.h	/^	virtual void jumpToBegin(){$/;"	f	class:MultiDimMappingIterator
jumpToBegin	src/veins/base/phyLayer/PhyUtils.h	/^	virtual void jumpToBegin() {$/;"	f	class:RSAMConstMappingIterator
junc_x	examples/platoonBikes/sumocfg/runner.py	/^junc_x = 0.0$/;"	v
junc_y	examples/platoonBikes/sumocfg/runner.py	/^junc_y = 0.0$/;"	v
junction	src/veins/modules/mobility/traci/TraCICommandInterface.h	/^		Junction junction(std::string junctionId) {$/;"	f	class:Veins::TraCICommandInterface
junctionId	src/veins/modules/mobility/traci/TraCICommandInterface.h	/^				std::string junctionId;$/;"	m	class:Veins::TraCICommandInterface::Junction
junction_id	examples/platoonBikes/sumocfg/runner.py	/^junction_id = "cluster_0__0_0__2_0__4_0__6"$/;"	v
keyEntries	src/veins/base/phyLayer/MappingBase.h	/^	KeyEntrySet keyEntries;$/;"	m	class:SimpleConstMapping
keyEntries	src/veins/base/phyLayer/MappingBase.h	/^	const KeyEntrySet*          keyEntries;$/;"	m	class:SimpleConstMappingIterator
key_cref_type	src/veins/base/phyLayer/Interpolation.h	/^	typedef const key_type&                                         key_cref_type;$/;"	t	class:InterpolateableMap
key_cref_type	src/veins/base/phyLayer/Interpolation.h	/^	typedef const key_type&                       key_cref_type;$/;"	t	class:InterpolatorBase
key_cref_type	src/veins/base/phyLayer/Interpolation.h	/^	typedef typename base_class_type::key_cref_type                 key_cref_type;$/;"	t	class:InterpolateableIterator
key_cref_type	src/veins/base/phyLayer/Interpolation.h	/^	typedef typename base_class_type::key_cref_type    key_cref_type;$/;"	t	class:Linear
key_cref_type	src/veins/base/phyLayer/Interpolation.h	/^	typedef typename base_class_type::key_cref_type    key_cref_type;$/;"	t	class:Nearest
key_cref_type	src/veins/base/phyLayer/Interpolation.h	/^	typedef typename base_class_type::key_cref_type    key_cref_type;$/;"	t	class:NextSmaller
key_cref_type	src/veins/base/phyLayer/Interpolation.h	/^	typedef typename interpolator_type::key_cref_type    key_cref_type;$/;"	t	class:ConstInterpolateableIterator
key_cref_type	src/veins/base/phyLayer/MappingUtils.h	/^	typedef base_class_type::key_cref_type    key_cref_type;$/;"	t	class:Linear
key_iterator	src/veins/base/phyLayer/MappingBase.h	/^	    key_iterator(const IteratorType& other) : IteratorType(other) {} ;$/;"	f	class:Argument::key_iterator
key_iterator	src/veins/base/phyLayer/MappingBase.h	/^	class key_iterator : public IteratorType$/;"	c	class:Argument
key_type	src/veins/base/phyLayer/Interpolation.h	/^	typedef typename base_class_type::key_type                      key_type;$/;"	t	class:InterpolateableIterator
key_type	src/veins/base/phyLayer/Interpolation.h	/^	typedef typename base_class_type::key_type                      key_type;$/;"	t	class:InterpolateableMap
key_type	src/veins/base/phyLayer/Interpolation.h	/^	typedef typename base_class_type::key_type         key_type;$/;"	t	class:Linear
key_type	src/veins/base/phyLayer/Interpolation.h	/^	typedef typename base_class_type::key_type         key_type;$/;"	t	class:Nearest
key_type	src/veins/base/phyLayer/Interpolation.h	/^	typedef typename base_class_type::key_type         key_type;$/;"	t	class:NextSmaller
key_type	src/veins/base/phyLayer/Interpolation.h	/^	typedef typename interpolator_type::key_type         key_type;$/;"	t	class:ConstInterpolateableIterator
key_type	src/veins/base/phyLayer/Interpolation.h	/^	typedef typename storage_type::key_type       key_type;$/;"	t	class:InterpolatorBase
key_type	src/veins/base/phyLayer/MappingBase.h	/^	typedef DimensionSet::value_type key_type;$/;"	t	class:Argument
key_type	src/veins/base/phyLayer/MappingUtils.h	/^	typedef base_class_type::key_type         key_type;$/;"	t	class:Linear
keys	src/veins/base/phyLayer/MappingUtils.h	/^	const KeyMap& keys;$/;"	m	class:FilledUpMapping
kind	src/veins/base/utils/PassedMessage.h	/^    int kind;$/;"	m	class:PassedMessage
lambda	src/veins/modules/analogueModel/TwoRayInterferenceModel.h	/^				double lambda;$/;"	m	class:TwoRayInterferenceModel::Mapping
lane	src/veins/modules/application/platooning/bikeplatoons/BikesApp.h	/^			int					lane;		\/\/index of the lane the platoon is travelling in$/;"	m	struct:BikesApp::VEHICLE_DATA
lane	src/veins/modules/application/platooning/bikes/BikeManeuver.h	/^			int lane;                   \/\/index of the lane the platoon is travelling in$/;"	m	struct:BikeManeuver::VEHICLE_DATA
lane	src/veins/modules/application/platooning/maneuver/JoinManeuverApp.h	/^			int					lane;		\/\/index of the lane the platoon is travelling in$/;"	m	struct:JoinManeuverApp::VEHICLE_DATA
lane	src/veins/modules/mobility/traci/TraCIBaseTrafficManager.h	/^			int			lane;		\/\/index of the lane where to insert (set to -1 to choose first free)$/;"	m	struct:TraCIBaseTrafficManager::Vehicle
lane	src/veins/modules/mobility/traci/TraCICommandInterface.h	/^		Lane lane(std::string laneId) {$/;"	f	class:Veins::TraCICommandInterface
laneId	src/veins/modules/mobility/traci/TraCICommandInterface.h	/^				std::string laneId;$/;"	m	class:Veins::TraCICommandInterface::Lane
laneIds	src/veins/modules/mobility/traci/TraCIBaseTrafficManager.h	/^		std::vector<std::string> laneIds;$/;"	m	class:TraCIBaseTrafficManager
laneIdsOnEdge	src/veins/modules/mobility/traci/TraCIBaseTrafficManager.h	/^		std::map<std::string, std::vector<std::string> > laneIdsOnEdge;$/;"	m	class:TraCIBaseTrafficManager
last	src/veins/base/phyLayer/Interpolation.h	/^	used_iterator             last;$/;"	m	class:ConstInterpolateableIterator
lastAC	src/veins/modules/mac/ieee80211p/Mac1609_4.h	/^		t_access_category lastAC;$/;"	m	class:Mac1609_4
lastBusy	src/veins/modules/mac/ieee80211p/Mac1609_4.h	/^		simtime_t lastBusy;$/;"	m	class:Mac1609_4
lastDroveAt	src/veins/modules/application/traci/TraCIDemo11p.h	/^		simtime_t lastDroveAt;$/;"	m	class:TraCIDemo11p
lastHopMac	src/veins/base/utils/MacToNetwControlInfo.h	/^	LAddress::L2Type lastHopMac;$/;"	m	class:MacToNetwControlInfo
lastIdle	src/veins/modules/mac/ieee80211p/Mac1609_4.h	/^		simtime_t lastIdle;$/;"	m	class:Mac1609_4
lastPos	src/veins/base/utils/Move.h	/^    Coord lastPos;$/;"	m	class:Move
lastStart	src/veins/modules/mac/ieee80211p/Mac1609_4.h	/^				simtime_t lastStart; \/\/when we started the last contention;$/;"	m	class:Mac1609_4::EDCA
lastUpdate	src/veins/modules/mobility/traci/TraCIMobility.h	/^		simtime_t lastUpdate; \/**< updated by nextPosition() *\/$/;"	m	class:Veins::TraCIMobility
last_dist	examples/platoonBikes/sumocfg/runner.py	/^last_dist = dict()$/;"	v
last_speed	src/veins/modules/mobility/traci/TraCIMobility.h	/^		double last_speed;$/;"	m	class:Veins::TraCIMobility
launchConfig	src/veins/modules/mobility/traci/TraCIScenarioManagerLaunchd.h	/^		cXMLElement* launchConfig; \/**< launch configuration to send to sumo-launchd *\/$/;"	m	class:Veins::TraCIScenarioManagerLaunchd
leaderFSM	src/veins/modules/application/platooning/bikes/BikeManeuver.h	/^        cFSM leaderFSM, followerFSM, bikeFSM;$/;"	m	class:BikeManeuver
leaderFsm	src/veins/modules/application/platooning/bikeplatoons/BikesApp.h	/^		cFSM leaderFsm, followerFsm, leaverFsm, bikeFsm;$/;"	m	class:BikesApp
leaderFsm	src/veins/modules/application/platooning/maneuver/JoinManeuverApp.h	/^		cFSM leaderFsm, joinerFsm, followerFsm;$/;"	m	class:JoinManeuverApp
leaderId	src/veins/modules/application/platooning/apps/BaseApp.h	/^		int leaderId, frontId;$/;"	m	class:BaseApp
leaderId	src/veins/modules/application/platooning/bikeplatoons/BikesApp.h	/^			int					leaderId;	\/\/leader of the platoon$/;"	m	struct:BikesApp::VEHICLE_DATA
leaderId	src/veins/modules/application/platooning/bikes/BikeManeuver.h	/^			int leaderId;               \/\/leader of the platoon$/;"	m	struct:BikeManeuver::VEHICLE_DATA
leaderId	src/veins/modules/application/platooning/maneuver/JoinManeuverApp.h	/^			int					leaderId;	\/\/leader of the platoon$/;"	m	struct:JoinManeuverApp::VEHICLE_DATA
leaderOscillationFrequency	src/veins/modules/application/platooning/apps/SimplePlatooningApp.h	/^		double leaderOscillationFrequency;$/;"	m	class:SimplePlatooningApp
leaderSpeed	src/veins/modules/application/platooning/apps/SimplePlatooningApp.h	/^		double leaderSpeed;$/;"	m	class:SimplePlatooningApp
leaverFsm	src/veins/modules/application/platooning/bikeplatoons/BikesApp.h	/^		cFSM leaderFsm, followerFsm, leaverFsm, bikeFsm;$/;"	m	class:BikesApp
leaverId	src/veins/modules/application/platooning/bikeplatoons/BikesApp.h	/^            int                 leaverId;   \/\/the id of the vehicle leaving the platoon$/;"	m	struct:BikesApp::VEHICLE_DATA
leaverId	src/veins/modules/application/platooning/bikes/BikeManeuver.h	/^			int leaverId;               \/\/the id of the vehicle leaving the platoon$/;"	m	struct:BikeManeuver::VEHICLE_DATA
left	src/veins/base/phyLayer/MappingUtils.h	/^	const ConstMapping* left;$/;"	m	class:LinearIntplMapping
leftIt	src/veins/base/phyLayer/MappingUtils.h	/^	ConstMappingIterator* leftIt;$/;"	m	class:LinearIntplMappingIterator
length	src/veins/base/utils/Coord.h	/^    double length() const$/;"	f	class:Coord
length	src/veins/modules/application/platooning/CC_Const.h	/^    double length;       \/\/vehicle length$/;"	m	struct:Plexe::VEHICLE_DATA
lib_flags	debug	/^lib_flags = ['-l%s' % s for s in run_libs]$/;"	v
lib_flags	memcheck	/^lib_flags = ['-l%s' % s for s in run_libs]$/;"	v
lib_flags	run	/^lib_flags = ['-l%s' % s for s in run_libs]$/;"	v
lib_flags	src/scripts/debug.in.py	/^lib_flags = ['-l%s' % s for s in run_libs]$/;"	v
lib_flags	src/scripts/memcheck.in.py	/^lib_flags = ['-l%s' % s for s in run_libs]$/;"	v
lib_flags	src/scripts/run.in.py	/^lib_flags = ['-l%s' % s for s in run_libs]$/;"	v
linearInterpolation	src/veins/base/phyLayer/Interpolation.h	/^	static mapped_type linearInterpolation(key_cref_type   t,$/;"	f	class:Linear
linearInterpolationFactor	src/veins/base/phyLayer/Interpolation.h	/^	static mapped_type linearInterpolationFactor(key_cref_type t, key_cref_type t0, key_cref_type t1){$/;"	f	class:Linear
linearInterpolationFactor	src/veins/base/phyLayer/MappingUtils.h	/^	static ConstMapping::argument_value_t linearInterpolationFactor(key_cref_type t, key_cref_type t0, key_cref_type t1){$/;"	f	class:Linear
loadSumoScenario	src/veins/modules/mobility/traci/TraCIBaseTrafficManager.cc	/^void TraCIBaseTrafficManager::loadSumoScenario() {$/;"	f	class:TraCIBaseTrafficManager
lock	sumo-launchd.py	/^    lock = thread.allocate_lock()$/;"	v	class:UnusedPortLock
logName	src/veins/base/modules/BaseModule.cc	/^std::string BaseModule::logName(void) const$/;"	f	class:BaseModule
lowerControlIn	src/veins/base/modules/BaseLayer.h	/^    int lowerControlIn;$/;"	m	class:BaseLayer
lowerControlOut	src/veins/base/modules/BaseLayer.h	/^    int lowerControlOut;$/;"	m	class:BaseLayer
lowerLayerIn	src/veins/base/modules/BaseLayer.h	/^    int lowerLayerIn;$/;"	m	class:BaseLayer
lowerLayerIn	src/veins/modules/application/platooning/protocols/BaseProtocol.h	/^		int upperLayerIn, upperLayerOut, upperControlIn, upperControlOut, lowerLayerIn, lowerLayerOut;$/;"	m	class:BaseProtocol
lowerLayerOut	src/veins/base/modules/BaseLayer.h	/^    int lowerLayerOut;$/;"	m	class:BaseLayer
lowerLayerOut	src/veins/modules/application/platooning/protocols/BaseProtocol.h	/^		int upperLayerIn, upperLayerOut, upperControlIn, upperControlOut, lowerLayerIn, lowerLayerOut;$/;"	m	class:BaseProtocol
lower_bound	src/veins/base/phyLayer/MappingBase.cc	/^Argument::const_iterator Argument::lower_bound(const Argument::key_type& dim) const{$/;"	f	class:Argument
lower_bound	src/veins/base/phyLayer/MappingBase.cc	/^Argument::iterator Argument::lower_bound(const Argument::key_type& dim){$/;"	f	class:Argument
mW2dBm	src/veins/base/phyLayer/MappingBase.h	/^struct mW2dBm {$/;"	s	namespace:mixim::math
mW2dBm	src/veins/base/phyLayer/MappingBase.h	/^struct mW2dBm<T,false> {$/;"	s	namespace:mixim::math
mW2dBm	src/veins/base/phyLayer/MappingBase.h	/^struct mW2dBm<T,true> {$/;"	s	namespace:mixim::math
mW2dBm	src/veins/base/utils/FWMath.h	/^  static double mW2dBm(double mW) { return (10 * log10(mW)); }$/;"	f	class:FWMath
macAddress	src/veins/modules/application/platooning/UnicastProtocol.h	/^		int macAddress;$/;"	m	class:UnicastProtocol
main	sumo-launchd.py	/^def main():$/;"	f
makeMove	src/veins/base/modules/BaseMobility.h	/^    virtual void makeMove(){$/;"	f	class:BaseMobility
makeRSAMEntry	src/veins/base/phyLayer/PhyUtils.h	/^	virtual void makeRSAMEntry(simtime_t_cref time, int state)$/;"	f	class:Veins::Radio
makeTraCICommand	src/veins/modules/mobility/traci/TraCIConnection.cc	/^std::string makeTraCICommand(uint8_t commandId, const TraCIBuffer& buf) {$/;"	f	namespace:Veins
makemake_flags	configure	/^makemake_flags = ['-f', '--deep', '--no-deep-includes', '--make-so', '-I', '.', '-o', 'veins', '-O', 'out']$/;"	v
manager	src/veins/modules/mobility/traci/TraCIBaseTrafficManager.h	/^		Veins::TraCIScenarioManager *manager;$/;"	m	class:TraCIBaseTrafficManager
manager	src/veins/modules/mobility/traci/TraCIMobility.h	/^		mutable TraCIScenarioManager* manager;$/;"	m	class:Veins::TraCIMobility
mapPriority	src/veins/modules/mac/ieee80211p/Mac1609_4.cc	/^Mac1609_4::t_access_category Mac1609_4::mapPriority(int prio) {$/;"	f	class:Mac1609_4
mapStateToAtt	src/veins/base/phyLayer/PhyUtils.h	/^	virtual Argument::mapped_type_cref mapStateToAtt(int state)$/;"	f	class:Veins::Radio
mapped_cref_type	src/veins/base/phyLayer/Interpolation.h	/^	typedef const mapped_type&                                      mapped_cref_type;$/;"	t	class:InterpolateableMap
mapped_cref_type	src/veins/base/phyLayer/Interpolation.h	/^	typedef const mapped_type&                    mapped_cref_type;$/;"	t	class:InterpolatorBase
mapped_cref_type	src/veins/base/phyLayer/Interpolation.h	/^	typedef typename base_class_type::mapped_cref_type              mapped_cref_type;$/;"	t	class:InterpolateableIterator
mapped_cref_type	src/veins/base/phyLayer/Interpolation.h	/^	typedef typename base_class_type::mapped_cref_type mapped_cref_type;$/;"	t	class:Linear
mapped_cref_type	src/veins/base/phyLayer/Interpolation.h	/^	typedef typename base_class_type::mapped_cref_type mapped_cref_type;$/;"	t	class:Nearest
mapped_cref_type	src/veins/base/phyLayer/Interpolation.h	/^	typedef typename base_class_type::mapped_cref_type mapped_cref_type;$/;"	t	class:NextSmaller
mapped_cref_type	src/veins/base/phyLayer/Interpolation.h	/^	typedef typename interpolator_type::mapped_cref_type mapped_cref_type;$/;"	t	class:ConstInterpolateableIterator
mapped_cref_type	src/veins/base/phyLayer/MappingUtils.h	/^	typedef base_class_type::mapped_cref_type mapped_cref_type;$/;"	t	class:Linear
mapped_cref_type	src/veins/base/phyLayer/MappingUtils.h	/^	typedef typename interpolator_map_type::mapped_cref_type     mapped_cref_type;$/;"	t	class:MultiDimMapping
mapped_cref_type	src/veins/base/phyLayer/MappingUtils.h	/^	typedef typename interpolator_map_type::mapped_cref_type     mapped_cref_type;$/;"	t	class:TimeMapping
mapped_type	src/veins/base/phyLayer/Interpolation.h	/^	typedef typename base_class_type::mapped_type                   mapped_type;$/;"	t	class:InterpolateableIterator
mapped_type	src/veins/base/phyLayer/Interpolation.h	/^	typedef typename base_class_type::mapped_type                   mapped_type;$/;"	t	class:InterpolateableMap
mapped_type	src/veins/base/phyLayer/Interpolation.h	/^	typedef typename base_class_type::mapped_type      mapped_type;$/;"	t	class:Linear
mapped_type	src/veins/base/phyLayer/Interpolation.h	/^	typedef typename base_class_type::mapped_type      mapped_type;$/;"	t	class:Nearest
mapped_type	src/veins/base/phyLayer/Interpolation.h	/^	typedef typename base_class_type::mapped_type      mapped_type;$/;"	t	class:NextSmaller
mapped_type	src/veins/base/phyLayer/Interpolation.h	/^	typedef typename interpolator_type::mapped_type      mapped_type;$/;"	t	class:ConstInterpolateableIterator
mapped_type	src/veins/base/phyLayer/Interpolation.h	/^	typedef typename storage_type::mapped_type    mapped_type;$/;"	t	class:InterpolatorBase
mapped_type	src/veins/base/phyLayer/MappingBase.h	/^	typedef double                   mapped_type;$/;"	t	class:Argument
mapped_type	src/veins/base/phyLayer/MappingUtils.h	/^	typedef base_class_type::mapped_type      mapped_type;$/;"	t	class:Linear
mapped_type	src/veins/base/phyLayer/MappingUtils.h	/^	typedef typename interpolator_map_type::mapped_type          mapped_type;$/;"	t	class:MultiDimMapping
mapped_type	src/veins/base/phyLayer/MappingUtils.h	/^	typedef typename interpolator_map_type::mapped_type          mapped_type;$/;"	t	class:TimeMapping
mapped_type	src/veins/base/phyLayer/MappingUtils.h	/^	typedef typename interpolator_map_type::mapped_type          mapped_type;$/;"	t	class:TimeMappingIterator
mapped_type_cref	src/veins/base/phyLayer/MappingBase.h	/^	typedef const mapped_type        mapped_type_cref;$/;"	t	class:Argument
mapping	src/veins/base/phyLayer/MappingBase.h	/^	const ConstMapping *const   mapping;$/;"	m	class:SimpleConstMappingIterator
mapping	src/veins/base/phyLayer/MappingUtils.h	/^	Base* mapping;$/;"	m	class:BaseDelayedMapping
mapping	src/veins/base/phyLayer/MappingUtils.h	/^	LinearIntplMapping mapping;$/;"	m	class:Interpolated
mapping	src/veins/base/phyLayer/MappingUtils.h	/^	const ConstMapping* mapping;$/;"	m	class:ConstMappingWrapper
mapping	src/veins/base/phyLayer/MappingUtils.h	/^	const MultiDimMapping<Interpolator>& mapping;$/;"	m	class:MultiDimMappingIterator
mappings	src/veins/base/phyLayer/MappingUtils.h	/^	MappingSet            mappings;$/;"	m	class:ConcatConstMapping
margin	src/veins/modules/mobility/traci/TraCIConnection.h	/^		int margin;$/;"	m	class:Veins::TraCIConnection
markRcvPowerOutdated	src/veins/base/phyLayer/Signal_.h	/^	void markRcvPowerOutdated() {$/;"	f	class:Signal
math	src/veins/base/phyLayer/MappingBase.h	/^namespace mixim { namespace math {$/;"	n	namespace:mixim
max	src/veins/base/utils/Coord.h	/^    Coord max(const Coord& a) {$/;"	f	class:Coord
max	src/veins/base/utils/FWMath.h	/^  static double max(double a, double b) { return (a<b)? b : a; }$/;"	f	class:FWMath
maxAtt	src/veins/base/phyLayer/PhyUtils.h	/^	const Argument::mapped_type maxAtt;$/;"	m	class:Veins::Radio
maxAttempts	src/veins/modules/application/platooning/UnicastProtocol.h	/^		int maxAttempts;$/;"	m	class:UnicastProtocol
maxDistSquared	src/veins/base/connectionManager/BaseConnectionManager.h	/^	double maxDistSquared;$/;"	m	class:BaseConnectionManager
maxInterferenceDistance	src/veins/base/connectionManager/BaseConnectionManager.h	/^	double maxInterferenceDistance;$/;"	m	class:BaseConnectionManager
maxQueueSize	src/veins/modules/mac/ieee80211p/Mac1609_4.h	/^				uint32_t maxQueueSize;$/;"	m	class:Mac1609_4::EDCA
maxSize	src/veins/base/connectionManager/BaseConnectionManager.h	/^		unsigned maxSize;$/;"	m	class:BaseConnectionManager::CoordSet
maxSpeed	src/veins/modules/mobility/traci/TraCIMobility.h	/^				double maxSpeed; \/**< for statistics: maximum value of currentSpeed *\/$/;"	m	class:Veins::TraCIMobility::Statistics
maxTXPower	src/veins/base/phyLayer/BasePhyLayer.h	/^	double maxTXPower;$/;"	m	class:BasePhyLayer
maxstep	examples/platoonBikes/sumocfg/runner.py	/^maxstep = 100000$/;"	v
mcs_var	src/veins/modules/messages/PhyControlMessage_m.h	/^    int mcs_var;$/;"	m	class:PhyControlMessage
mean	src/veins/modules/analogueModel/LogNormalShadowing.h	/^	double mean;$/;"	m	class:LogNormalShadowing
messageReceived	src/veins/modules/application/platooning/protocols/BaseProtocol.cc	/^void BaseProtocol::messageReceived(PlatooningBeacon *pkt, UnicastMessage *unicast) {$/;"	f	class:BaseProtocol
messageReceived	src/veins/modules/application/platooning/protocols/SimplePlatooningBeaconing.cc	/^void SimplePlatooningBeaconing::messageReceived(PlatooningBeacon *pkt, UnicastMessage *unicast) {$/;"	f	class:SimplePlatooningBeaconing
messageType_var	src/veins/modules/application/platooning/messages/BikesMessage_m.h	/^    int messageType_var;$/;"	m	class:BikesMessage
messageType_var	src/veins/modules/application/platooning/messages/ManeuverMessage_m.h	/^    int messageType_var;$/;"	m	class:ManeuverMessage
min	src/veins/base/utils/Coord.h	/^    Coord min(const Coord& a) {$/;"	f	class:Coord
minAtt	src/veins/base/phyLayer/PhyUtils.h	/^	const Argument::mapped_type minAtt;$/;"	m	class:Veins::Radio
minSpeed	src/veins/modules/mobility/traci/TraCIMobility.h	/^				double minSpeed; \/**< for statistics: minimum value of currentSpeed *\/$/;"	m	class:Veins::TraCIMobility::Statistics
mixim	src/veins/base/phyLayer/MappingBase.h	/^namespace mixim { namespace math {$/;"	n
mobi	src/veins/modules/application/traci/TraCIDemoRSU11p.h	/^		BaseMobility* mobi;$/;"	m	class:TraCIDemoRSU11p
mobility	src/veins/modules/application/platooning/apps/BaseApp.h	/^		Veins::TraCIMobility* mobility;$/;"	m	class:BaseApp
mobility	src/veins/modules/application/platooning/protocols/BaseProtocol.h	/^		Veins::TraCIMobility *mobility;$/;"	m	class:BaseProtocol
mobility	src/veins/modules/application/traci/TraCIDemo11p.h	/^		TraCIMobility* mobility;$/;"	m	class:TraCIDemo11p
mobility	src/veins/modules/application/traci/TraCITestApp.h	/^		TraCIMobility* mobility;$/;"	m	class:Veins::TraCITestApp
mobilityStateChangedSignal	src/veins/base/connectionManager/ChannelAccess.cc	/^const simsignalwrap_t ChannelAccess::mobilityStateChangedSignal = simsignalwrap_t(MIXIM_SIGNAL_MOBILITY_CHANGE_NAME);$/;"	m	class:ChannelAccess	file:
mobilityStateChangedSignal	src/veins/base/connectionManager/ChannelAccess.h	/^	const static simsignalwrap_t mobilityStateChangedSignal;$/;"	m	class:Veins::ChannelAccess
mobilityStateChangedSignal	src/veins/base/modules/BaseMobility.cc	/^const simsignalwrap_t BaseMobility::mobilityStateChangedSignal = simsignalwrap_t(MIXIM_SIGNAL_MOBILITY_CHANGE_NAME);$/;"	m	class:BaseMobility	file:
mobilityStateChangedSignal	src/veins/base/modules/BaseMobility.h	/^    const static simsignalwrap_t mobilityStateChangedSignal;$/;"	m	class:BaseMobility
mobilityStateChangedSignal	src/veins/modules/application/ieee80211p/BaseWaveApplLayer.cc	/^const simsignalwrap_t BaseWaveApplLayer::mobilityStateChangedSignal = simsignalwrap_t(MIXIM_SIGNAL_MOBILITY_CHANGE_NAME);$/;"	m	class:BaseWaveApplLayer	file:
mobilityStateChangedSignal	src/veins/modules/application/ieee80211p/BaseWaveApplLayer.h	/^		static const simsignalwrap_t mobilityStateChangedSignal;$/;"	m	class:BaseWaveApplLayer
mobilityStateChangedSignal	src/veins/modules/application/traci/TraCITestApp.cc	/^const simsignalwrap_t TraCITestApp::mobilityStateChangedSignal = simsignalwrap_t(MIXIM_SIGNAL_MOBILITY_CHANGE_NAME);$/;"	m	class:TraCITestApp	file:
mobilityStateChangedSignal	src/veins/modules/application/traci/TraCITestApp.h	/^		static const simsignalwrap_t mobilityStateChangedSignal;$/;"	m	class:Veins::TraCITestApp
mod	src/veins/base/utils/FWMath.h	/^  static double mod(double dividend, double divisor) {$/;"	f	class:FWMath
mode	examples/platoonBikes/sumocfg/runner.py	/^                mode = "acc"$/;"	v
mode	examples/platoonBikes/sumocfg/runner.py	/^                mode = "desacc"$/;"	v
mode	examples/platoonBikes/sumocfg/runner.py	/^            mode = ""$/;"	v
model	src/veins/modules/analogueModel/JakesFading.h	/^	JakesFading* model;$/;"	m	class:JakesFadingMapping
model	src/veins/modules/analogueModel/SimplePathlossModel.h	/^	SimplePathlossModel* model;$/;"	m	class:SimplePathlossConstMapping
moduleDisplayString	src/veins/modules/mobility/traci/TraCIScenarioManager.h	/^		TypeMapping moduleDisplayString; \/**< module displayString to be used in the simulation for each managed vehicle *\/$/;"	m	class:Veins::TraCIScenarioManager
moduleName	src/veins/modules/mobility/traci/TraCIScenarioManager.h	/^		TypeMapping moduleName; \/**< module name to be used in the simulation for each managed vehicle *\/$/;"	m	class:Veins::TraCIScenarioManager
moduleType	src/veins/modules/mobility/traci/TraCIScenarioManager.h	/^		TypeMapping moduleType; \/**< module type to be used in the simulation for each managed vehicle *\/$/;"	m	class:Veins::TraCIScenarioManager
modulo	src/veins/base/utils/FWMath.h	/^  static double modulo(double a, double n) { return (a - n * floor(a\/n)); }$/;"	f	class:FWMath
move	src/veins/base/modules/BaseMobility.h	/^    Move move;$/;"	m	class:BaseMobility
moveMsg	src/veins/base/modules/BaseMobility.h	/^    cMessage* moveMsg;$/;"	m	class:BaseMobility
moveNodes	examples/platoonBikes/sumocfg/runner.py	/^    moveNodes = []$/;"	v
multiply	src/veins/base/phyLayer/MappingUtils.cc	/^Mapping* MappingUtils::multiply(const ConstMapping &f1, const ConstMapping &f2)$/;"	f	class:MappingUtils
multiply	src/veins/base/phyLayer/MappingUtils.cc	/^Mapping* MappingUtils::multiply(const ConstMapping &f1, const ConstMapping &f2, Mapping::argument_value_cref_t outOfRangeVal)$/;"	f	class:MappingUtils
myAddVehicleTimer	src/veins/modules/mobility/traci/TraCIScenarioManager.h	/^		cMessage* myAddVehicleTimer;$/;"	m	class:Veins::TraCIScenarioManager
myApplAddr	src/veins/base/modules/BaseApplLayer.h	/^	virtual const LAddress::L3Type myApplAddr() const {$/;"	f	class:BaseApplLayer
myBusyTime	src/veins/modules/phy/Decider80211p.h	/^		double myBusyTime;$/;"	m	class:Decider80211p
myDimension	src/veins/base/phyLayer/MappingUtils.h	/^	Dimension myDimension;$/;"	m	class:MultiDimMapping
myEDCA	src/veins/modules/mac/ieee80211p/Mac1609_4.h	/^		std::map<t_channel,EDCA*> myEDCA;$/;"	m	class:Mac1609_4
myId	src/veins/modules/application/ieee80211p/BaseWaveApplLayer.h	/^		int myId;$/;"	m	class:BaseWaveApplLayer
myId	src/veins/modules/application/platooning/apps/BaseApp.h	/^		int myId;$/;"	m	class:BaseApp
myId	src/veins/modules/application/platooning/protocols/BaseProtocol.h	/^		int myId;$/;"	m	class:BaseProtocol
myId	src/veins/modules/mac/ieee80211p/Mac1609_4.h	/^				std::string myId;$/;"	m	class:Mac1609_4::EDCA
myId	src/veins/modules/mac/ieee80211p/Mac1609_4.h	/^		std::string myId;$/;"	m	class:Mac1609_4
myIndex	src/veins/base/phyLayer/BaseDecider.h	/^	int myIndex;$/;"	m	class:BaseDecider
myMac	src/veins/modules/application/ieee80211p/BaseWaveApplLayer.h	/^		WaveAppToMac1609_4Interface* myMac;$/;"	m	class:BaseWaveApplLayer
myMacAddr	src/veins/base/modules/BaseMacLayer.h	/^    LAddress::L2Type myMacAddr;$/;"	m	class:BaseMacLayer
myMacAddress	src/veins/modules/mac/ieee80211p/Mac1609_4.h	/^		int myMacAddress;$/;"	m	class:Mac1609_4
myPath	src/veins/modules/phy/Decider80211p.h	/^		std::string myPath;$/;"	m	class:Decider80211p
myProtocolId	src/veins/base/phyLayer/BasePhyLayer.h	/^	virtual int myProtocolId() { return protocolId; }$/;"	f	class:BasePhyLayer
myQueues	src/veins/modules/mac/ieee80211p/Mac1609_4.h	/^				std::map<t_access_category,EDCAQueue> myQueues;$/;"	m	class:Mac1609_4::EDCA
myRole	src/veins/modules/application/platooning/bikes/BikeManeuver.h	/^        ROLE myRole;$/;"	m	class:BikeManeuver
mySCH	src/veins/modules/application/ieee80211p/BaseWaveApplLayer.h	/^		int mySCH;$/;"	m	class:BaseWaveApplLayer
mySCH	src/veins/modules/mac/ieee80211p/Mac1609_4.h	/^		int mySCH;$/;"	m	class:Mac1609_4
myStartTime	src/veins/modules/phy/Decider80211p.h	/^		double myStartTime;$/;"	m	class:Decider80211p
myType	src/veins/modules/application/platooning/bikeplatoons/BikesApp.h	/^        int myType;$/;"	m	class:BikesApp
nAttempts	src/veins/modules/application/platooning/UnicastProtocol.h	/^		int nAttempts;$/;"	m	class:UnicastProtocol
n_dbps	src/veins/modules/mac/ieee80211p/Mac1609_4.h	/^		double n_dbps;$/;"	m	class:Mac1609_4
name	src/veins/base/utils/PassedMessage.h	/^    const char* name;$/;"	m	class:PassedMessage
nbChannels	src/veins/base/phyLayer/PhyUtils.h	/^	int nbChannels;$/;"	m	class:Veins::Radio
ned_flags	debug	/^ned_flags = ['-n' + ';'.join(run_neds)]$/;"	v
ned_flags	memcheck	/^ned_flags = ['-n' + ';'.join(run_neds)]$/;"	v
ned_flags	run	/^ned_flags = ['-n' + ';'.join(run_neds)]$/;"	v
ned_flags	src/scripts/debug.in.py	/^ned_flags = ['-n' + ';'.join(run_neds)]$/;"	v
ned_flags	src/scripts/memcheck.in.py	/^ned_flags = ['-n' + ';'.join(run_neds)]$/;"	v
ned_flags	src/scripts/run.in.py	/^ned_flags = ['-n' + ';'.join(run_neds)]$/;"	v
netbounds1	src/veins/modules/mobility/traci/TraCIConnection.h	/^		TraCICoord netbounds1; \/* network boundaries as reported by TraCI (x1, y1) *\/$/;"	m	class:Veins::TraCIConnection
netbounds2	src/veins/modules/mobility/traci/TraCIConnection.h	/^		TraCICoord netbounds2; \/* network boundaries as reported by TraCI (x2, y2) *\/$/;"	m	class:Veins::TraCIConnection
newRoute	src/veins/modules/mobility/traci/TraCICommandInterface.cc	/^void TraCICommandInterface::Vehicle::newRoute(std::string roadId) {$/;"	f	class:Veins::TraCICommandInterface::Vehicle
next	src/veins/base/connectionManager/BaseConnectionManager.h	/^		GridCoord* next() {$/;"	f	class:BaseConnectionManager::CoordSet
next	src/veins/base/phyLayer/ChannelInfo.h	/^		AirFrame* next()$/;"	f	class:ChannelInfo::BaseIntersectionIterator
next	src/veins/base/phyLayer/Interpolation.h	/^	void next() {$/;"	f	class:ConstInterpolateableIterator
next	src/veins/base/phyLayer/MappingBase.h	/^	virtual void next() {$/;"	f	class:SimpleConstMappingIterator
next	src/veins/base/phyLayer/MappingUtils.h	/^	virtual void next() { assert(false); }$/;"	f	class:LinearIntplMappingIterator
next	src/veins/base/phyLayer/MappingUtils.h	/^	virtual void next() { iterator->next(); }$/;"	f	class:ConstMappingIteratorWrapper
next	src/veins/base/phyLayer/MappingUtils.h	/^	virtual void next() { origIterator->next(); }$/;"	f	class:BaseFilteredIterator
next	src/veins/base/phyLayer/MappingUtils.h	/^	virtual void next() {$/;"	f	class:BaseDelayedIterator
next	src/veins/base/phyLayer/MappingUtils.h	/^	virtual void next() {$/;"	f	class:TimeMappingIterator
next	src/veins/base/phyLayer/MappingUtils.h	/^	virtual void next(){$/;"	f	class:MultiDimMappingIterator
next	src/veins/base/phyLayer/PhyUtils.h	/^	virtual void next() {$/;"	f	class:RSAMConstMappingIterator
nextChannelSwitch	src/veins/modules/mac/ieee80211p/Mac1609_4.h	/^		cMessage* nextChannelSwitch;$/;"	m	class:Mac1609_4
nextEntry	src/veins/base/phyLayer/MappingBase.h	/^	KeyEntrySet::const_iterator nextEntry;$/;"	m	class:SimpleConstMappingIterator
nextFreeID	src/veins/base/phyLayer/MappingBase.cc	/^Dimension::DimensionIdType& Dimension::nextFreeID () {$/;"	f	class:Dimension
nextHopMac	src/veins/base/utils/NetwToMacControlInfo.h	/^	LAddress::L2Type nextHopMac;$/;"	m	class:NetwToMacControlInfo
nextMacEvent	src/veins/modules/mac/ieee80211p/Mac1609_4.h	/^		cMessage* nextMacEvent;$/;"	m	class:Mac1609_4
nextNodeVectorIndex	src/veins/modules/mobility/traci/TraCIScenarioManager.h	/^		size_t nextNodeVectorIndex; \/**< next OMNeT++ module vector index to use *\/$/;"	m	class:Veins::TraCIScenarioManager
nextPosition	src/veins/base/phyLayer/MappingUtils.h	/^	Argument     nextPosition;$/;"	m	class:TimeMappingIterator
nextPosition	src/veins/base/phyLayer/MappingUtils.h	/^	Argument nextPosition;$/;"	m	class:BaseDelayedIterator
nextPosition	src/veins/base/phyLayer/MappingUtils.h	/^	Argument nextPosition;$/;"	m	class:MultiDimMappingIterator
nextPosition	src/veins/base/phyLayer/PhyUtils.h	/^	Argument nextPosition;$/;"	m	class:RSAMConstMappingIterator
nextPosition	src/veins/modules/mobility/traci/TraCIMobility.cc	/^void TraCIMobility::nextPosition(const Coord& position, std::string road_id, double speed, double angle, TraCIScenarioManager::VehicleSignal signals)$/;"	f	class:TraCIMobility
nextState	src/veins/base/phyLayer/PhyUtils.h	/^	int nextState;$/;"	m	class:Veins::Radio
nicEV	src/veins/base/connectionManager/NicEntryDebug.cc	30;"	d	file:
nicEV	src/veins/base/connectionManager/NicEntryDirect.cc	27;"	d	file:
nicGrid	src/veins/base/connectionManager/BaseConnectionManager.h	/^    NicCube nicGrid;$/;"	m	class:BaseConnectionManager
nicId	src/veins/base/connectionManager/NicEntry.h	/^    int nicId;$/;"	m	class:NicEntry
nicPtr	src/veins/base/connectionManager/NicEntry.h	/^    cModule *nicPtr;$/;"	m	class:NicEntry
nics	src/veins/base/connectionManager/BaseConnectionManager.h	/^	NicEntries nics;$/;"	m	class:BaseConnectionManager
nodeId	src/veins/modules/mobility/traci/TraCICommandInterface.h	/^				std::string nodeId;$/;"	m	class:Veins::TraCICommandInterface::Vehicle
nodeIdOut	src/veins/modules/application/platooning/protocols/BaseProtocol.h	/^		cOutVector distanceOut, relSpeedOut, nodeIdOut, speedOut, posxOut, posyOut, accelerationOut;$/;"	m	class:BaseProtocol
notAffectedByHostState	src/veins/base/modules/BaseModule.h	/^    bool notAffectedByHostState;$/;"	m	class:BaseModule
notAgain	src/veins/base/phyLayer/Decider.h	/^	const simtime_t notAgain;$/;"	m	class:Decider
numInitStages	src/veins/base/connectionManager/BaseConnectionManager.h	/^	virtual int numInitStages() const {$/;"	f	class:BaseConnectionManager
numInitStages	src/veins/base/modules/BaseModule.h	/^    virtual int numInitStages() const {$/;"	f	class:BaseModule
numInitStages	src/veins/modules/application/traci/TraCITestApp.h	/^		int numInitStages() const { return std::max(BaseApplLayer::numInitStages(), 1); }$/;"	f	class:Veins::TraCITestApp
numInitStages	src/veins/modules/mobility/traci/TraCIScenarioManager.h	/^		virtual int numInitStages() const { return std::max(cSimpleModule::numInitStages(), 2); }$/;"	f	class:Veins::TraCIScenarioManager
numInitStages	src/veins/modules/obstacle/ObstacleControl.h	/^		int numInitStages() const { return 2; }$/;"	f	class:Veins::ObstacleControl
numQueues	src/veins/modules/mac/ieee80211p/Mac1609_4.h	/^				int numQueues;$/;"	m	class:Mac1609_4::EDCA
numRadioStates	src/veins/base/phyLayer/PhyUtils.h	/^	const int numRadioStates;$/;"	m	class:Veins::Radio
numVehicles	src/veins/modules/mobility/traci/TraCIScenarioManager.h	/^		int numVehicles;$/;"	m	class:Veins::TraCIScenarioManager
obstacleControl	src/veins/modules/analogueModel/SimpleObstacleShadowing.h	/^	ObstacleControl& obstacleControl;$/;"	m	class:SimpleObstacleShadowing
obstacles	src/veins/modules/obstacle/ObstacleControl.h	/^		Obstacles obstacles;$/;"	m	class:Veins::ObstacleControl
obstaclesXml	src/veins/modules/obstacle/ObstacleControl.h	/^		cXMLElement* obstaclesXml; \/**< obstacles to add at startup *\/$/;"	m	class:Veins::ObstacleControl
omnet2traci	src/veins/modules/mobility/traci/TraCIConnection.cc	/^TraCICoord TraCIConnection::omnet2traci(Coord coord) const {$/;"	f	class:Veins::TraCIConnection
omnet2traci	src/veins/modules/mobility/traci/TraCIConnection.cc	/^std::list<TraCICoord> TraCIConnection::omnet2traci(const std::list<Coord>& list) const {$/;"	f	class:Veins::TraCIConnection
omnet2traciAngle	src/veins/modules/mobility/traci/TraCIConnection.cc	/^double TraCIConnection::omnet2traciAngle(double angle) const {$/;"	f	class:Veins::TraCIConnection
onBeacon	src/veins/modules/application/platooning/UnicastProtocol.cc	/^void UnicastProtocol::onBeacon(WaveShortMessage* wsm)$/;"	f	class:UnicastProtocol
onBeacon	src/veins/modules/application/platooning/apps/BaseApp.cc	/^void BaseApp::onBeacon(WaveShortMessage* wsm) {$/;"	f	class:BaseApp
onBeacon	src/veins/modules/application/platooning/apps/SimplePlatooningApp.cc	/^void SimplePlatooningApp::onBeacon(WaveShortMessage* wsm) {$/;"	f	class:SimplePlatooningApp
onBeacon	src/veins/modules/application/platooning/bikeplatoons/BikesApp.cc	/^void BikesApp::onBeacon( WaveShortMessage* wsm )$/;"	f	class:BikesApp
onBeacon	src/veins/modules/application/platooning/maneuver/JoinManeuverApp.cc	/^void JoinManeuverApp::onBeacon(WaveShortMessage* wsm) {$/;"	f	class:JoinManeuverApp
onBeacon	src/veins/modules/application/traci/TraCIDemo11p.cc	/^void TraCIDemo11p::onBeacon(WaveShortMessage* wsm) {$/;"	f	class:TraCIDemo11p
onBeacon	src/veins/modules/application/traci/TraCIDemoRSU11p.cc	/^void TraCIDemoRSU11p::onBeacon(WaveShortMessage* wsm) {$/;"	f	class:TraCIDemoRSU11p
onData	src/veins/modules/application/platooning/UnicastProtocol.cc	/^void UnicastProtocol::onData(WaveShortMessage* wsm)$/;"	f	class:UnicastProtocol
onData	src/veins/modules/application/platooning/apps/BaseApp.cc	/^void BaseApp::onData(WaveShortMessage *wsm) {$/;"	f	class:BaseApp
onData	src/veins/modules/application/platooning/apps/SimplePlatooningApp.cc	/^void SimplePlatooningApp::onData(WaveShortMessage *wsm) {$/;"	f	class:SimplePlatooningApp
onData	src/veins/modules/application/platooning/bikeplatoons/BikesApp.cc	/^void BikesApp::onData( WaveShortMessage *wsm )$/;"	f	class:BikesApp
onData	src/veins/modules/application/platooning/maneuver/JoinManeuverApp.cc	/^void JoinManeuverApp::onData(WaveShortMessage *wsm) {$/;"	f	class:JoinManeuverApp
onData	src/veins/modules/application/traci/TraCIDemo11p.cc	/^void TraCIDemo11p::onData(WaveShortMessage* wsm) {$/;"	f	class:TraCIDemo11p
onData	src/veins/modules/application/traci/TraCIDemoRSU11p.cc	/^void TraCIDemoRSU11p::onData(WaveShortMessage* wsm) {$/;"	f	class:TraCIDemoRSU11p
oorValue	src/veins/base/phyLayer/MappingUtils.h	/^	Argument::mapped_type oorValue;$/;"	m	class:ConcatConstMapping
op	src/veins/base/phyLayer/MappingUtils.h	/^	Operator op;$/;"	m	class:ConcatConstMapping
operator !=	src/veins/base/connectionManager/BaseConnectionManager.h	/^		friend bool operator!=(const GridCoord& a, const GridCoord& b) {$/;"	f	class:BaseConnectionManager::GridCoord
operator !=	src/veins/base/phyLayer/Interpolation.h	/^	bool operator!=(const Interpolated<value_type>& other) const {$/;"	f	class:Interpolated
operator !=	src/veins/base/phyLayer/MappingBase.h	/^	bool operator!=(const Dimension& other) const { return id != other.id; }$/;"	f	class:Dimension
operator !=	src/veins/base/phyLayer/MappingUtils.h	/^	bool operator!=(const Interpolated<value_type>& other) const {$/;"	f	class:Interpolated
operator !=	src/veins/base/utils/Coord.h	/^    friend bool operator!=(const Coord& a, const Coord& b) {$/;"	f	class:Coord
operator ()	src/veins/base/connectionManager/NicEntry.h	/^		bool operator() (const NicEntry* nic1, const NicEntry* nic2) const {$/;"	f	class:NicEntry::NicEntryComparator
operator ()	src/veins/base/phyLayer/Interpolation.h	/^	bool operator()(const Key& v, const Pair& p) const {$/;"	f	class:PairLess
operator ()	src/veins/base/phyLayer/Interpolation.h	/^	bool operator()(const Pair& left, const Pair& right) const {$/;"	f	class:PairLess
operator ()	src/veins/base/phyLayer/Interpolation.h	/^	bool operator()(const Pair& p, const Key& v) const {$/;"	f	class:PairLess
operator ()	src/veins/base/phyLayer/Interpolation.h	/^	interpolated operator()(const const_iterator& first,$/;"	f	class:InterpolatorBase
operator ()	src/veins/base/phyLayer/Interpolation.h	/^	interpolated operator()(const const_iterator& first,$/;"	f	class:Linear
operator ()	src/veins/base/phyLayer/Interpolation.h	/^	interpolated operator()(const const_iterator& first,$/;"	f	class:Nearest
operator ()	src/veins/base/phyLayer/Interpolation.h	/^	interpolated operator()(const const_iterator& first,$/;"	f	class:NextSmaller
operator ()	src/veins/base/phyLayer/MappingBase.h	/^	inline T operator()(const T& mW) {$/;"	f	struct:mixim::math::mW2dBm
operator ()	src/veins/base/phyLayer/MappingUtils.h	/^	interpolated operator()(const const_iterator&  first,$/;"	f	class:Linear
operator ()	src/veins/modules/mobility/traci/TraCIConnection.cc	/^	Coord operator()(const TraCICoord& coord) const {$/;"	f	struct:Veins::traci2omnet_functor
operator *	src/veins/base/phyLayer/Interpolation.h	/^	value_ref_type operator*() {$/;"	f	class:Interpolated
operator *	src/veins/base/phyLayer/MappingBase.h	/^	    const reference operator *() const$/;"	f	class:Argument::key_iterator
operator *	src/veins/base/phyLayer/MappingUtils.cc	/^Mapping* operator*(const ConstMapping& f1, const ConstMapping& f2) {$/;"	f
operator *	src/veins/base/phyLayer/MappingUtils.h	/^	value_ref_type operator*() {$/;"	f	class:Interpolated
operator *	src/veins/base/utils/Coord.h	/^    friend Coord operator*(const Coord& a, double f) {$/;"	f	class:Coord
operator *=	src/veins/base/utils/Coord.h	/^    Coord& operator*=(double f) {$/;"	f	class:Coord
operator +	src/veins/base/phyLayer/MappingUtils.cc	/^Mapping* operator+(const ConstMapping& f1, const ConstMapping& f2) {$/;"	f
operator +	src/veins/base/utils/Coord.h	/^    friend Coord operator+(const Coord& a, const Coord& b) {$/;"	f	class:Coord
operator +=	src/veins/base/utils/Coord.h	/^    Coord& operator+=(const Coord& a) {$/;"	f	class:Coord
operator -	src/veins/base/phyLayer/MappingUtils.cc	/^Mapping* operator-(const ConstMapping& f1,const  ConstMapping& f2) {$/;"	f
operator -	src/veins/base/utils/Coord.h	/^    friend Coord operator-(const Coord& a, const Coord& b) {$/;"	f	class:Coord
operator -=	src/veins/base/utils/Coord.h	/^    Coord& operator-=(const Coord& a) {$/;"	f	class:Coord
operator ->	src/veins/base/phyLayer/Interpolation.h	/^	value_ptr_type operator->() {$/;"	f	class:Interpolated
operator ->	src/veins/base/phyLayer/MappingBase.h	/^	    const pointer  operator ->() const$/;"	f	class:Argument::key_iterator
operator ->	src/veins/base/phyLayer/MappingUtils.h	/^	value_ptr_type operator->() {$/;"	f	class:Interpolated
operator /	src/veins/base/phyLayer/MappingUtils.cc	/^Mapping* operator\/(const ConstMapping& f1, const ConstMapping& f2) {$/;"	f
operator /	src/veins/base/utils/Coord.h	/^    friend Coord operator\/(const Coord& a, double f) {$/;"	f	class:Coord
operator /=	src/veins/base/utils/Coord.h	/^    Coord& operator\/=(double f) {$/;"	f	class:Coord
operator <	src/veins/base/phyLayer/MappingBase.cc	/^bool Argument::operator<(const Argument & o) const$/;"	f	class:Argument
operator <	src/veins/base/phyLayer/MappingBase.h	/^	bool operator<(const Dimension& other) const  { return id  < other.id; }$/;"	f	class:Dimension
operator <	src/veins/base/phyLayer/PhyUtils.h	/^		friend bool operator<(const ListEntry& e, simtime_t_cref t) {$/;"	f	class:RadioStateAnalogueModel::ListEntry
operator <	src/veins/base/phyLayer/PhyUtils.h	/^		friend bool operator<(const ListEntry& left, const ListEntry& right) {$/;"	f	class:RadioStateAnalogueModel::ListEntry
operator <	src/veins/base/phyLayer/PhyUtils.h	/^		friend bool operator<(simtime_t_cref t, const ListEntry& e) {$/;"	f	class:RadioStateAnalogueModel::ListEntry
operator <	src/veins/modules/obstacle/ObstacleControl.h	/^			bool operator<(const CacheKey& o) const {$/;"	f	struct:Veins::ObstacleControl::CacheKey
operator <<	src/veins/base/messages/AirFrame_m.cc	/^inline std::ostream& operator<<(std::ostream& out, const std::vector<T,A>& vec)$/;"	f	namespace:Veins
operator <<	src/veins/base/messages/AirFrame_m.cc	/^inline std::ostream& operator<<(std::ostream& out,const T&) {return out;}$/;"	f	namespace:Veins
operator <<	src/veins/base/messages/BorderMsg_m.cc	/^inline std::ostream& operator<<(std::ostream& out, const std::vector<T,A>& vec)$/;"	f
operator <<	src/veins/base/messages/BorderMsg_m.cc	/^inline std::ostream& operator<<(std::ostream& out,const T&) {return out;}$/;"	f
operator <<	src/veins/base/messages/ChannelSenseRequest_m.cc	/^inline std::ostream& operator<<(std::ostream& out, const std::vector<T,A>& vec)$/;"	f
operator <<	src/veins/base/messages/ChannelSenseRequest_m.cc	/^inline std::ostream& operator<<(std::ostream& out,const T&) {return out;}$/;"	f
operator <<	src/veins/base/messages/MacPkt_m.cc	/^inline std::ostream& operator<<(std::ostream& out, const std::vector<T,A>& vec)$/;"	f
operator <<	src/veins/base/messages/MacPkt_m.cc	/^inline std::ostream& operator<<(std::ostream& out,const T&) {return out;}$/;"	f
operator <<	src/veins/base/phyLayer/MappingBase.h	/^	friend std::ostream& operator<<(std::ostream& out, const Argument& d) {$/;"	f	class:Argument
operator <<	src/veins/base/phyLayer/MappingBase.h	/^	friend std::ostream& operator<<(std::ostream& out, const ConstMapping& rMapToPrint) {$/;"	f	class:ConstMapping
operator <<	src/veins/base/phyLayer/MappingBase.h	/^	friend std::ostream& operator<<(std::ostream& out, const Dimension& d) {$/;"	f	class:Dimension
operator <<	src/veins/base/utils/Coord.h	/^inline std::ostream& operator<<(std::ostream& os, const Coord& coord)$/;"	f
operator <<	src/veins/modules/application/platooning/messages/BikesMessage_m.cc	/^inline std::ostream& operator<<(std::ostream& out, const std::vector<T,A>& vec)$/;"	f
operator <<	src/veins/modules/application/platooning/messages/BikesMessage_m.cc	/^inline std::ostream& operator<<(std::ostream& out,const T&) {return out;}$/;"	f
operator <<	src/veins/modules/application/platooning/messages/ManeuverMessage_m.cc	/^inline std::ostream& operator<<(std::ostream& out, const std::vector<T,A>& vec)$/;"	f
operator <<	src/veins/modules/application/platooning/messages/ManeuverMessage_m.cc	/^inline std::ostream& operator<<(std::ostream& out,const T&) {return out;}$/;"	f
operator <<	src/veins/modules/application/platooning/messages/PlatooningBeacon_m.cc	/^inline std::ostream& operator<<(std::ostream& out, const std::vector<T,A>& vec)$/;"	f
operator <<	src/veins/modules/application/platooning/messages/PlatooningBeacon_m.cc	/^inline std::ostream& operator<<(std::ostream& out,const T&) {return out;}$/;"	f
operator <<	src/veins/modules/application/platooning/messages/UnicastMessage_m.cc	/^inline std::ostream& operator<<(std::ostream& out, const std::vector<T,A>& vec)$/;"	f
operator <<	src/veins/modules/application/platooning/messages/UnicastMessage_m.cc	/^inline std::ostream& operator<<(std::ostream& out,const T&) {return out;}$/;"	f
operator <<	src/veins/modules/application/platooning/messages/UnicastProtocolControlMessage_m.cc	/^inline std::ostream& operator<<(std::ostream& out, const std::vector<T,A>& vec)$/;"	f
operator <<	src/veins/modules/application/platooning/messages/UnicastProtocolControlMessage_m.cc	/^inline std::ostream& operator<<(std::ostream& out,const T&) {return out;}$/;"	f
operator <<	src/veins/modules/messages/AirFrame11p_m.cc	/^inline std::ostream& operator<<(std::ostream& out, const std::vector<T,A>& vec)$/;"	f
operator <<	src/veins/modules/messages/AirFrame11p_m.cc	/^inline std::ostream& operator<<(std::ostream& out,const T&) {return out;}$/;"	f
operator <<	src/veins/modules/messages/Mac80211Pkt_m.cc	/^inline std::ostream& operator<<(std::ostream& out, const std::vector<T,A>& vec)$/;"	f
operator <<	src/veins/modules/messages/Mac80211Pkt_m.cc	/^inline std::ostream& operator<<(std::ostream& out,const T&) {return out;}$/;"	f
operator <<	src/veins/modules/messages/PhyControlMessage_m.cc	/^inline std::ostream& operator<<(std::ostream& out, const std::vector<T,A>& vec)$/;"	f
operator <<	src/veins/modules/messages/PhyControlMessage_m.cc	/^inline std::ostream& operator<<(std::ostream& out,const T&) {return out;}$/;"	f
operator <<	src/veins/modules/messages/WaveShortMessage_m.cc	/^inline std::ostream& operator<<(std::ostream& out, const std::vector<T,A>& vec)$/;"	f
operator <<	src/veins/modules/messages/WaveShortMessage_m.cc	/^inline std::ostream& operator<<(std::ostream& out,const T&) {return out;}$/;"	f
operator <<	src/veins/modules/mobility/traci/TraCIBuffer.h	/^		template<typename T> TraCIBuffer& operator <<(const T& inv) {$/;"	f	class:Veins::TraCIBuffer
operator <=	src/veins/base/phyLayer/MappingBase.h	/^	bool operator<=(const Dimension& other) const { return id <= other.id; }$/;"	f	class:Dimension
operator =	src/veins/base/messages/AirFrame_m.cc	/^AirFrame& AirFrame::operator=(const AirFrame& other)$/;"	f	class:Veins::AirFrame
operator =	src/veins/base/messages/BorderMsg_m.cc	/^BorderMsg& BorderMsg::operator=(const BorderMsg& other)$/;"	f	class:BorderMsg
operator =	src/veins/base/messages/ChannelSenseRequest_m.cc	/^ChannelSenseRequest& ChannelSenseRequest::operator=(const ChannelSenseRequest& other)$/;"	f	class:ChannelSenseRequest
operator =	src/veins/base/messages/MacPkt_m.cc	/^MacPkt& MacPkt::operator=(const MacPkt& other)$/;"	f	class:MacPkt
operator =	src/veins/base/phyLayer/MappingBase.cc	/^void Argument::operator=(const Argument& o){$/;"	f	class:Argument
operator =	src/veins/base/phyLayer/MappingUtils.h	/^	const Interpolated<value_type>& operator=(const Interpolated<value_type>& o){$/;"	f	class:Interpolated
operator =	src/veins/base/phyLayer/MappingUtils.h	/^	const MultiDimMapping& operator=(const MultiDimMapping<Interpolator>& o){$/;"	f	class:MultiDimMapping
operator =	src/veins/base/phyLayer/Signal.cc	/^const Signal& Signal::operator=(const Signal& o) {$/;"	f	class:Signal
operator =	src/veins/base/utils/Coord.h	/^    Coord& operator=(const Coord& other) {$/;"	f	class:Coord
operator =	src/veins/modules/application/platooning/messages/BikesMessage_m.cc	/^BikesMessage& BikesMessage::operator=(const BikesMessage& other)$/;"	f	class:BikesMessage
operator =	src/veins/modules/application/platooning/messages/ManeuverMessage_m.cc	/^ManeuverMessage& ManeuverMessage::operator=(const ManeuverMessage& other)$/;"	f	class:ManeuverMessage
operator =	src/veins/modules/application/platooning/messages/PlatooningBeacon_m.cc	/^PlatooningBeacon& PlatooningBeacon::operator=(const PlatooningBeacon& other)$/;"	f	class:PlatooningBeacon
operator =	src/veins/modules/application/platooning/messages/UnicastMessage_m.cc	/^UnicastMessage& UnicastMessage::operator=(const UnicastMessage& other)$/;"	f	class:UnicastMessage
operator =	src/veins/modules/application/platooning/messages/UnicastProtocolControlMessage_m.cc	/^UnicastProtocolControlMessage& UnicastProtocolControlMessage::operator=(const UnicastProtocolControlMessage& other)$/;"	f	class:UnicastProtocolControlMessage
operator =	src/veins/modules/messages/AirFrame11p_m.cc	/^AirFrame11p& AirFrame11p::operator=(const AirFrame11p& other)$/;"	f	class:AirFrame11p
operator =	src/veins/modules/messages/Mac80211Pkt_m.cc	/^Mac80211Pkt& Mac80211Pkt::operator=(const Mac80211Pkt& other)$/;"	f	class:Mac80211Pkt
operator =	src/veins/modules/messages/PhyControlMessage_m.cc	/^PhyControlMessage& PhyControlMessage::operator=(const PhyControlMessage& other)$/;"	f	class:PhyControlMessage
operator =	src/veins/modules/messages/WaveShortMessage_m.cc	/^WaveShortMessage& WaveShortMessage::operator=(const WaveShortMessage& other)$/;"	f	class:WaveShortMessage
operator ==	src/veins/base/connectionManager/BaseConnectionManager.h	/^		friend bool operator==(const GridCoord& a, const GridCoord& b) {$/;"	f	class:BaseConnectionManager::GridCoord
operator ==	src/veins/base/phyLayer/Interpolation.h	/^	bool operator==(const ConstInterpolateableIterator& other) {$/;"	f	class:ConstInterpolateableIterator
operator ==	src/veins/base/phyLayer/Interpolation.h	/^	bool operator==(const Interpolated<value_type>& other) const {$/;"	f	class:Interpolated
operator ==	src/veins/base/phyLayer/MappingBase.cc	/^bool Argument::operator==(const Argument & o) const$/;"	f	class:Argument
operator ==	src/veins/base/phyLayer/MappingBase.h	/^	bool operator==(const Dimension& other) const { return id == other.id; }$/;"	f	class:Dimension
operator ==	src/veins/base/phyLayer/MappingBase.h	/^	bool operator==(const DimensionSet& o){$/;"	f	class:DimensionSet
operator ==	src/veins/base/phyLayer/MappingUtils.h	/^	bool operator==(const Interpolated<value_type>& other) const {$/;"	f	class:Interpolated
operator ==	src/veins/base/utils/Coord.h	/^    friend bool operator==(const Coord& a, const Coord& b) {$/;"	f	class:Coord
operator >	src/veins/base/phyLayer/MappingBase.h	/^	bool operator>(const Dimension& other) const  { return id  > other.id; }$/;"	f	class:Dimension
operator >=	src/veins/base/phyLayer/MappingBase.h	/^	bool operator>=(const Dimension& other) const { return id >= other.id; }$/;"	f	class:Dimension
operator >>	src/veins/modules/mobility/traci/TraCIBuffer.h	/^		template<typename T> TraCIBuffer& operator >>(T& out) {$/;"	f	class:Veins::TraCIBuffer
operator []	src/veins/base/phyLayer/MappingBase.h	/^	argument_value_t operator[](const Argument& pos) const {$/;"	f	class:ConstMapping
operator simsignal_t	src/veins/base/utils/MiXiMDefs.h	/^	operator simsignal_t () const {$/;"	f	class:simsignalwrap_t
origDisplayHeight	src/veins/base/modules/BaseMobility.h	/^    double origDisplayHeight;$/;"	m	class:BaseMobility
origDisplayWidth	src/veins/base/modules/BaseMobility.h	/^    double origDisplayWidth;$/;"	m	class:BaseMobility
origIconSize	src/veins/base/modules/BaseMobility.h	/^    double origIconSize;$/;"	m	class:BaseMobility
origIterator	src/veins/base/phyLayer/MappingUtils.h	/^	Base* origIterator;$/;"	m	class:BaseFilteredIterator
orig_speed	examples/platoonBikes/sumocfg/runner.py	/^orig_speed = dict()$/;"	v
outCnt	src/veins/base/connectionManager/NicEntryDebug.h	/^    int outCnt;$/;"	m	class:NicEntryDebug
outConns	src/veins/base/connectionManager/NicEntry.h	/^    GateList outConns;$/;"	m	class:NicEntry
outOfRangeMapping	src/veins/base/phyLayer/MappingUtils.h	/^	ConstantSimpleConstMapping* outOfRangeMapping;$/;"	m	class:MultiDimMapping
outOfRangeVal	src/veins/base/phyLayer/Interpolation.h	/^	interpolated       outOfRangeVal;$/;"	m	class:InterpolatorBase
owner	src/veins/modules/mobility/traci/TraCIConnection.cc	/^	const TraCIConnection& owner;$/;"	m	struct:Veins::traci2omnet_functor	file:
p1	src/veins/modules/world/annotations/AnnotationManager.h	/^				Coord p1;$/;"	m	class:Veins::AnnotationManager::Line
p2	src/veins/modules/world/annotations/AnnotationManager.h	/^				Coord p2;$/;"	m	class:Veins::AnnotationManager::Line
pModule	src/veins/base/utils/FindModule.h	/^		T* pModule;$/;"	m	class:AccessModuleWrap
packetErrorRate	src/veins/modules/analogueModel/PERModel.h	/^	double packetErrorRate;$/;"	m	class:PERModel
packetLossRate	src/veins/modules/application/platooning/UnicastProtocol.h	/^		double packetLossRate;$/;"	m	class:UnicastProtocol
packetOk	src/veins/modules/phy/Decider80211p.cc	/^enum Decider80211p::PACKET_OK_RESULT Decider80211p::packetOk(double snirMin, double snrMin, int lengthMPDU, double bitrate) {$/;"	f	class:Decider80211p
packetSize	src/veins/modules/application/platooning/protocols/BaseProtocol.h	/^		int packetSize;$/;"	m	class:BaseProtocol
pair_type	src/veins/base/phyLayer/Interpolation.h	/^	typedef typename base_class_type::pair_type        pair_type;$/;"	t	class:Linear
pair_type	src/veins/base/phyLayer/Interpolation.h	/^	typedef typename base_class_type::pair_type        pair_type;$/;"	t	class:Nearest
pair_type	src/veins/base/phyLayer/Interpolation.h	/^	typedef typename base_class_type::pair_type        pair_type;$/;"	t	class:NextSmaller
pair_type	src/veins/base/phyLayer/Interpolation.h	/^	typedef typename base_class_type::value_type                    pair_type;$/;"	t	class:InterpolateableMap
pair_type	src/veins/base/phyLayer/Interpolation.h	/^	typedef typename container_type::value_type                     pair_type;$/;"	t	class:InterpolateableIterator
pair_type	src/veins/base/phyLayer/Interpolation.h	/^	typedef typename interpolator_type::pair_type        pair_type;$/;"	t	class:ConstInterpolateableIterator
pair_type	src/veins/base/phyLayer/Interpolation.h	/^	typedef typename storage_type::value_type     pair_type;$/;"	t	class:InterpolatorBase
pair_type	src/veins/base/phyLayer/MappingUtils.h	/^	typedef base_class_type::pair_type        pair_type;$/;"	t	class:Linear
parkingStateChangedSignal	src/veins/modules/application/traci/TraCIDemo11p.cc	/^const simsignalwrap_t TraCIDemo11p::parkingStateChangedSignal = simsignalwrap_t(TRACI_SIGNAL_PARKING_CHANGE_NAME);$/;"	m	class:TraCIDemo11p	file:
parkingStateChangedSignal	src/veins/modules/application/traci/TraCIDemo11p.h	/^		static const simsignalwrap_t parkingStateChangedSignal;$/;"	m	class:TraCIDemo11p
parkingStateChangedSignal	src/veins/modules/mobility/traci/TraCIMobility.cc	/^const simsignalwrap_t TraCIMobility::parkingStateChangedSignal = simsignalwrap_t(TRACI_SIGNAL_PARKING_CHANGE_NAME);$/;"	m	class:TraCIMobility	file:
parkingStateChangedSignal	src/veins/modules/mobility/traci/TraCIMobility.h	/^		const static simsignalwrap_t parkingStateChangedSignal;$/;"	m	class:Veins::TraCIMobility
parkingVehicleCount	src/veins/modules/mobility/traci/TraCIScenarioManager.h	/^		uint32_t parkingVehicleCount; \/**< number of parking vehicles, derived from parking start\/end events *\/$/;"	m	class:Veins::TraCIScenarioManager
parseMappings	src/veins/modules/mobility/traci/TraCIScenarioManager.cc	/^TraCIScenarioManager::TypeMapping TraCIScenarioManager::parseMappings(std::string parameter, std::string parameterName, bool allowEmpty) {$/;"	f	class:TraCIScenarioManager
parseModuleTypes	src/veins/modules/mobility/traci/TraCIScenarioManager.cc	/^void TraCIScenarioManager::parseModuleTypes() {$/;"	f	class:TraCIScenarioManager
parse_launch_configuration	sumo-launchd.py	/^def parse_launch_configuration(launch_xml_string):$/;"	f
parser	configure	/^parser = OptionParser()$/;"	v
parsimPack	src/veins/base/messages/AirFrame_m.cc	/^void AirFrame::parsimPack(cCommBuffer *b)$/;"	f	class:Veins::AirFrame
parsimPack	src/veins/base/messages/BorderMsg_m.cc	/^void BorderMsg::parsimPack(cCommBuffer *b)$/;"	f	class:BorderMsg
parsimPack	src/veins/base/messages/ChannelSenseRequest_m.cc	/^void ChannelSenseRequest::parsimPack(cCommBuffer *b)$/;"	f	class:ChannelSenseRequest
parsimPack	src/veins/base/messages/MacPkt_m.cc	/^void MacPkt::parsimPack(cCommBuffer *b)$/;"	f	class:MacPkt
parsimPack	src/veins/modules/application/platooning/messages/BikesMessage_m.cc	/^void BikesMessage::parsimPack(cCommBuffer *b)$/;"	f	class:BikesMessage
parsimPack	src/veins/modules/application/platooning/messages/ManeuverMessage_m.cc	/^void ManeuverMessage::parsimPack(cCommBuffer *b)$/;"	f	class:ManeuverMessage
parsimPack	src/veins/modules/application/platooning/messages/PlatooningBeacon_m.cc	/^void PlatooningBeacon::parsimPack(cCommBuffer *b)$/;"	f	class:PlatooningBeacon
parsimPack	src/veins/modules/application/platooning/messages/UnicastMessage_m.cc	/^void UnicastMessage::parsimPack(cCommBuffer *b)$/;"	f	class:UnicastMessage
parsimPack	src/veins/modules/application/platooning/messages/UnicastProtocolControlMessage_m.cc	/^void UnicastProtocolControlMessage::parsimPack(cCommBuffer *b)$/;"	f	class:UnicastProtocolControlMessage
parsimPack	src/veins/modules/messages/AirFrame11p_m.cc	/^void AirFrame11p::parsimPack(cCommBuffer *b)$/;"	f	class:AirFrame11p
parsimPack	src/veins/modules/messages/Mac80211Pkt_m.cc	/^void Mac80211Pkt::parsimPack(cCommBuffer *b)$/;"	f	class:Mac80211Pkt
parsimPack	src/veins/modules/messages/PhyControlMessage_m.cc	/^void PhyControlMessage::parsimPack(cCommBuffer *b)$/;"	f	class:PhyControlMessage
parsimPack	src/veins/modules/messages/WaveShortMessage_m.cc	/^void WaveShortMessage::parsimPack(cCommBuffer *b)$/;"	f	class:WaveShortMessage
parsimUnpack	src/veins/base/messages/AirFrame_m.cc	/^void AirFrame::parsimUnpack(cCommBuffer *b)$/;"	f	class:Veins::AirFrame
parsimUnpack	src/veins/base/messages/BorderMsg_m.cc	/^void BorderMsg::parsimUnpack(cCommBuffer *b)$/;"	f	class:BorderMsg
parsimUnpack	src/veins/base/messages/ChannelSenseRequest_m.cc	/^void ChannelSenseRequest::parsimUnpack(cCommBuffer *b)$/;"	f	class:ChannelSenseRequest
parsimUnpack	src/veins/base/messages/MacPkt_m.cc	/^void MacPkt::parsimUnpack(cCommBuffer *b)$/;"	f	class:MacPkt
parsimUnpack	src/veins/modules/application/platooning/messages/BikesMessage_m.cc	/^void BikesMessage::parsimUnpack(cCommBuffer *b)$/;"	f	class:BikesMessage
parsimUnpack	src/veins/modules/application/platooning/messages/ManeuverMessage_m.cc	/^void ManeuverMessage::parsimUnpack(cCommBuffer *b)$/;"	f	class:ManeuverMessage
parsimUnpack	src/veins/modules/application/platooning/messages/PlatooningBeacon_m.cc	/^void PlatooningBeacon::parsimUnpack(cCommBuffer *b)$/;"	f	class:PlatooningBeacon
parsimUnpack	src/veins/modules/application/platooning/messages/UnicastMessage_m.cc	/^void UnicastMessage::parsimUnpack(cCommBuffer *b)$/;"	f	class:UnicastMessage
parsimUnpack	src/veins/modules/application/platooning/messages/UnicastProtocolControlMessage_m.cc	/^void UnicastProtocolControlMessage::parsimUnpack(cCommBuffer *b)$/;"	f	class:UnicastProtocolControlMessage
parsimUnpack	src/veins/modules/messages/AirFrame11p_m.cc	/^void AirFrame11p::parsimUnpack(cCommBuffer *b)$/;"	f	class:AirFrame11p
parsimUnpack	src/veins/modules/messages/Mac80211Pkt_m.cc	/^void Mac80211Pkt::parsimUnpack(cCommBuffer *b)$/;"	f	class:Mac80211Pkt
parsimUnpack	src/veins/modules/messages/PhyControlMessage_m.cc	/^void PhyControlMessage::parsimUnpack(cCommBuffer *b)$/;"	f	class:PhyControlMessage
parsimUnpack	src/veins/modules/messages/WaveShortMessage_m.cc	/^void WaveShortMessage::parsimUnpack(cCommBuffer *b)$/;"	f	class:WaveShortMessage
pass	src/veins/base/utils/asserts.cc	/^void pass(std::string msg, bool hidePassed) {$/;"	f
passedMsg	src/veins/base/modules/BaseLayer.h	/^    PassedMessage *passedMsg;$/;"	m	class:BaseLayer
pathLossAlphaHalf	src/veins/modules/analogueModel/SimplePathlossModel.h	/^	double pathLossAlphaHalf;$/;"	m	class:SimplePathlossModel
pathlosses	src/veins/modules/analogueModel/BreakpointPathlossModel.h	/^    cOutVector pathlosses;$/;"	m	class:BreakpointPathlossModel
penetrationRate	src/veins/modules/mobility/traci/TraCIScenarioManager.h	/^		double penetrationRate;$/;"	m	class:Veins::TraCIScenarioManager
phy	src/veins/base/modules/BaseMacLayer.h	/^    MacToPhyInterface* phy;$/;"	m	class:BaseMacLayer
phy	src/veins/base/phyLayer/Decider.h	/^	DeciderToPhyInterface* phy;$/;"	m	class:Decider
phy11p	src/veins/modules/mac/ieee80211p/Mac1609_4.h	/^		Mac80211pToPhy11pInterface* phy11p;$/;"	m	class:Mac1609_4
phy11p	src/veins/modules/phy/Decider80211p.h	/^		Decider80211pToPhy80211pInterface* phy11p;$/;"	m	class:Decider80211p
phyHeaderLength	src/veins/base/modules/BaseMacLayer.h	/^    int phyHeaderLength;$/;"	m	class:BaseMacLayer
placeRandomlyIfOutside	src/veins/base/modules/BaseMobility.cc	/^void BaseMobility::placeRandomlyIfOutside( Coord& targetPos )$/;"	f	class:BaseMobility
platoonFormation_arraysize	src/veins/modules/application/platooning/messages/BikesMessage_m.h	/^    unsigned int platoonFormation_arraysize;$/;"	m	class:BikesMessage
platoonFormation_arraysize	src/veins/modules/application/platooning/messages/ManeuverMessage_m.h	/^    unsigned int platoonFormation_arraysize;$/;"	m	class:ManeuverMessage
platoonFormation_var	src/veins/modules/application/platooning/messages/BikesMessage_m.h	/^    int *platoonFormation_var; \/\/ array ptr$/;"	m	class:BikesMessage
platoonFormation_var	src/veins/modules/application/platooning/messages/ManeuverMessage_m.h	/^    int *platoonFormation_var; \/\/ array ptr$/;"	m	class:ManeuverMessage
platoonId	src/veins/modules/application/platooning/bikeplatoons/BikesApp.h	/^			int					platoonId;	\/\/id of the platoon$/;"	m	struct:BikesApp::VEHICLE_DATA
platoonId	src/veins/modules/application/platooning/bikes/BikeManeuver.h	/^			int platoonId;              \/\/id of the platoon$/;"	m	struct:BikeManeuver::VEHICLE_DATA
platoonId	src/veins/modules/application/platooning/maneuver/JoinManeuverApp.h	/^			int					platoonId;	\/\/id of the platoon$/;"	m	struct:JoinManeuverApp::VEHICLE_DATA
platoonId_var	src/veins/modules/application/platooning/messages/BikesMessage_m.h	/^    int platoonId_var;$/;"	m	class:BikesMessage
platoonId_var	src/veins/modules/application/platooning/messages/ManeuverMessage_m.h	/^    int platoonId_var;$/;"	m	class:ManeuverMessage
platoonLane_var	src/veins/modules/application/platooning/messages/BikesMessage_m.h	/^    int platoonLane_var;$/;"	m	class:BikesMessage
platoonLane_var	src/veins/modules/application/platooning/messages/ManeuverMessage_m.h	/^    int platoonLane_var;$/;"	m	class:ManeuverMessage
platoonSpeed_var	src/veins/modules/application/platooning/messages/BikesMessage_m.h	/^    double platoonSpeed_var;$/;"	m	class:BikesMessage
platoonSpeed_var	src/veins/modules/application/platooning/messages/ManeuverMessage_m.h	/^    double platoonSpeed_var;$/;"	m	class:ManeuverMessage
playgroundScaleX	src/veins/base/modules/BaseMobility.h	/^    double playgroundScaleX;$/;"	m	class:BaseMobility
playgroundScaleY	src/veins/base/modules/BaseMobility.h	/^    double playgroundScaleY;$/;"	m	class:BaseMobility
playgroundSize	src/veins/base/connectionManager/BaseConnectionManager.h	/^	const Coord* playgroundSize;$/;"	m	class:BaseConnectionManager
playgroundSize	src/veins/base/modules/BaseWorldUtility.h	/^    Coord playgroundSize;$/;"	m	class:BaseWorldUtility
playgroundSize	src/veins/modules/analogueModel/BreakpointPathlossModel.h	/^    const Coord& playgroundSize;$/;"	m	class:BreakpointPathlossModel
playgroundSize	src/veins/modules/analogueModel/SimpleObstacleShadowing.h	/^	const Coord& playgroundSize;$/;"	m	class:SimpleObstacleShadowing
playgroundSize	src/veins/modules/analogueModel/SimplePathlossModel.h	/^	const Coord& playgroundSize;$/;"	m	class:SimplePathlossModel
playgroundSizeX	src/veins/base/modules/BaseMobility.h	/^    double playgroundSizeX() const  {return world->getPgs()->x;}$/;"	f	class:BaseMobility
playgroundSizeY	src/veins/base/modules/BaseMobility.h	/^    double playgroundSizeY() const  {return world->getPgs()->y;}$/;"	f	class:BaseMobility
playgroundSizeZ	src/veins/base/modules/BaseMobility.h	/^    double playgroundSizeZ() const  {return world->getPgs()->z;}$/;"	f	class:BaseMobility
ploegH	src/veins/modules/application/platooning/apps/BaseApp.h	/^		double ploegH, ploegKp, ploegKd;$/;"	m	class:BaseApp
ploegKd	src/veins/modules/application/platooning/apps/BaseApp.h	/^		double ploegH, ploegKp, ploegKd;$/;"	m	class:BaseApp
ploegKp	src/veins/modules/application/platooning/apps/BaseApp.h	/^		double ploegH, ploegKp, ploegKd;$/;"	m	class:BaseApp
poi	src/veins/modules/mobility/traci/TraCICommandInterface.h	/^		Poi poi(std::string poiId) {$/;"	f	class:Veins::TraCICommandInterface
poiId	src/veins/modules/mobility/traci/TraCICommandInterface.h	/^				std::string poiId;$/;"	m	class:Veins::TraCICommandInterface::Poi
pointer	src/veins/base/phyLayer/MappingBase.h	/^	    typedef typename IteratorType::value_type::first_type* pointer;$/;"	t	class:Argument::key_iterator
policy_var	src/veins/base/messages/BorderMsg_m.h	/^    int policy_var;$/;"	m	class:BorderMsg
polyId	src/veins/modules/mobility/traci/TraCICommandInterface.h	/^				std::string polyId;$/;"	m	class:Veins::TraCICommandInterface::Polygon
polygon	src/veins/modules/mobility/traci/TraCICommandInterface.h	/^		Polygon polygon(std::string polyId) {$/;"	f	class:Veins::TraCICommandInterface
port	src/veins/modules/mobility/traci/TraCIScenarioManager.h	/^		int port;$/;"	m	class:Veins::TraCIScenarioManager
pos	src/veins/base/connectionManager/NicEntry.h	/^    Coord pos;$/;"	m	class:NicEntry
pos	src/veins/modules/world/annotations/AnnotationManager.h	/^				Coord pos;$/;"	m	class:Veins::AnnotationManager::Point
position	src/veins/base/phyLayer/Interpolation.h	/^	key_type                  position;$/;"	m	class:ConstInterpolateableIterator
position	src/veins/base/phyLayer/MappingBase.h	/^	KeyEntryType                position;$/;"	m	class:SimpleConstMappingIterator
position	src/veins/base/phyLayer/MappingUtils.h	/^	Argument     position;$/;"	m	class:TimeMappingIterator
position	src/veins/base/phyLayer/MappingUtils.h	/^	Argument position;$/;"	m	class:BaseDelayedIterator
position	src/veins/base/phyLayer/MappingUtils.h	/^	Argument position;$/;"	m	class:MultiDimMappingIterator
position	src/veins/base/phyLayer/PhyUtils.h	/^	Argument position;$/;"	m	class:RSAMConstMappingIterator
position	src/veins/modules/application/platooning/bikeplatoons/BikesApp.h	/^		int position;$/;"	m	class:BikesApp
position	src/veins/modules/application/platooning/bikes/BikeManeuver.h	/^        int position;$/;"	m	class:BikeManeuver
position	src/veins/modules/application/platooning/maneuver/JoinManeuverApp.h	/^		int position;$/;"	m	class:JoinManeuverApp
position	src/veins/modules/mobility/traci/TraCIBaseTrafficManager.h	/^			float		position;	\/\/position on the first edge$/;"	m	struct:TraCIBaseTrafficManager::Vehicle
positionX	src/veins/modules/application/platooning/CC_Const.h	/^    double positionX;    \/\/position of the vehicle in the simulation$/;"	m	struct:Plexe::VEHICLE_DATA
positionX_var	src/veins/modules/application/platooning/messages/PlatooningBeacon_m.h	/^    double positionX_var;$/;"	m	class:PlatooningBeacon
positionY	src/veins/modules/application/platooning/CC_Const.h	/^    double positionY;    \/\/position of the vehicle in the simulation$/;"	m	struct:Plexe::VEHICLE_DATA
positionY_var	src/veins/modules/application/platooning/messages/PlatooningBeacon_m.h	/^    double positionY_var;$/;"	m	class:PlatooningBeacon
post	src/veins/base/phyLayer/MappingUtils.cc	/^simtime_t MappingUtils::post(simtime_t_cref t)$/;"	f	class:MappingUtils
postTransmit	src/veins/modules/mac/ieee80211p/Mac1609_4.cc	/^void Mac1609_4::EDCA::postTransmit(t_access_category ac) {$/;"	f	class:Mac1609_4::EDCA
posxOut	src/veins/modules/application/platooning/protocols/BaseProtocol.h	/^		cOutVector distanceOut, relSpeedOut, nodeIdOut, speedOut, posxOut, posyOut, accelerationOut;$/;"	m	class:BaseProtocol
posyOut	src/veins/modules/application/platooning/protocols/BaseProtocol.h	/^		cOutVector distanceOut, relSpeedOut, nodeIdOut, speedOut, posxOut, posyOut, accelerationOut;$/;"	m	class:BaseProtocol
power	src/veins/base/phyLayer/Signal_.h	/^	ConstMapping* power;$/;"	m	class:Signal
pre	src/veins/base/phyLayer/MappingUtils.cc	/^simtime_t MappingUtils::pre(simtime_t_cref t)$/;"	f	class:MappingUtils
preInitialize	src/veins/modules/mobility/traci/TraCIMobility.cc	/^void TraCIMobility::preInitialize(std::string external_id, const Coord& position, std::string road_id, double speed, double angle)$/;"	f	class:TraCIMobility
prefix	debug	/^prefix = ['gdb', '--args']$/;"	v
prefix	run	/^prefix = []$/;"	v
prefix	src/scripts/debug.in.py	/^prefix = ['gdb', '--args']$/;"	v
prefix	src/scripts/run.in.py	/^prefix = []$/;"	v
prepareManeuverCars	src/veins/modules/application/platooning/bikeplatoons/BikesApp.cc	/^void BikesApp::prepareManeuverCars( int platoonLane )$/;"	f	class:BikesApp
prepareManeuverCars	src/veins/modules/application/platooning/maneuver/JoinManeuverApp.cc	/^void JoinManeuverApp::prepareManeuverCars(int platoonLane) {$/;"	f	class:JoinManeuverApp
prepareWSM	src/veins/modules/application/ieee80211p/BaseWaveApplLayer.cc	/^WaveShortMessage*  BaseWaveApplLayer::prepareWSM(std::string name, int lengthBits, t_channel channel, int priority, int rcvId, int serial) {$/;"	f	class:BaseWaveApplLayer
print	src/veins/base/phyLayer/MappingBase.h	/^	stream& print(stream&                out,$/;"	f	class:ConstMapping
priority	src/veins/modules/application/platooning/protocols/BaseProtocol.h	/^		int priority;$/;"	m	class:BaseProtocol
priority_var	src/veins/modules/application/platooning/messages/UnicastMessage_m.h	/^    int priority_var;$/;"	m	class:UnicastMessage
priority_var	src/veins/modules/messages/WaveShortMessage_m.h	/^    int priority_var;$/;"	m	class:WaveShortMessage
processNewSignal	src/veins/base/phyLayer/BaseDecider.cc	/^simtime_t BaseDecider::processNewSignal(AirFrame* frame) {$/;"	f	class:BaseDecider
processNewSignal	src/veins/modules/phy/Decider80211p.cc	/^simtime_t Decider80211p::processNewSignal(AirFrame* msg) {$/;"	f	class:Decider80211p
processNewSignal	src/veins/modules/phy/SNRThresholdDecider.cc	/^simtime_t SNRThresholdDecider::processNewSignal(AirFrame* frame)$/;"	f	class:SNRThresholdDecider
processNextPacket	src/veins/modules/application/platooning/UnicastProtocol.cc	/^void UnicastProtocol::processNextPacket()$/;"	f	class:UnicastProtocol
processSignal	src/veins/base/phyLayer/BaseDecider.cc	/^simtime_t BaseDecider::processSignal(AirFrame* frame) {$/;"	f	class:BaseDecider
processSignal	src/veins/base/phyLayer/Decider.cc	/^simtime_t Decider::processSignal(AirFrame* s) {$/;"	f	class:Decider
processSignalEnd	src/veins/base/phyLayer/BaseDecider.cc	/^simtime_t BaseDecider::processSignalEnd(AirFrame* frame) {$/;"	f	class:BaseDecider
processSignalEnd	src/veins/modules/phy/Decider80211p.cc	/^simtime_t Decider80211p::processSignalEnd(AirFrame* msg) {$/;"	f	class:Decider80211p
processSignalEnd	src/veins/modules/phy/SNRThresholdDecider.cc	/^simtime_t SNRThresholdDecider::processSignalEnd(AirFrame* frame)$/;"	f	class:SNRThresholdDecider
processSignalHeader	src/veins/base/phyLayer/BaseDecider.h	/^	virtual simtime_t processSignalHeader(AirFrame* frame) {$/;"	f	class:BaseDecider
processSimSubscription	src/veins/modules/mobility/traci/TraCIScenarioManager.cc	/^void TraCIScenarioManager::processSimSubscription(std::string objectId, TraCIBuffer& buf) {$/;"	f	class:TraCIScenarioManager
processSubcriptionResult	src/veins/modules/mobility/traci/TraCIScenarioManager.cc	/^void TraCIScenarioManager::processSubcriptionResult(TraCIBuffer& buf) {$/;"	f	class:TraCIScenarioManager
processUnknownSignal	src/veins/base/phyLayer/BaseDecider.cc	/^simtime_t BaseDecider::processUnknownSignal(AirFrame* frame) {$/;"	f	class:BaseDecider
processVehicleSubscription	src/veins/modules/mobility/traci/TraCIScenarioManager.cc	/^void TraCIScenarioManager::processVehicleSubscription(std::string objectId, TraCIBuffer& buf) {$/;"	f	class:TraCIScenarioManager
propagationDelay	src/veins/base/phyLayer/Signal_.h	/^	simtime_t propagationDelay;$/;"	m	class:Signal
protocolId	src/veins/base/phyLayer/BasePhyLayer.h	/^	int protocolId;$/;"	m	class:BasePhyLayer
protocolId_var	src/veins/base/messages/AirFrame_m.h	/^    int protocolId_var;$/;"	m	class:Veins::AirFrame
psc_var	src/veins/modules/messages/WaveShortMessage_m.h	/^    opp_string psc_var;$/;"	m	class:WaveShortMessage
psid_var	src/veins/modules/messages/WaveShortMessage_m.h	/^    int psid_var;$/;"	m	class:WaveShortMessage
query	src/veins/modules/mobility/traci/TraCIConnection.cc	/^TraCIBuffer TraCIConnection::query(uint8_t commandId, const TraCIBuffer& buf) {$/;"	f	class:Veins::TraCIConnection
queryOptional	src/veins/modules/mobility/traci/TraCIConnection.cc	/^TraCIBuffer TraCIConnection::queryOptional(uint8_t commandId, const TraCIBuffer& buf, bool& success, std::string* errorMsg) {$/;"	f	class:Veins::TraCIConnection
queue	src/veins/modules/application/platooning/UnicastProtocol.h	/^		std::queue<UnicastMessage *> queue;$/;"	m	class:UnicastProtocol
queue	src/veins/modules/mac/ieee80211p/Mac1609_4.h	/^						std::queue<WaveShortMessage*> queue;$/;"	m	class:Mac1609_4::EDCA::EDCAQueue
queuePacket	src/veins/modules/mac/ieee80211p/Mac1609_4.cc	/^int Mac1609_4::EDCA::queuePacket(t_access_category ac,WaveShortMessage* msg) {$/;"	f	class:Mac1609_4::EDCA
queueSize	src/veins/modules/application/platooning/UnicastProtocol.h	/^		size_t queueSize;$/;"	m	class:UnicastProtocol
radio	src/veins/base/phyLayer/BasePhyLayer.h	/^	Radio* radio;$/;"	m	class:BasePhyLayer
radioChannels	src/veins/base/phyLayer/PhyUtils.h	/^	cOutVector radioChannels;$/;"	m	class:Veins::Radio
radioStateAttenuation	src/veins/base/phyLayer/PhyUtils.h	/^	std::list<ListEntry> radioStateAttenuation;$/;"	m	class:RadioStateAnalogueModel
radioStates	src/veins/base/phyLayer/PhyUtils.h	/^	cOutVector radioStates;$/;"	m	class:Veins::Radio
radioSwitchingOverTimer	src/veins/base/phyLayer/BasePhyLayer.h	/^	cMessage* radioSwitchingOverTimer;$/;"	m	class:BasePhyLayer
randomLogNormalGain	src/veins/modules/analogueModel/LogNormalShadowing.cc	/^double LogNormalShadowing::randomLogNormalGain() const {$/;"	f	class:LogNormalShadowing
rcvPower	src/veins/base/phyLayer/Signal_.h	/^	MultipliedMapping* rcvPower;$/;"	m	class:Signal
read	src/veins/modules/mobility/traci/TraCIBuffer.cc	/^template<> TraCICoord TraCIBuffer::read() {$/;"	f	class:Veins::TraCIBuffer
read	src/veins/modules/mobility/traci/TraCIBuffer.cc	/^template<> std::string TraCIBuffer::read() {$/;"	f	class:Veins::TraCIBuffer
read	src/veins/modules/mobility/traci/TraCIBuffer.h	/^		template<typename T> T read() {$/;"	f	class:Veins::TraCIBuffer
read	src/veins/modules/mobility/traci/TraCIBuffer.h	/^		template<typename T> T read(T& out) {$/;"	f	class:Veins::TraCIBuffer
readBuffer	src/veins/modules/mobility/traci/TraCIBuffer.h	/^        void readBuffer(unsigned char *buffer, size_t size) {$/;"	f	class:Veins::TraCIBuffer
readPar	src/veins/base/phyLayer/BasePhyLayer.cc	/^template<class T> T BasePhyLayer::readPar(const char* parName, const T defaultValue){$/;"	f	class:BasePhyLayer
read_launch_config	sumo-launchd.py	/^def read_launch_config(conn):$/;"	f
realpath	src/veins/modules/mobility/traci/TraCICommandInterface.cc	12;"	d	file:
realpath	src/veins/modules/mobility/traci/TraCIScreenRecorder.cc	26;"	d	file:
receiveMessage	src/veins/modules/application/platooning/bikeplatoons/BikesApp.cc	/^void BikesApp::receiveMessage( cMessage *msg )$/;"	f	class:BikesApp
receiveMessage	src/veins/modules/application/platooning/maneuver/JoinManeuverApp.cc	/^void JoinManeuverApp::receiveMessage(cMessage *msg) {$/;"	f	class:JoinManeuverApp
receiveMessage	src/veins/modules/mobility/traci/TraCIConnection.cc	/^std::string TraCIConnection::receiveMessage() {$/;"	f	class:Veins::TraCIConnection
receiveSequenceNumbers	src/veins/modules/application/platooning/UnicastProtocol.h	/^		std::map<int, int> receiveSequenceNumbers;$/;"	m	class:UnicastProtocol
receiveSignal	src/veins/base/connectionManager/ChannelAccess.cc	/^void ChannelAccess::receiveSignal(cComponent *source, simsignal_t signalID, cObject *obj)$/;"	f	class:ChannelAccess
receiveSignal	src/veins/base/modules/BaseModule.cc	/^void BaseModule::receiveSignal(cComponent *source, simsignal_t signalID, cObject *obj) {$/;"	f	class:BaseModule
receiveSignal	src/veins/modules/application/ieee80211p/BaseWaveApplLayer.cc	/^void BaseWaveApplLayer::receiveSignal(cComponent* source, simsignal_t signalID, cObject* obj) {$/;"	f	class:BaseWaveApplLayer
receiveSignal	src/veins/modules/application/traci/TraCIDemo11p.cc	/^void TraCIDemo11p::receiveSignal(cComponent* source, simsignal_t signalID, cObject* obj) {$/;"	f	class:TraCIDemo11p
receiveSignal	src/veins/modules/application/traci/TraCITestApp.cc	/^void TraCITestApp::receiveSignal(cComponent *source, simsignal_t signalID, cObject *obj) {$/;"	f	class:TraCITestApp
receiverModuleID	src/veins/base/phyLayer/Signal_.h	/^	int receiverModuleID;$/;"	m	class:Signal
receiverPos	src/veins/modules/obstacle/ObstacleControl.h	/^			const Coord receiverPos;$/;"	m	struct:Veins::ObstacleControl::CacheKey
receiverToGateID	src/veins/base/phyLayer/Signal_.h	/^	int receiverToGateID;$/;"	m	class:Signal
recipientAddress_var	src/veins/modules/messages/WaveShortMessage_m.h	/^    int recipientAddress_var;$/;"	m	class:WaveShortMessage
recordPacket	src/veins/base/modules/BaseLayer.cc	/^void BaseLayer::recordPacket(PassedMessage::direction_t dir,$/;"	f	class:BaseLayer
recordScalar	src/veins/base/phyLayer/BasePhyLayer.cc	/^void BasePhyLayer::recordScalar(const char *name, double value, const char *unit) {$/;"	f	class:BasePhyLayer
recordScalars	src/veins/modules/mobility/traci/TraCIMobility.cc	/^void TraCIMobility::Statistics::recordScalars(cSimpleModule& module)$/;"	f	class:TraCIMobility::Statistics
recordStartTime	src/veins/base/phyLayer/ChannelInfo.h	/^	simtime_t recordStartTime;$/;"	m	class:ChannelInfo
recordStats	src/veins/base/phyLayer/BasePhyLayer.h	/^	bool recordStats;$/;"	m	class:BasePhyLayer
recvPower_dBm	src/veins/modules/phy/DeciderResult80211.h	/^	double recvPower_dBm;$/;"	m	class:DeciderResult80211
recvPower_dBm_var	src/veins/modules/application/platooning/messages/UnicastMessage_m.h	/^    double recvPower_dBm_var;$/;"	m	class:UnicastMessage
red	src/veins/modules/mobility/traci/TraCIColor.h	/^		uint8_t red;$/;"	m	class:Veins::TraCIColor
refMapping	src/veins/base/phyLayer/MappingUtils.h	/^	ConstMapping*         refMapping;$/;"	m	class:ConcatConstMapping
reference	src/veins/base/phyLayer/MappingBase.h	/^	    typedef typename IteratorType::value_type::first_type& reference;$/;"	t	class:Argument::key_iterator
reflectCoordinate	src/veins/base/modules/BaseMobility.cc	/^void BaseMobility::reflectCoordinate(BorderHandling border, Coord& c)$/;"	f	class:BaseMobility
reflectIfOutside	src/veins/base/modules/BaseMobility.cc	/^void BaseMobility::reflectIfOutside(BorderHandling wo, Coord& stepTarget,$/;"	f	class:BaseMobility
registerInterface	src/veins/base/modules/BaseMacLayer.cc	/^void BaseMacLayer::registerInterface()$/;"	f	class:BaseMacLayer
registerNic	src/veins/base/connectionManager/BaseConnectionManager.cc	/^bool BaseConnectionManager::registerNic(cModule* nic,$/;"	f	class:BaseConnectionManager
registerNicExt	src/veins/base/connectionManager/BaseConnectionManager.cc	/^void BaseConnectionManager::registerNicExt(int nicID)$/;"	f	class:BaseConnectionManager
registerWithBattery	src/veins/base/modules/BatteryAccess.cc	/^void BatteryAccess::registerWithBattery(const std::string& name, int numAccounts) {$/;"	f	class:BatteryAccess
relSpeed	src/veins/modules/analogueModel/JakesFading.h	/^	double relSpeed;$/;"	m	class:JakesFadingMapping
relSpeedOut	src/veins/modules/application/platooning/protocols/BaseProtocol.h	/^		cOutVector distanceOut, relSpeedOut, nodeIdOut, speedOut, posxOut, posyOut, accelerationOut;$/;"	m	class:BaseProtocol
relayerId_var	src/veins/modules/application/platooning/messages/PlatooningBeacon_m.h	/^    int relayerId_var;$/;"	m	class:PlatooningBeacon
release	sumo-launchd.py	/^    def release(self):$/;"	m	class:UnusedPortLock
relpath	debug	/^def relpath(s):$/;"	f
relpath	memcheck	/^def relpath(s):$/;"	f
relpath	run	/^def relpath(s):$/;"	f
relpath	src/scripts/debug.in.py	/^def relpath(s):$/;"	f
relpath	src/scripts/memcheck.in.py	/^def relpath(s):$/;"	f
relpath	src/scripts/run.in.py	/^def relpath(s):$/;"	f
remove	src/veins/modules/mobility/traci/TraCICommandInterface.cc	/^void TraCICommandInterface::Poi::remove(int32_t layer) {$/;"	f	class:Veins::TraCICommandInterface::Poi
remove	src/veins/modules/mobility/traci/TraCICommandInterface.cc	/^void TraCICommandInterface::Polygon::remove(int32_t layer) {$/;"	f	class:Veins::TraCICommandInterface::Polygon
removeAirFrame	src/veins/base/phyLayer/ChannelInfo.cc	/^simtime_t ChannelInfo::removeAirFrame(AirFrame* frame)$/;"	f	class:ChannelInfo
requestInGate	src/veins/base/connectionManager/NicEntryDebug.cc	/^cGate* NicEntryDebug::requestInGate(void) {$/;"	f	class:NicEntryDebug
requestOutGate	src/veins/base/connectionManager/NicEntryDebug.cc	/^cGate* NicEntryDebug::requestOutGate(void) {$/;"	f	class:NicEntryDebug
rescheduleMessage	src/veins/base/phyLayer/BasePhyLayer.cc	/^void BasePhyLayer::rescheduleMessage(cMessage* msg, simtime_t_cref t) {$/;"	f	class:BasePhyLayer
resendMessage	src/veins/modules/application/platooning/UnicastProtocol.cc	/^void UnicastProtocol::resendMessage()$/;"	f	class:UnicastProtocol
result	src/veins/base/phyLayer/PhyToMacControlInfo.h	/^	DeciderResult * result;$/;"	m	class:PhyToMacControlInfo
result_var	src/veins/base/messages/ChannelSenseRequest_m.h	/^    ChannelState result_var;$/;"	m	class:ChannelSenseRequest
ret	examples/platoonBikes/sumocfg/runner.py	/^ret = subprocess.Popen($/;"	v
retrieveSignal	src/veins/base/phyLayer/MacToPhyControlInfo.h	/^	Signal* retrieveSignal() {$/;"	f	class:MacToPhyControlInfo
retry_var	src/veins/modules/messages/Mac80211Pkt_m.h	/^    bool retry_var;$/;"	m	class:Mac80211Pkt
revokeTxOPs	src/veins/modules/mac/ieee80211p/Mac1609_4.cc	/^void Mac1609_4::EDCA::revokeTxOPs() {$/;"	f	class:Mac1609_4::EDCA
right	src/veins/base/phyLayer/Interpolation.h	/^	used_iterator             right;$/;"	m	class:ConstInterpolateableIterator
right	src/veins/base/phyLayer/MappingUtils.h	/^	const ConstMapping* right;$/;"	m	class:LinearIntplMapping
rightIt	src/veins/base/phyLayer/MappingUtils.h	/^	ConstMappingIterator* rightIt;$/;"	m	class:LinearIntplMappingIterator
road	src/veins/modules/mobility/traci/TraCICommandInterface.h	/^		Road road(std::string roadId) {$/;"	f	class:Veins::TraCICommandInterface
roadId	src/veins/modules/mobility/traci/TraCICommandInterface.h	/^				std::string roadId;$/;"	m	class:Veins::TraCICommandInterface::Road
roadIds	src/veins/modules/mobility/traci/TraCIBaseTrafficManager.h	/^		std::vector<std::string> roadIds;$/;"	m	class:TraCIBaseTrafficManager
roadPosition	src/veins/modules/mobility/traci/TraCIMobility.h	/^		Coord roadPosition; \/**< position of front bumper, updated by nextPosition() *\/$/;"	m	class:Veins::TraCIMobility
road_id	src/veins/modules/mobility/traci/TraCIMobility.h	/^		std::string road_id; \/**< updated by nextPosition() *\/$/;"	m	class:Veins::TraCIMobility
roiRects	src/veins/modules/mobility/traci/TraCIScenarioManager.h	/^		std::list<std::pair<TraCICoord, TraCICoord> > roiRects; \/**< which rectangles (e.g. "0,0-10,10 20,20-30,30) are considered to consitute the region of interest, if not empty *\/$/;"	m	class:Veins::TraCIScenarioManager
roiRoads	src/veins/modules/mobility/traci/TraCIScenarioManager.h	/^		std::list<std::string> roiRoads; \/**< which roads (e.g. "hwy1 hwy2") are considered to consitute the region of interest, if not empty *\/$/;"	m	class:Veins::TraCIScenarioManager
role	src/veins/modules/application/platooning/bikeplatoons/BikesApp.h	/^		ROLES role;$/;"	m	class:BikesApp
role	src/veins/modules/application/platooning/maneuver/JoinManeuverApp.h	/^		JOIN_ROLE role;$/;"	m	class:JoinManeuverApp
round	src/veins/base/utils/FWMath.h	/^  static int round(double d) { return (int)(ceil(d-0.5)); }$/;"	f	class:FWMath
route	src/veins/modules/mobility/traci/TraCICommandInterface.h	/^		Route route(std::string routeId) {$/;"	f	class:Veins::TraCICommandInterface
routeId	src/veins/modules/mobility/traci/TraCICommandInterface.h	/^				std::string routeId;$/;"	m	class:Veins::TraCICommandInterface::Route
routeIds	src/veins/modules/mobility/traci/TraCIBaseTrafficManager.h	/^		std::vector<std::string> routeIds;$/;"	m	class:TraCIBaseTrafficManager
routeStartLaneIds	src/veins/modules/mobility/traci/TraCIBaseTrafficManager.h	/^		std::map<std::string, std::vector<std::string> > routeStartLaneIds;$/;"	m	class:TraCIBaseTrafficManager
rsam	src/veins/base/phyLayer/PhyUtils.h	/^	RadioStateAnalogueModel rsam;$/;"	m	class:Veins::Radio
rsam	src/veins/base/phyLayer/PhyUtils.h	/^	const RadioStateAnalogueModel* rsam;$/;"	m	class:RSAMConstMappingIterator
rsam	src/veins/base/phyLayer/PhyUtils.h	/^	const RadioStateAnalogueModel* rsam;$/;"	m	class:RSAMMapping
rssi	src/veins/base/phyLayer/ChannelState.h	/^	double rssi;$/;"	m	class:ChannelState
rssi	src/veins/base/utils/MacToNetwControlInfo.h	/^	double rssi;$/;"	m	class:MacToNetwControlInfo
run_libs	configure	/^    run_libs = [os.path.relpath(os.path.join(options.inet, 'src', 'inet'))] + run_libs$/;"	v
run_libs	configure	/^run_libs = [os.path.join('src', 'veins')]$/;"	v
run_libs	debug	/^run_libs = ['src\/veins']$/;"	v
run_libs	debug	/^run_libs = [relpath(s) for s in run_libs]$/;"	v
run_libs	memcheck	/^run_libs = ['src\/veins']$/;"	v
run_libs	memcheck	/^run_libs = [relpath(s) for s in run_libs]$/;"	v
run_libs	out/config.py	/^run_libs = ['src\/veins']$/;"	v
run_libs	run	/^run_libs = ['src\/veins']$/;"	v
run_libs	run	/^run_libs = [relpath(s) for s in run_libs]$/;"	v
run_libs	src/scripts/debug.in.py	/^run_libs = [relpath(s) for s in run_libs]$/;"	v
run_libs	src/scripts/memcheck.in.py	/^run_libs = [relpath(s) for s in run_libs]$/;"	v
run_libs	src/scripts/run.in.py	/^run_libs = [relpath(s) for s in run_libs]$/;"	v
run_neds	configure	/^    run_neds = [os.path.relpath(os.path.join(options.inet, 'src'))] + run_neds$/;"	v
run_neds	configure	/^run_neds = [os.path.join('src', 'veins')]$/;"	v
run_neds	debug	/^run_neds = ['src\/veins']$/;"	v
run_neds	debug	/^run_neds = [relpath(s) for s in run_neds] + ['.']$/;"	v
run_neds	memcheck	/^run_neds = ['src\/veins']$/;"	v
run_neds	memcheck	/^run_neds = [relpath(s) for s in run_neds] + ['.']$/;"	v
run_neds	out/config.py	/^run_neds = ['src\/veins']$/;"	v
run_neds	run	/^run_neds = ['src\/veins']$/;"	v
run_neds	run	/^run_neds = [relpath(s) for s in run_neds] + ['.']$/;"	v
run_neds	src/scripts/debug.in.py	/^run_neds = [relpath(s) for s in run_neds] + ['.']$/;"	v
run_neds	src/scripts/memcheck.in.py	/^run_neds = [relpath(s) for s in run_neds] + ['.']$/;"	v
run_neds	src/scripts/run.in.py	/^run_neds = [relpath(s) for s in run_neds] + ['.']$/;"	v
run_sumo	sumo-launchd.py	/^def run_sumo(runpath, sumo_command, shlex, config_file_name, remote_port, seed, client_socket, unused_port_lock, keep_temp):$/;"	f
sRunId	src/veins/base/utils/MiXiMDefs.h	/^	mutable const char *         sRunId;$/;"	m	class:simsignalwrap_t
sSignalName	src/veins/base/utils/MiXiMDefs.h	/^	const char *const            sSignalName;$/;"	m	class:simsignalwrap_t
scaleNodeByDepth	src/veins/base/modules/BaseMobility.h	/^    bool scaleNodeByDepth;$/;"	m	class:BaseMobility
scenarioLoaded	src/veins/modules/mobility/traci/TraCIBaseTrafficManager.h	/^		virtual void scenarioLoaded() {};$/;"	f	class:TraCIBaseTrafficManager
scheduleErase	src/veins/modules/world/annotations/AnnotationManager.cc	/^void AnnotationManager::scheduleErase(simtime_t deltaT, Annotation* annotation) {$/;"	f	class:AnnotationManager
scheduledEraseEvts	src/veins/modules/world/annotations/AnnotationManager.h	/^		std::list<cMessage*> scheduledEraseEvts;$/;"	m	class:Veins::AnnotationManager
second	src/veins/base/phyLayer/BaseDecider.h	/^		simtime_t second;$/;"	m	struct:BaseDecider::__anon1
securityType_var	src/veins/modules/messages/WaveShortMessage_m.h	/^    int securityType_var;$/;"	m	class:WaveShortMessage
seed	src/veins/modules/mobility/traci/TraCIScenarioManagerLaunchd.h	/^		int seed; \/**< seed value to set in launch configuration, if missing (-1: current run number) *\/$/;"	m	class:Veins::TraCIScenarioManagerLaunchd
segmentsIntersectAt	src/veins/modules/obstacle/Obstacle.cc	/^	double segmentsIntersectAt(Coord p1From, Coord p1To, Coord p2From, Coord p2To) {$/;"	f	namespace:__anon5
sendAck	src/veins/modules/application/platooning/UnicastProtocol.cc	/^void UnicastProtocol::sendAck(UnicastMessage *msg)$/;"	f	class:UnicastProtocol
sendBeacon	src/veins/modules/application/platooning/protocols/BaseProtocol.h	/^		cMessage *sendBeacon, *dataPolling;$/;"	m	class:BaseProtocol
sendBeaconEvt	src/veins/modules/application/ieee80211p/BaseWaveApplLayer.h	/^		cMessage* sendBeaconEvt;$/;"	m	class:BaseWaveApplLayer
sendBeacons	src/veins/modules/application/ieee80211p/BaseWaveApplLayer.h	/^		bool sendBeacons;$/;"	m	class:BaseWaveApplLayer
sendControlDown	src/veins/base/modules/BaseLayer.cc	/^void BaseLayer::sendControlDown(cMessage *msg) {$/;"	f	class:BaseLayer
sendControlMessageUp	src/veins/base/phyLayer/BasePhyLayer.cc	/^void BasePhyLayer::sendControlMessageUp(cMessage* msg) {$/;"	f	class:BasePhyLayer
sendControlMsgToMac	src/veins/base/phyLayer/BasePhyLayer.cc	/^void BasePhyLayer::sendControlMsgToMac(cMessage* msg) {$/;"	f	class:BasePhyLayer
sendControlUp	src/veins/base/modules/BaseLayer.cc	/^void BaseLayer::sendControlUp(cMessage *msg) {$/;"	f	class:BaseLayer
sendData	src/veins/modules/application/ieee80211p/BaseWaveApplLayer.h	/^		bool sendData;$/;"	m	class:BaseWaveApplLayer
sendDelayedDown	src/veins/base/modules/BaseApplLayer.cc	/^void BaseApplLayer::sendDelayedDown(cMessage *msg, simtime_t_cref delay) {$/;"	f	class:BaseApplLayer
sendDirect	src/veins/base/connectionManager/BaseConnectionManager.h	/^	bool sendDirect;$/;"	m	class:BaseConnectionManager
sendDown	src/veins/base/modules/BaseLayer.cc	/^void BaseLayer::sendDown(cMessage *msg) {$/;"	f	class:BaseLayer
sendMacPktUp	src/veins/base/phyLayer/BasePhyLayer.cc	/^void BasePhyLayer::sendMacPktUp(cMessage* pkt) {$/;"	f	class:BasePhyLayer
sendMessage	src/veins/modules/application/traci/TraCIDemo11p.cc	/^void TraCIDemo11p::sendMessage(std::string blockedRoadId) {$/;"	f	class:TraCIDemo11p
sendMessage	src/veins/modules/application/traci/TraCIDemoRSU11p.cc	/^void TraCIDemoRSU11p::sendMessage(std::string blockedRoadId) {$/;"	f	class:TraCIDemoRSU11p
sendMessage	src/veins/modules/mobility/traci/TraCIConnection.cc	/^void TraCIConnection::sendMessage(std::string buf) {$/;"	f	class:Veins::TraCIConnection
sendMessageDown	src/veins/base/phyLayer/BasePhyLayer.cc	/^void BasePhyLayer::sendMessageDown(AirFrame* msg) {$/;"	f	class:BasePhyLayer
sendMessageDown	src/veins/modules/application/platooning/UnicastProtocol.cc	/^void UnicastProtocol::sendMessageDown(int destination, cPacket *msg, int encapsulatedId, int priority, SimTime timestamp, t_channel channel)$/;"	f	class:UnicastProtocol
sendPlatooningMessage	src/veins/modules/application/platooning/protocols/BaseProtocol.cc	/^void BaseProtocol::sendPlatooningMessage(int destinationAddress) {$/;"	f	class:BaseProtocol
sendSelfMessage	src/veins/base/phyLayer/BasePhyLayer.cc	/^void BasePhyLayer::sendSelfMessage(cMessage* msg, simtime_t_cref time) {$/;"	f	class:BasePhyLayer
sendToChannel	src/veins/base/connectionManager/ChannelAccess.cc	/^void ChannelAccess::sendToChannel(cPacket *msg)$/;"	f	class:ChannelAccess
sendUnicast	src/veins/modules/application/platooning/apps/BaseApp.cc	/^void BaseApp::sendUnicast(cPacket *msg, int destination) {$/;"	f	class:BaseApp
sendUp	src/veins/base/modules/BaseLayer.cc	/^void BaseLayer::sendUp(cMessage *msg) {$/;"	f	class:BaseLayer
sendUp	src/veins/base/phyLayer/BasePhyLayer.cc	/^void BasePhyLayer::sendUp(AirFrame* frame, DeciderResult* result) {$/;"	f	class:BasePhyLayer
sendWSM	src/veins/modules/application/ieee80211p/BaseWaveApplLayer.cc	/^void BaseWaveApplLayer::sendWSM(WaveShortMessage* wsm) {$/;"	f	class:BaseWaveApplLayer
sendWSM	src/veins/modules/application/traci/TraCIDemo11p.cc	/^void TraCIDemo11p::sendWSM(WaveShortMessage* wsm) {$/;"	f	class:TraCIDemo11p
sendWSM	src/veins/modules/application/traci/TraCIDemoRSU11p.cc	/^void TraCIDemoRSU11p::sendWSM(WaveShortMessage* wsm) {$/;"	f	class:TraCIDemoRSU11p
sendWhileParking	src/veins/modules/application/traci/TraCIDemo11p.h	/^		bool sendWhileParking;$/;"	m	class:TraCIDemo11p
senderAddress_var	src/veins/modules/messages/WaveShortMessage_m.h	/^    int senderAddress_var;$/;"	m	class:WaveShortMessage
senderFromGateID	src/veins/base/phyLayer/Signal_.h	/^	int senderFromGateID;$/;"	m	class:Signal
senderModuleID	src/veins/base/phyLayer/Signal_.h	/^	int senderModuleID;$/;"	m	class:Signal
senderPos	src/veins/modules/obstacle/ObstacleControl.h	/^			const Coord senderPos;$/;"	m	struct:Veins::ObstacleControl::CacheKey
senderPos_var	src/veins/modules/messages/WaveShortMessage_m.h	/^    Coord senderPos_var;$/;"	m	class:WaveShortMessage
sendingStart	src/veins/base/phyLayer/Signal_.h	/^	simtime_t sendingStart;$/;"	m	class:Signal
senseMode_var	src/veins/base/messages/ChannelSenseRequest_m.h	/^    int senseMode_var;$/;"	m	class:ChannelSenseRequest
senseTimeout_var	src/veins/base/messages/ChannelSenseRequest_m.h	/^    simtime_t senseTimeout_var;$/;"	m	class:ChannelSenseRequest
sensitivity	src/veins/base/phyLayer/BaseDecider.h	/^	double sensitivity;$/;"	m	class:BaseDecider
sensitivity	src/veins/base/phyLayer/BasePhyLayer.h	/^	double sensitivity;$/;"	m	class:BasePhyLayer
sentMessage	src/veins/modules/application/traci/TraCIDemo11p.h	/^		bool sentMessage;$/;"	m	class:TraCIDemo11p
sentMessage	src/veins/modules/application/traci/TraCIDemoRSU11p.h	/^		bool sentMessage;$/;"	m	class:TraCIDemoRSU11p
seq_n	src/veins/modules/application/platooning/protocols/BaseProtocol.h	/^		int seq_n;$/;"	m	class:BaseProtocol
sequenceControl_var	src/veins/modules/messages/Mac80211Pkt_m.h	/^    int sequenceControl_var;$/;"	m	class:Mac80211Pkt
sequenceId_var	src/veins/base/messages/MacPkt_m.h	/^    long sequenceId_var;$/;"	m	class:MacPkt
sequenceNumber	src/veins/modules/application/platooning/UnicastProtocol.h	/^		int sequenceNumber;$/;"	m	class:UnicastProtocol
sequenceNumber_var	src/veins/modules/application/platooning/messages/PlatooningBeacon_m.h	/^    int sequenceNumber_var;$/;"	m	class:PlatooningBeacon
sequenceNumber_var	src/veins/modules/application/platooning/messages/UnicastMessage_m.h	/^    int sequenceNumber_var;$/;"	m	class:UnicastMessage
serial_var	src/veins/modules/messages/WaveShortMessage_m.h	/^    int serial_var;$/;"	m	class:WaveShortMessage
set	src/veins/base/utils/HostState.h	/^    void set(States s) { state = s; }$/;"	f	class:HostState
set	src/veins/modules/mobility/traci/TraCIBuffer.cc	/^void TraCIBuffer::set(std::string buf) {$/;"	f	class:Veins::TraCIBuffer
setACCHeadwayTime	src/veins/modules/mobility/traci/TraCICommandInterface.cc	/^void TraCICommandInterface::Vehicle::setACCHeadwayTime(double headway) {$/;"	f	class:Veins::TraCICommandInterface::Vehicle
setAcceleration	src/veins/modules/application/platooning/messages/PlatooningBeacon_m.cc	/^void PlatooningBeacon::setAcceleration(double acceleration)$/;"	f	class:PlatooningBeacon
setActiveChannel	src/veins/modules/mac/ieee80211p/Mac1609_4.cc	/^void Mac1609_4::setActiveChannel(t_channel state) {$/;"	f	class:Mac1609_4
setActiveController	src/veins/modules/mobility/traci/TraCICommandInterface.cc	/^void TraCICommandInterface::Vehicle::setActiveController(int activeController) {$/;"	f	class:Veins::TraCICommandInterface::Vehicle
setAddress3	src/veins/modules/messages/Mac80211Pkt_m.cc	/^void Mac80211Pkt::setAddress3(int address3)$/;"	f	class:Mac80211Pkt
setAddress4	src/veins/modules/messages/Mac80211Pkt_m.cc	/^void Mac80211Pkt::setAddress4(int address4)$/;"	f	class:Mac80211Pkt
setAnswerTime	src/veins/base/phyLayer/BaseDecider.h	/^		void setAnswerTime(simtime_t_cref answerAt) { canAnswerAt = answerAt; }$/;"	f	struct:BaseDecider::__anon1
setArgValue	src/veins/base/phyLayer/MappingBase.cc	/^void Argument::setArgValue(const Argument::key_type& dim, Argument::mapped_type_cref value)$/;"	f	class:Argument
setArgValues	src/veins/base/phyLayer/MappingBase.cc	/^void Argument::setArgValues(const Argument& o, bool ignoreUnknown){$/;"	f	class:Argument
setBitErrorRate	src/veins/base/utils/MacToNetwControlInfo.h	/^	virtual void setBitErrorRate(double ber) {$/;"	f	class:MacToNetwControlInfo
setBitrate	src/veins/base/phyLayer/Signal.cc	/^void Signal::setBitrate(Mapping *bitrate)$/;"	f	class:Signal
setBoundary	src/veins/modules/mobility/traci/TraCICommandInterface.cc	/^void TraCICommandInterface::GuiView::setBoundary(Coord p1_, Coord p2_) {$/;"	f	class:Veins::TraCICommandInterface::GuiView
setCACCConstantSpacing	src/veins/modules/mobility/traci/TraCICommandInterface.cc	/^void TraCICommandInterface::Vehicle::setCACCConstantSpacing(double spacing) {$/;"	f	class:Veins::TraCICommandInterface::Vehicle
setCCAThreshold	src/veins/modules/mac/ieee80211p/Mac1609_4.cc	/^void Mac1609_4::setCCAThreshold(double ccaThreshold_dBm) {$/;"	f	class:Mac1609_4
setCCAThreshold	src/veins/modules/phy/Decider80211p.cc	/^void Decider80211p::setCCAThreshold(double ccaThreshold_dBm) {$/;"	f	class:Decider80211p
setCCAThreshold	src/veins/modules/phy/PhyLayer80211p.cc	/^void PhyLayer80211p::setCCAThreshold(double ccaThreshold_dBm) {$/;"	f	class:PhyLayer80211p
setChannel	src/veins/base/messages/AirFrame_m.cc	/^void AirFrame::setChannel(int channel)$/;"	f	class:Veins::AirFrame
setChannel	src/veins/modules/application/platooning/messages/UnicastMessage_m.cc	/^void UnicastMessage::setChannel(int channel)$/;"	f	class:UnicastMessage
setChannelIdleStatus	src/veins/base/phyLayer/BaseDecider.cc	/^void BaseDecider::setChannelIdleStatus(bool isIdle) {$/;"	f	class:BaseDecider
setChannelIdleStatus	src/veins/modules/phy/Decider80211p.cc	/^void Decider80211p::setChannelIdleStatus(bool isIdle) {$/;"	f	class:Decider80211p
setChannelNumber	src/veins/modules/messages/WaveShortMessage_m.cc	/^void WaveShortMessage::setChannelNumber(int channelNumber)$/;"	f	class:WaveShortMessage
setColor	src/veins/modules/mobility/traci/TraCICommandInterface.cc	/^void TraCICommandInterface::Vehicle::setColor(const TraCIColor& color) {$/;"	f	class:Veins::TraCICommandInterface::Vehicle
setCommandValue	src/veins/modules/application/platooning/messages/UnicastProtocolControlMessage_m.cc	/^void UnicastProtocolControlMessage::setCommandValue(int commandValue)$/;"	f	class:UnicastProtocolControlMessage
setControlCommand	src/veins/modules/application/platooning/messages/UnicastProtocolControlMessage_m.cc	/^void UnicastProtocolControlMessage::setControlCommand(int controlCommand)$/;"	f	class:UnicastProtocolControlMessage
setControlInfo	src/veins/base/phyLayer/MacToPhyControlInfo.h	/^    static cObject *const setControlInfo(cMessage *const pMsg, Signal *const pSignal) {$/;"	f	class:MacToPhyControlInfo
setControlInfo	src/veins/base/phyLayer/PhyToMacControlInfo.h	/^    static cObject *const setControlInfo(cMessage *const pMsg, DeciderResult *const pDeciderResult) {$/;"	f	class:PhyToMacControlInfo
setControlInfo	src/veins/base/utils/MacToNetwControlInfo.h	/^    static cObject *const setControlInfo(cMessage *const pMsg, const LAddress::L2Type& pSrcAddr) {$/;"	f	class:MacToNetwControlInfo
setControlInfo	src/veins/base/utils/NetwToMacControlInfo.cc	/^cObject *const NetwToMacControlInfo::setControlInfo(cMessage *const pMsg, const LAddress::L2Type& pDestAddr)$/;"	f	class:NetwToMacControlInfo
setControllerFakeData	src/veins/modules/mobility/traci/TraCICommandInterface.cc	/^void TraCICommandInterface::Vehicle::setControllerFakeData(double frontDistance, double frontSpeed, double frontAcceleration,$/;"	f	class:Veins::TraCICommandInterface::Vehicle
setCruiseControlDesiredSpeed	src/veins/modules/mobility/traci/TraCICommandInterface.cc	/^void TraCICommandInterface::Vehicle::setCruiseControlDesiredSpeed(double desiredSpeed) {$/;"	f	class:Veins::TraCICommandInterface::Vehicle
setCurrentChannel	src/veins/base/phyLayer/PhyUtils.h	/^	void setCurrentChannel(int newChannel) {$/;"	f	class:Veins::Radio
setCurrentRadioChannel	src/veins/base/phyLayer/BasePhyLayer.cc	/^void BasePhyLayer::setCurrentRadioChannel(int newRadioChannel) {$/;"	f	class:BasePhyLayer
setDataRate	src/veins/modules/messages/WaveShortMessage_m.cc	/^void WaveShortMessage::setDataRate(int dataRate)$/;"	f	class:WaveShortMessage
setDest	src/veins/base/utils/NetwToMacControlInfo.h	/^    virtual void setDest(const LAddress::L2Type& addr) {$/;"	f	class:NetwToMacControlInfo
setDestAddr	src/veins/base/messages/MacPkt_m.cc	/^void MacPkt::setDestAddr(const LAddress::L2Type& destAddr)$/;"	f	class:MacPkt
setDestination	src/veins/modules/application/platooning/messages/UnicastMessage_m.cc	/^void UnicastMessage::setDestination(int destination)$/;"	f	class:UnicastMessage
setDirection	src/veins/base/messages/BorderMsg_m.cc	/^void BorderMsg::setDirection(const Coord& direction)$/;"	f	class:BorderMsg
setDirectionByTarget	src/veins/base/utils/Move.h	/^	void setDirectionByTarget(const Coord& target)$/;"	f	class:Move
setDirectionByVector	src/veins/base/utils/Move.h	/^	void setDirectionByVector(const Coord& direction)$/;"	f	class:Move
setDownControlInfo	src/veins/base/modules/BaseMacLayer.cc	/^cObject *const BaseMacLayer::setDownControlInfo(cMessage *const pMsg, Signal *const pSignal)$/;"	f	class:BaseMacLayer
setDuration	src/veins/base/messages/AirFrame_m.cc	/^void AirFrame::setDuration(simtime_t duration)$/;"	f	class:Veins::AirFrame
setDuration	src/veins/modules/messages/Mac80211Pkt_m.cc	/^void Mac80211Pkt::setDuration(simtime_t duration)$/;"	f	class:Mac80211Pkt
setExternalId	src/veins/modules/mobility/traci/TraCIMobility.h	/^		virtual void setExternalId(std::string external_id) {$/;"	f	class:Veins::TraCIMobility
setFieldAsString	src/veins/base/messages/AirFrame_m.cc	/^bool AirFrameDescriptor::setFieldAsString(void *object, int field, int i, const char *value) const$/;"	f	class:Veins::AirFrameDescriptor
setFieldAsString	src/veins/base/messages/BorderMsg_m.cc	/^bool BorderMsgDescriptor::setFieldAsString(void *object, int field, int i, const char *value) const$/;"	f	class:BorderMsgDescriptor
setFieldAsString	src/veins/base/messages/ChannelSenseRequest_m.cc	/^bool ChannelSenseRequestDescriptor::setFieldAsString(void *object, int field, int i, const char *value) const$/;"	f	class:ChannelSenseRequestDescriptor
setFieldAsString	src/veins/base/messages/MacPkt_m.cc	/^bool MacPktDescriptor::setFieldAsString(void *object, int field, int i, const char *value) const$/;"	f	class:MacPktDescriptor
setFieldAsString	src/veins/modules/application/platooning/messages/BikesMessage_m.cc	/^bool BikesMessageDescriptor::setFieldAsString(void *object, int field, int i, const char *value) const$/;"	f	class:BikesMessageDescriptor
setFieldAsString	src/veins/modules/application/platooning/messages/ManeuverMessage_m.cc	/^bool ManeuverMessageDescriptor::setFieldAsString(void *object, int field, int i, const char *value) const$/;"	f	class:ManeuverMessageDescriptor
setFieldAsString	src/veins/modules/application/platooning/messages/PlatooningBeacon_m.cc	/^bool PlatooningBeaconDescriptor::setFieldAsString(void *object, int field, int i, const char *value) const$/;"	f	class:PlatooningBeaconDescriptor
setFieldAsString	src/veins/modules/application/platooning/messages/UnicastMessage_m.cc	/^bool UnicastMessageDescriptor::setFieldAsString(void *object, int field, int i, const char *value) const$/;"	f	class:UnicastMessageDescriptor
setFieldAsString	src/veins/modules/application/platooning/messages/UnicastProtocolControlMessage_m.cc	/^bool UnicastProtocolControlMessageDescriptor::setFieldAsString(void *object, int field, int i, const char *value) const$/;"	f	class:UnicastProtocolControlMessageDescriptor
setFieldAsString	src/veins/modules/messages/AirFrame11p_m.cc	/^bool AirFrame11pDescriptor::setFieldAsString(void *object, int field, int i, const char *value) const$/;"	f	class:AirFrame11pDescriptor
setFieldAsString	src/veins/modules/messages/Mac80211Pkt_m.cc	/^bool Mac80211PktDescriptor::setFieldAsString(void *object, int field, int i, const char *value) const$/;"	f	class:Mac80211PktDescriptor
setFieldAsString	src/veins/modules/messages/PhyControlMessage_m.cc	/^bool PhyControlMessageDescriptor::setFieldAsString(void *object, int field, int i, const char *value) const$/;"	f	class:PhyControlMessageDescriptor
setFieldAsString	src/veins/modules/messages/WaveShortMessage_m.cc	/^bool WaveShortMessageDescriptor::setFieldAsString(void *object, int field, int i, const char *value) const$/;"	f	class:WaveShortMessageDescriptor
setFixedAcceleration	src/veins/modules/mobility/traci/TraCICommandInterface.cc	/^void TraCICommandInterface::Vehicle::setFixedAcceleration(int activate, double acceleration) {$/;"	f	class:Veins::TraCICommandInterface::Vehicle
setFixedLane	src/veins/modules/mobility/traci/TraCICommandInterface.cc	/^void TraCICommandInterface::Vehicle::setFixedLane(int laneIndex) {$/;"	f	class:Veins::TraCICommandInterface::Vehicle
setFollowerVehicleId	src/veins/modules/application/platooning/messages/BikesMessage_m.cc	/^void BikesMessage::setFollowerVehicleId(int followerVehicleId)$/;"	f	class:BikesMessage
setFollowerVehicleId	src/veins/modules/application/platooning/messages/ManeuverMessage_m.cc	/^void ManeuverMessage::setFollowerVehicleId(int followerVehicleId)$/;"	f	class:ManeuverMessage
setFragmentation	src/veins/modules/messages/Mac80211Pkt_m.cc	/^void Mac80211Pkt::setFragmentation(int fragmentation)$/;"	f	class:Mac80211Pkt
setFrontVehicleId	src/veins/modules/application/platooning/messages/BikesMessage_m.cc	/^void BikesMessage::setFrontVehicleId(int frontVehicleId)$/;"	f	class:BikesMessage
setFrontVehicleId	src/veins/modules/application/platooning/messages/ManeuverMessage_m.cc	/^void ManeuverMessage::setFrontVehicleId(int frontVehicleId)$/;"	f	class:ManeuverMessage
setGenericInformation	src/veins/modules/mobility/traci/TraCICommandInterface.cc	/^void TraCICommandInterface::Vehicle::setGenericInformation(int type, const void* data, int length) {$/;"	f	class:Veins::TraCICommandInterface::Vehicle
setId	src/veins/base/messages/AirFrame_m.cc	/^void AirFrame::setId(long id)$/;"	f	class:Veins::AirFrame
setInformationDS	src/veins/modules/messages/Mac80211Pkt_m.cc	/^void Mac80211Pkt::setInformationDS(int informationDS)$/;"	f	class:Mac80211Pkt
setLaneChangeAction	src/veins/modules/mobility/traci/TraCICommandInterface.cc	/^void TraCICommandInterface::Vehicle::setLaneChangeAction(int action) {$/;"	f	class:Veins::TraCICommandInterface::Vehicle
setLastHopMac	src/veins/base/utils/MacToNetwControlInfo.h	/^	virtual void setLastHopMac(const LAddress::L2Type& lastHop) {$/;"	f	class:MacToNetwControlInfo
setMCS	src/veins/modules/mac/ieee80211p/Mac1609_4.cc	/^void Mac1609_4::setMCS(enum PHY_MCS mcs) {$/;"	f	class:Mac1609_4
setMcs	src/veins/modules/messages/PhyControlMessage_m.cc	/^void PhyControlMessage::setMcs(int mcs)$/;"	f	class:PhyControlMessage
setMessageType	src/veins/modules/application/platooning/messages/BikesMessage_m.cc	/^void BikesMessage::setMessageType(int messageType)$/;"	f	class:BikesMessage
setMessageType	src/veins/modules/application/platooning/messages/ManeuverMessage_m.cc	/^void ManeuverMessage::setMessageType(int messageType)$/;"	f	class:ManeuverMessage
setNetbounds	src/veins/modules/mobility/traci/TraCIConnection.cc	/^void TraCIConnection::setNetbounds(TraCICoord netbounds1, TraCICoord netbounds2, int margin) {$/;"	f	class:Veins::TraCIConnection
setNextHopMac	src/veins/base/utils/NetwToMacControlInfo.h	/^    virtual void setNextHopMac(const LAddress::L2Type& addr) {$/;"	f	class:NetwToMacControlInfo
setNextPosition	src/veins/base/phyLayer/PhyUtils.cc	/^void RSAMConstMappingIterator::setNextPosition()$/;"	f	class:RSAMConstMappingIterator
setOutOfRangeVal	src/veins/base/phyLayer/Interpolation.h	/^	void setOutOfRangeVal(mapped_cref_type oorv) {$/;"	f	class:InterpolateableMap
setOutOfRangeVal	src/veins/base/phyLayer/Interpolation.h	/^	void setOutOfRangeVal(mapped_cref_type oorv) {$/;"	f	class:InterpolatorBase
setParametersForBitrate	src/veins/modules/mac/ieee80211p/Mac1609_4.cc	/^void Mac1609_4::setParametersForBitrate(uint64_t bitrate) {$/;"	f	class:Mac1609_4
setParking	src/veins/modules/mobility/traci/TraCICommandInterface.cc	/^void TraCICommandInterface::Vehicle::setParking() {$/;"	f	class:Veins::TraCICommandInterface::Vehicle
setPath	src/veins/modules/phy/Decider80211p.h	/^		void setPath(std::string myPath) {$/;"	f	class:Decider80211p
setPhaseIndex	src/veins/modules/mobility/traci/TraCICommandInterface.cc	/^void TraCICommandInterface::Trafficlight::setPhaseIndex(int32_t index) {$/;"	f	class:Veins::TraCICommandInterface::Trafficlight
setPlatoonFormation	src/veins/modules/application/platooning/messages/BikesMessage_m.cc	/^void BikesMessage::setPlatoonFormation(unsigned int k, int platoonFormation)$/;"	f	class:BikesMessage
setPlatoonFormation	src/veins/modules/application/platooning/messages/ManeuverMessage_m.cc	/^void ManeuverMessage::setPlatoonFormation(unsigned int k, int platoonFormation)$/;"	f	class:ManeuverMessage
setPlatoonFormationArraySize	src/veins/modules/application/platooning/messages/BikesMessage_m.cc	/^void BikesMessage::setPlatoonFormationArraySize(unsigned int size)$/;"	f	class:BikesMessage
setPlatoonFormationArraySize	src/veins/modules/application/platooning/messages/ManeuverMessage_m.cc	/^void ManeuverMessage::setPlatoonFormationArraySize(unsigned int size)$/;"	f	class:ManeuverMessage
setPlatoonId	src/veins/modules/application/platooning/messages/BikesMessage_m.cc	/^void BikesMessage::setPlatoonId(int platoonId)$/;"	f	class:BikesMessage
setPlatoonId	src/veins/modules/application/platooning/messages/ManeuverMessage_m.cc	/^void ManeuverMessage::setPlatoonId(int platoonId)$/;"	f	class:ManeuverMessage
setPlatoonLane	src/veins/modules/application/platooning/messages/BikesMessage_m.cc	/^void BikesMessage::setPlatoonLane(int platoonLane)$/;"	f	class:BikesMessage
setPlatoonLane	src/veins/modules/application/platooning/messages/ManeuverMessage_m.cc	/^void ManeuverMessage::setPlatoonLane(int platoonLane)$/;"	f	class:ManeuverMessage
setPlatoonLeaderData	src/veins/modules/mobility/traci/TraCICommandInterface.cc	/^void TraCICommandInterface::Vehicle::setPlatoonLeaderData(double speed, double acceleration, double positionX, double positionY, double time) {$/;"	f	class:Veins::TraCICommandInterface::Vehicle
setPlatoonSpeed	src/veins/modules/application/platooning/messages/BikesMessage_m.cc	/^void BikesMessage::setPlatoonSpeed(double platoonSpeed)$/;"	f	class:BikesMessage
setPlatoonSpeed	src/veins/modules/application/platooning/messages/ManeuverMessage_m.cc	/^void ManeuverMessage::setPlatoonSpeed(double platoonSpeed)$/;"	f	class:ManeuverMessage
setPolicy	src/veins/base/messages/BorderMsg_m.cc	/^void BorderMsg::setPolicy(int policy)$/;"	f	class:BorderMsg
setPositionX	src/veins/modules/application/platooning/messages/PlatooningBeacon_m.cc	/^void PlatooningBeacon::setPositionX(double positionX)$/;"	f	class:PlatooningBeacon
setPositionY	src/veins/modules/application/platooning/messages/PlatooningBeacon_m.cc	/^void PlatooningBeacon::setPositionY(double positionY)$/;"	f	class:PlatooningBeacon
setPrecedingVehicleData	src/veins/modules/mobility/traci/TraCICommandInterface.cc	/^void TraCICommandInterface::Vehicle::setPrecedingVehicleData(double speed, double acceleration, double positionX, double positionY, double time) {$/;"	f	class:Veins::TraCICommandInterface::Vehicle
setPriority	src/veins/modules/application/platooning/messages/UnicastMessage_m.cc	/^void UnicastMessage::setPriority(int priority)$/;"	f	class:UnicastMessage
setPriority	src/veins/modules/messages/WaveShortMessage_m.cc	/^void WaveShortMessage::setPriority(int priority)$/;"	f	class:WaveShortMessage
setProgram	src/veins/modules/mobility/traci/TraCICommandInterface.cc	/^void TraCICommandInterface::Trafficlight::setProgram(std::string program) {$/;"	f	class:Veins::TraCICommandInterface::Trafficlight
setPropagationDelay	src/veins/base/phyLayer/Signal.cc	/^void Signal::setPropagationDelay(simtime_t_cref delay) {$/;"	f	class:Signal
setProtocolId	src/veins/base/messages/AirFrame_m.cc	/^void AirFrame::setProtocolId(int protocolId)$/;"	f	class:Veins::AirFrame
setPsc	src/veins/modules/messages/WaveShortMessage_m.cc	/^void WaveShortMessage::setPsc(const char * psc)$/;"	f	class:WaveShortMessage
setPsid	src/veins/modules/messages/WaveShortMessage_m.cc	/^void WaveShortMessage::setPsid(int psid)$/;"	f	class:WaveShortMessage
setRSSI	src/veins/base/utils/MacToNetwControlInfo.h	/^	void setRSSI(double _rssi) {$/;"	f	class:MacToNetwControlInfo
setRadioState	src/veins/base/phyLayer/BasePhyLayer.cc	/^simtime_t BasePhyLayer::setRadioState(int rs) {$/;"	f	class:BasePhyLayer
setRadioState	src/veins/modules/phy/PhyLayer80211p.cc	/^simtime_t PhyLayer80211p::setRadioState(int rs) {$/;"	f	class:PhyLayer80211p
setReceptionSenderInfo	src/veins/base/phyLayer/Signal.cc	/^void Signal::setReceptionSenderInfo(const cMessage *const pMsg)$/;"	f	class:Signal
setRecipientAddress	src/veins/modules/messages/WaveShortMessage_m.cc	/^void WaveShortMessage::setRecipientAddress(int recipientAddress)$/;"	f	class:WaveShortMessage
setRecvPower_dBm	src/veins/modules/application/platooning/messages/UnicastMessage_m.cc	/^void UnicastMessage::setRecvPower_dBm(double recvPower_dBm)$/;"	f	class:UnicastMessage
setRelayerId	src/veins/modules/application/platooning/messages/PlatooningBeacon_m.cc	/^void PlatooningBeacon::setRelayerId(int relayerId)$/;"	f	class:PlatooningBeacon
setRequest	src/veins/base/phyLayer/BaseDecider.h	/^		void setRequest(ChannelSenseRequest* request) { first = request; }$/;"	f	struct:BaseDecider::__anon1
setResult	src/veins/base/messages/ChannelSenseRequest_m.cc	/^void ChannelSenseRequest::setResult(const ChannelState& result)$/;"	f	class:ChannelSenseRequest
setRetry	src/veins/modules/messages/Mac80211Pkt_m.cc	/^void Mac80211Pkt::setRetry(bool retry)$/;"	f	class:Mac80211Pkt
setScheme	src/veins/modules/mobility/traci/TraCICommandInterface.cc	/^void TraCICommandInterface::GuiView::setScheme(std::string name) {$/;"	f	class:Veins::TraCICommandInterface::GuiView
setSecurityType	src/veins/modules/messages/WaveShortMessage_m.cc	/^void WaveShortMessage::setSecurityType(int securityType)$/;"	f	class:WaveShortMessage
setSenderAddress	src/veins/modules/messages/WaveShortMessage_m.cc	/^void WaveShortMessage::setSenderAddress(int senderAddress)$/;"	f	class:WaveShortMessage
setSenderPos	src/veins/modules/messages/WaveShortMessage_m.cc	/^void WaveShortMessage::setSenderPos(const Coord& senderPos)$/;"	f	class:WaveShortMessage
setSenseMode	src/veins/base/messages/ChannelSenseRequest_m.cc	/^void ChannelSenseRequest::setSenseMode(int senseMode)$/;"	f	class:ChannelSenseRequest
setSenseStart	src/veins/base/phyLayer/BaseDecider.h	/^		void setSenseStart(simtime_t_cref start) { second = start; }$/;"	f	struct:BaseDecider::__anon1
setSenseTimeout	src/veins/base/messages/ChannelSenseRequest_m.cc	/^void ChannelSenseRequest::setSenseTimeout(simtime_t senseTimeout)$/;"	f	class:ChannelSenseRequest
setSequenceControl	src/veins/modules/messages/Mac80211Pkt_m.cc	/^void Mac80211Pkt::setSequenceControl(int sequenceControl)$/;"	f	class:Mac80211Pkt
setSequenceId	src/veins/base/messages/MacPkt_m.cc	/^void MacPkt::setSequenceId(long sequenceId)$/;"	f	class:MacPkt
setSequenceNumber	src/veins/modules/application/platooning/messages/PlatooningBeacon_m.cc	/^void PlatooningBeacon::setSequenceNumber(int sequenceNumber)$/;"	f	class:PlatooningBeacon
setSequenceNumber	src/veins/modules/application/platooning/messages/UnicastMessage_m.cc	/^void UnicastMessage::setSequenceNumber(int sequenceNumber)$/;"	f	class:UnicastMessage
setSerial	src/veins/modules/messages/WaveShortMessage_m.cc	/^void WaveShortMessage::setSerial(int serial)$/;"	f	class:WaveShortMessage
setShape	src/veins/modules/mobility/traci/TraCICommandInterface.cc	/^void TraCICommandInterface::Polygon::setShape(const std::list<Coord>& points) {$/;"	f	class:Veins::TraCICommandInterface::Polygon
setShape	src/veins/modules/obstacle/Obstacle.cc	/^void Obstacle::setShape(Coords shape) {$/;"	f	class:Obstacle
setSignal	src/veins/base/messages/AirFrame_m.cc	/^void AirFrame::setSignal(const Signal& signal)$/;"	f	class:Veins::AirFrame
setSignal	src/veins/base/phyLayer/MacToPhyControlInfo.h	/^	void setSignal(Signal* s) {$/;"	f	class:MacToPhyControlInfo
setSource	src/veins/modules/application/platooning/messages/UnicastMessage_m.cc	/^void UnicastMessage::setSource(int source)$/;"	f	class:UnicastMessage
setSpeed	src/veins/base/utils/Move.h	/^	void setSpeed(double speed)$/;"	f	class:Move
setSpeed	src/veins/modules/application/platooning/messages/PlatooningBeacon_m.cc	/^void PlatooningBeacon::setSpeed(double speed)$/;"	f	class:PlatooningBeacon
setSpeed	src/veins/modules/mobility/traci/TraCICommandInterface.cc	/^void TraCICommandInterface::Vehicle::setSpeed(double speed) {$/;"	f	class:Veins::TraCICommandInterface::Vehicle
setSpeedMode	src/veins/modules/mobility/traci/TraCICommandInterface.cc	/^void TraCICommandInterface::Vehicle::setSpeedMode(int32_t bitset) {$/;"	f	class:Veins::TraCICommandInterface::Vehicle
setSrcAddr	src/veins/base/messages/MacPkt_m.cc	/^void MacPkt::setSrcAddr(const LAddress::L2Type& srcAddr)$/;"	f	class:MacPkt
setStart	src/veins/base/utils/Move.h	/^	void setStart(const Coord& startPos)$/;"	f	class:Move
setStart	src/veins/base/utils/Move.h	/^	void setStart(const Coord& startPos, simtime_t_cref startTime)$/;"	f	class:Move
setStartPos	src/veins/base/messages/BorderMsg_m.cc	/^void BorderMsg::setStartPos(const Coord& startPos)$/;"	f	class:BorderMsg
setState	src/veins/base/messages/AirFrame_m.cc	/^void AirFrame::setState(int state)$/;"	f	class:Veins::AirFrame
setSwitchTime	src/veins/base/phyLayer/PhyUtils.cc	/^void Radio::setSwitchTime(int from, int to, simtime_t_cref time)$/;"	f	class:Radio
setTime	src/veins/base/phyLayer/MappingBase.cc	/^void Argument::setTime(simtime_t_cref time)$/;"	f	class:Argument
setTime	src/veins/base/phyLayer/PhyUtils.h	/^		void setTime(simtime_t_cref time) {$/;"	f	class:RadioStateAnalogueModel::ListEntry
setTime	src/veins/modules/application/platooning/messages/PlatooningBeacon_m.cc	/^void PlatooningBeacon::setTime(double time)$/;"	f	class:PlatooningBeacon
setTimestamp	src/veins/modules/messages/WaveShortMessage_m.cc	/^void WaveShortMessage::setTimestamp(simtime_t timestamp)$/;"	f	class:WaveShortMessage
setTrackingModeTo	src/veins/base/phyLayer/PhyUtils.h	/^	void setTrackingModeTo(bool b) {$/;"	f	class:RadioStateAnalogueModel
setTrackingModeTo	src/veins/base/phyLayer/PhyUtils.h	/^	void setTrackingModeTo(bool b) {$/;"	f	class:Veins::Radio
setTransmissionPower	src/veins/base/phyLayer/Signal.cc	/^void Signal::setTransmissionPower(ConstMapping *power)$/;"	f	class:Signal
setTxPower	src/veins/modules/mac/ieee80211p/Mac1609_4.cc	/^void Mac1609_4::setTxPower(double txPower_mW) {$/;"	f	class:Mac1609_4
setTxPower_mW	src/veins/modules/messages/PhyControlMessage_m.cc	/^void PhyControlMessage::setTxPower_mW(double txPower_mW)$/;"	f	class:PhyControlMessage
setType	src/veins/base/messages/AirFrame_m.cc	/^void AirFrame::setType(int type)$/;"	f	class:Veins::AirFrame
setType	src/veins/base/modules/BaseBattery.h	/^	virtual void setType(int t) { type = t; }$/;"	f	class:DrawAmount
setType	src/veins/modules/application/platooning/messages/UnicastMessage_m.cc	/^void UnicastMessage::setType(int type)$/;"	f	class:UnicastMessage
setUnderSensitivity	src/veins/modules/messages/AirFrame11p_m.cc	/^void AirFrame11p::setUnderSensitivity(bool underSensitivity)$/;"	f	class:AirFrame11p
setUpControlInfo	src/veins/base/modules/BaseMacLayer.cc	/^cObject *const BaseMacLayer::setUpControlInfo(cMessage *const pMsg, const LAddress::L2Type& pSrcAddr)$/;"	f	class:BaseMacLayer
setUpControlInfo	src/veins/base/phyLayer/BasePhyLayer.cc	/^cObject *const BasePhyLayer::setUpControlInfo(cMessage *const pMsg, DeciderResult *const pDeciderResult)$/;"	f	class:BasePhyLayer
setValue	src/veins/base/modules/BaseBattery.h	/^	virtual void setValue(double v) { value = v; }$/;"	f	class:DrawAmount
setValue	src/veins/base/phyLayer/Interpolation.h	/^	void setValue(mapped_cref_type value) {$/;"	f	class:InterpolateableIterator
setValue	src/veins/base/phyLayer/MappingUtils.h	/^	virtual void setValue(argument_value_cref_t value) { assert(false); }$/;"	f	class:ConstMappingIteratorWrapper
setValue	src/veins/base/phyLayer/MappingUtils.h	/^	virtual void setValue(argument_value_cref_t value) { assert(false); }$/;"	f	class:LinearIntplMappingIterator
setValue	src/veins/base/phyLayer/MappingUtils.h	/^	virtual void setValue(argument_value_cref_t value) { origIterator->setValue(value); }$/;"	f	class:FilteredMappingIterator
setValue	src/veins/base/phyLayer/MappingUtils.h	/^	virtual void setValue(argument_value_cref_t value) {$/;"	f	class:FilledUpMappingIterator
setValue	src/veins/base/phyLayer/MappingUtils.h	/^	virtual void setValue(argument_value_cref_t value) {$/;"	f	class:TimeMappingIterator
setValue	src/veins/base/phyLayer/MappingUtils.h	/^	virtual void setValue(argument_value_cref_t value){$/;"	f	class:MultiDimMappingIterator
setValue	src/veins/base/phyLayer/MappingUtils.h	/^	virtual void setValue(const Argument& pos, Argument::mapped_type_cref value) {$/;"	f	class:DelayedMapping
setValue	src/veins/base/phyLayer/MappingUtils.h	/^	virtual void setValue(const Argument& pos, argument_value_cref_t value) { assert(false); }$/;"	f	class:ConstMappingWrapper
setValue	src/veins/base/phyLayer/MappingUtils.h	/^	virtual void setValue(const Argument& pos, argument_value_cref_t value) { assert(false); }$/;"	f	class:LinearIntplMapping
setValue	src/veins/base/phyLayer/MappingUtils.h	/^	virtual void setValue(const Argument& pos, argument_value_cref_t value) {$/;"	f	class:MultiDimMapping
setValue	src/veins/base/phyLayer/MappingUtils.h	/^	virtual void setValue(const Argument& pos, argument_value_cref_t value) {$/;"	f	class:TimeMapping
setValue	src/veins/base/phyLayer/MappingUtils.h	/^	void setValue(argument_value_cref_t val) { value = val; }$/;"	f	class:ConstantSimpleConstMapping
setValue	src/veins/base/phyLayer/PhyUtils.h	/^		void setValue(Argument::mapped_type_cref value) {$/;"	f	class:RadioStateAnalogueModel::ListEntry
setVehicleId	src/veins/modules/application/platooning/messages/BikesMessage_m.cc	/^void BikesMessage::setVehicleId(int vehicleId)$/;"	f	class:BikesMessage
setVehicleId	src/veins/modules/application/platooning/messages/ManeuverMessage_m.cc	/^void ManeuverMessage::setVehicleId(int vehicleId)$/;"	f	class:ManeuverMessage
setVehicleId	src/veins/modules/application/platooning/messages/PlatooningBeacon_m.cc	/^void PlatooningBeacon::setVehicleId(int vehicleId)$/;"	f	class:PlatooningBeacon
setVehicleType	src/veins/modules/application/platooning/messages/BikesMessage_m.cc	/^void BikesMessage::setVehicleType(int vehicleType)$/;"	f	class:BikesMessage
setWasTransmitting	src/veins/modules/messages/AirFrame11p_m.cc	/^void AirFrame11p::setWasTransmitting(bool wasTransmitting)$/;"	f	class:AirFrame11p
setWsmData	src/veins/modules/messages/WaveShortMessage_m.cc	/^void WaveShortMessage::setWsmData(const char * wsmData)$/;"	f	class:WaveShortMessage
setWsmLength	src/veins/modules/messages/WaveShortMessage_m.cc	/^void WaveShortMessage::setWsmLength(int wsmLength)$/;"	f	class:WaveShortMessage
setWsmVersion	src/veins/modules/messages/WaveShortMessage_m.cc	/^void WaveShortMessage::setWsmVersion(int wsmVersion)$/;"	f	class:WaveShortMessage
setZoom	src/veins/modules/mobility/traci/TraCICommandInterface.cc	/^void TraCICommandInterface::GuiView::setZoom(double zoom) {$/;"	f	class:Veins::TraCICommandInterface::GuiView
set_sumoconfig_option	sumo-launchd.py	/^def set_sumoconfig_option(config_parser, config_xml, section, key, value):$/;"	f
show	src/veins/modules/world/annotations/AnnotationManager.cc	/^void AnnotationManager::show(const Annotation* annotation) {$/;"	f	class:AnnotationManager
showAll	src/veins/modules/world/annotations/AnnotationManager.cc	/^void AnnotationManager::showAll(Group* group) {$/;"	f	class:AnnotationManager
sigChannelBusy	src/veins/modules/mac/ieee80211p/Mac1609_4.h	/^		simsignal_t sigChannelBusy;$/;"	m	class:Mac1609_4
sigCollision	src/veins/modules/mac/ieee80211p/Mac1609_4.h	/^		simsignal_t sigCollision;$/;"	m	class:Mac1609_4
sign	src/veins/base/utils/FWMath.h	/^  static int sign(double i) { return (i>=0)? 1 : -1; };$/;"	f	class:FWMath
signal	src/veins/base/phyLayer/MacToPhyControlInfo.h	/^	Signal* signal;$/;"	m	class:MacToPhyControlInfo
signalEnd	src/veins/base/phyLayer/PhyUtils.h	/^	simtime_t signalEnd;$/;"	m	class:RSAMConstMappingIterator
signalEnd	src/veins/base/phyLayer/PhyUtils.h	/^	simtime_t signalEnd;$/;"	m	class:RSAMMapping
signalStart	src/veins/base/phyLayer/PhyUtils.h	/^	simtime_t signalStart;$/;"	m	class:RSAMConstMappingIterator
signalStart	src/veins/base/phyLayer/PhyUtils.h	/^	simtime_t signalStart;$/;"	m	class:RSAMMapping
signalStates	src/veins/modules/phy/Decider80211p.h	/^		std::map<AirFrame*,int> signalStates;$/;"	m	class:Decider80211p
signal_var	src/veins/base/messages/AirFrame_m.h	/^    Signal signal_var;$/;"	m	class:Veins::AirFrame
signals	src/veins/modules/mobility/traci/TraCIMobility.h	/^		TraCIScenarioManager::VehicleSignal signals; \/**<updated by nextPosition() *\/$/;"	m	class:Veins::TraCIMobility
simsignalwrap_t	src/veins/base/utils/MiXiMDefs.h	/^	simsignalwrap_t()$/;"	f	class:simsignalwrap_t
simsignalwrap_t	src/veins/base/utils/MiXiMDefs.h	/^	simsignalwrap_t(const char *const pSignalName)$/;"	f	class:simsignalwrap_t
simsignalwrap_t	src/veins/base/utils/MiXiMDefs.h	/^	simsignalwrap_t(const simsignalwrap_t& pCpy)$/;"	f	class:simsignalwrap_t
simsignalwrap_t	src/veins/base/utils/MiXiMDefs.h	/^class MIXIM_API simsignalwrap_t {$/;"	c
size	src/veins/base/connectionManager/BaseConnectionManager.h	/^		unsigned size;$/;"	m	class:BaseConnectionManager::CoordSet
size	src/veins/modules/application/platooning/CC_Const.h	/^    int size;    \/\/size of message. indicates how many bytes comes after the header$/;"	m	struct:Plexe::CCDataHeader
slowDown	src/veins/modules/mobility/traci/TraCICommandInterface.cc	/^void TraCICommandInterface::Vehicle::slowDown(double speed, int32_t time) {$/;"	f	class:Veins::TraCICommandInterface::Vehicle
snprintf	src/veins/base/utils/winsupport.h	21;"	d
snr	src/veins/modules/phy/DeciderResult80211.h	/^	double snr;$/;"	m	class:DeciderResult80211
snrThreshold	src/veins/modules/phy/Decider80211p.h	/^		double snrThreshold;$/;"	m	class:Decider80211p
snrThreshold	src/veins/modules/phy/SNRThresholdDecider.h	/^	double snrThreshold;$/;"	m	class:SNRThresholdDecider
socket	src/veins/modules/mobility/traci/TraCIConnection.cc	/^SOCKET socket(void* ptr)$/;"	f	namespace:Veins
socketPtr	src/veins/modules/mobility/traci/TraCIConnection.h	/^		void* socketPtr;$/;"	m	class:Veins::TraCIConnection
source_var	src/veins/modules/application/platooning/messages/UnicastMessage_m.h	/^    int source_var;$/;"	m	class:UnicastMessage
speed	src/veins/base/utils/Move.h	/^    double speed;$/;"	m	class:Move
speed	src/veins/modules/application/platooning/CC_Const.h	/^    double speed;        \/\/vehicle speed$/;"	m	struct:Plexe::VEHICLE_DATA
speed	src/veins/modules/application/platooning/bikeplatoons/BikesApp.h	/^			double				speed;		\/\/speed of the platoon$/;"	m	struct:BikesApp::VEHICLE_DATA
speed	src/veins/modules/application/platooning/bikes/BikeManeuver.h	/^			double speed;               \/\/speed of the platoon$/;"	m	struct:BikeManeuver::VEHICLE_DATA
speed	src/veins/modules/application/platooning/maneuver/JoinManeuverApp.h	/^			double				speed;		\/\/speed of the platoon$/;"	m	struct:JoinManeuverApp::VEHICLE_DATA
speed	src/veins/modules/mobility/traci/TraCIBaseTrafficManager.h	/^			float		speed;		\/\/start speed (-1 for lane speed?)$/;"	m	struct:TraCIBaseTrafficManager::Vehicle
speed	src/veins/modules/mobility/traci/TraCIMobility.h	/^		double speed; \/**< updated by nextPosition() *\/$/;"	m	class:Veins::TraCIMobility
speedOfLight	src/veins/base/modules/BaseWorldUtility.cc	/^const double BaseWorldUtility::speedOfLight = 299792458.0; \/\/\/< meters per second$/;"	m	class:BaseWorldUtility	file:
speedOfLight	src/veins/base/modules/BaseWorldUtility.h	/^	static const double speedOfLight;$/;"	m	class:BaseWorldUtility
speedOut	src/veins/modules/application/platooning/protocols/BaseProtocol.h	/^		cOutVector distanceOut, relSpeedOut, nodeIdOut, speedOut, posxOut, posyOut, accelerationOut;$/;"	m	class:BaseProtocol
speed_var	src/veins/modules/application/platooning/messages/PlatooningBeacon_m.h	/^    double speed_var;$/;"	m	class:PlatooningBeacon
splmEV	src/veins/modules/analogueModel/SimplePathlossModel.cc	7;"	d	file:
sqrTorusDist	src/veins/base/connectionManager/BaseConnectionManager.cc	/^    double sqrTorusDist(Coord c, Coord b, Coord size) {$/;"	f	namespace:__anon2
sqrTorusDist	src/veins/base/utils/Coord.cc	/^double Coord::sqrTorusDist(const Coord& b, const Coord& size) const {$/;"	f	class:Coord
sqrdist	src/veins/base/utils/Coord.h	/^    double sqrdist(const Coord& a) const {$/;"	f	class:Coord
squareLength	src/veins/base/utils/Coord.h	/^    double squareLength() const$/;"	f	class:Coord
srcAddr_var	src/veins/base/messages/MacPkt_m.h	/^    LAddress::L2Type srcAddr_var;$/;"	m	class:MacPkt
ssChangeSignal	src/veins/base/utils/MiXiMDefs.h	/^	mutable volatile simsignal_t ssChangeSignal;$/;"	m	class:simsignalwrap_t
startAccidentMsg	src/veins/modules/mobility/traci/TraCIMobility.h	/^		cMessage* startAccidentMsg;$/;"	m	class:Veins::TraCIMobility
startContent	src/veins/modules/mac/ieee80211p/Mac1609_4.cc	/^simtime_t Mac1609_4::EDCA::startContent(simtime_t idleSince,bool guardActive) {$/;"	f	class:Mac1609_4::EDCA
startIt	src/veins/base/phyLayer/ChannelInfo.h	/^		ItList startIt;$/;"	m	class:ChannelInfo::BaseIntersectionIterator
startManeuver	src/veins/modules/application/platooning/bikeplatoons/BikesApp.h	/^		cMessage *startManeuver;$/;"	m	class:BikesApp
startManeuver	src/veins/modules/application/platooning/maneuver/JoinManeuverApp.h	/^		cMessage *startManeuver;$/;"	m	class:JoinManeuverApp
startPos	src/veins/base/utils/Move.h	/^    Coord startPos;$/;"	m	class:Move
startPos_var	src/veins/base/messages/BorderMsg_m.h	/^    Coord startPos_var;$/;"	m	class:BorderMsg
startRecording	src/veins/base/phyLayer/ChannelInfo.h	/^	void startRecording(simtime_t_cref start)$/;"	f	class:ChannelInfo
startSim	src/veins/modules/application/platooning/bikes/BikeManeuver.h	/^        cMessage *startSim;$/;"	m	class:BikeManeuver
startTime	src/veins/base/utils/Move.h	/^    simtime_t startTime;$/;"	m	class:Move
startTime	src/veins/modules/mobility/traci/TraCIMobility.h	/^				simtime_t startTime; \/**< for statistics: start time *\/$/;"	m	class:Veins::TraCIMobility::Statistics
state	src/veins/base/phyLayer/PhyUtils.h	/^	int state;$/;"	m	class:Veins::Radio
state	src/veins/base/utils/HostState.h	/^    States state;$/;"	m	class:HostState
state_var	src/veins/base/messages/AirFrame_m.h	/^    int state_var;$/;"	m	class:Veins::AirFrame
statistics	src/veins/modules/mobility/traci/TraCIMobility.h	/^		Statistics statistics; \/**< everything statistics-related *\/$/;"	m	class:Veins::TraCIMobility
statsDroppedPackets	src/veins/modules/mac/ieee80211p/Mac1609_4.h	/^		long statsDroppedPackets;$/;"	m	class:Mac1609_4
statsNumBackoff	src/veins/modules/mac/ieee80211p/Mac1609_4.h	/^				long statsNumBackoff;$/;"	m	class:Mac1609_4::EDCA
statsNumBackoff	src/veins/modules/mac/ieee80211p/Mac1609_4.h	/^		long statsNumBackoff;$/;"	m	class:Mac1609_4
statsNumInternalContention	src/veins/modules/mac/ieee80211p/Mac1609_4.h	/^				long statsNumInternalContention;$/;"	m	class:Mac1609_4::EDCA
statsNumInternalContention	src/veins/modules/mac/ieee80211p/Mac1609_4.h	/^		long statsNumInternalContention;$/;"	m	class:Mac1609_4
statsNumTooLittleTime	src/veins/modules/mac/ieee80211p/Mac1609_4.h	/^		long statsNumTooLittleTime;$/;"	m	class:Mac1609_4
statsReceivedBroadcasts	src/veins/modules/mac/ieee80211p/Mac1609_4.h	/^		long statsReceivedBroadcasts;$/;"	m	class:Mac1609_4
statsReceivedPackets	src/veins/modules/mac/ieee80211p/Mac1609_4.h	/^		long statsReceivedPackets;$/;"	m	class:Mac1609_4
statsSNIRLostPackets	src/veins/modules/mac/ieee80211p/Mac1609_4.h	/^		long statsSNIRLostPackets;$/;"	m	class:Mac1609_4
statsSentPackets	src/veins/modules/mac/ieee80211p/Mac1609_4.h	/^		long statsSentPackets;$/;"	m	class:Mac1609_4
statsSlotsBackoff	src/veins/modules/mac/ieee80211p/Mac1609_4.h	/^				long statsSlotsBackoff;$/;"	m	class:Mac1609_4::EDCA
statsSlotsBackoff	src/veins/modules/mac/ieee80211p/Mac1609_4.h	/^		long statsSlotsBackoff;$/;"	m	class:Mac1609_4
statsTXRXLostPackets	src/veins/modules/mac/ieee80211p/Mac1609_4.h	/^		long statsTXRXLostPackets;$/;"	m	class:Mac1609_4
statsTotalBusyTime	src/veins/modules/mac/ieee80211p/Mac1609_4.h	/^		simtime_t statsTotalBusyTime;$/;"	m	class:Mac1609_4
stdDev	src/veins/modules/analogueModel/LogNormalShadowing.h	/^	double stdDev;$/;"	m	class:LogNormalShadowing
step	examples/platoonBikes/sumocfg/runner.py	/^    step = maxstep$/;"	v
step	examples/platoonBikes/sumocfg/runner.py	/^step = 0$/;"	v
stepfunction	src/veins/base/utils/FWMath.h	/^  static int stepfunction(double i) { return (i>EPSILON) ? 1 : close(i, 0) ? 0 :-1; };$/;"	f	class:FWMath
stopAccidentMsg	src/veins/modules/mobility/traci/TraCIMobility.h	/^		cMessage* stopAccidentMsg;$/;"	m	class:Veins::TraCIMobility
stopAt	src/veins/modules/mobility/traci/TraCICommandInterface.cc	/^void TraCICommandInterface::Vehicle::stopAt(std::string roadId, double pos, uint8_t laneid, double radius, double waittime) {$/;"	f	class:Veins::TraCICommandInterface::Vehicle
stopContent	src/veins/modules/mac/ieee80211p/Mac1609_4.cc	/^void Mac1609_4::EDCA::stopContent(bool allowBackoff, bool generateTxOp) {$/;"	f	class:Mac1609_4::EDCA
stopRecording	src/veins/base/phyLayer/ChannelInfo.h	/^	void stopRecording()$/;"	f	class:ChannelInfo
stopTime	src/veins/modules/mobility/traci/TraCIMobility.h	/^				simtime_t stopTime; \/**< for statistics: stop time *\/$/;"	m	class:Veins::TraCIMobility::Statistics
storage_type	src/veins/base/phyLayer/Interpolation.h	/^	typedef _ContainerType                        storage_type;$/;"	t	class:InterpolatorBase
storage_type	src/veins/base/phyLayer/Interpolation.h	/^	typedef typename base_class_type::storage_type     storage_type;$/;"	t	class:Linear
storage_type	src/veins/base/phyLayer/Interpolation.h	/^	typedef typename base_class_type::storage_type     storage_type;$/;"	t	class:Nearest
storage_type	src/veins/base/phyLayer/Interpolation.h	/^	typedef typename base_class_type::storage_type     storage_type;$/;"	t	class:NextSmaller
storage_type	src/veins/base/phyLayer/MappingUtils.h	/^	typedef base_class_type::storage_type     storage_type;$/;"	t	class:Linear
str	src/veins/modules/mobility/traci/TraCIBuffer.cc	/^std::string TraCIBuffer::str() const {$/;"	f	class:Veins::TraCIBuffer
subIterator	src/veins/base/phyLayer/MappingUtils.h	/^	MappingIterator* subIterator;$/;"	m	class:MultiDimMappingIterator
subMapping	src/veins/base/phyLayer/MappingUtils.h	/^	interpolated                         subMapping;$/;"	m	class:MultiDimMappingIterator
subs	examples/platoonBikes/sumocfg/runner.py	/^        subs = traci.vehicle.getSubscriptionResults(v)$/;"	v
subscribeToVehicleVariables	src/veins/modules/mobility/traci/TraCIScenarioManager.cc	/^void TraCIScenarioManager::subscribeToVehicleVariables(std::string vehicleId) {$/;"	f	class:TraCIScenarioManager
subscribedVehicles	src/veins/modules/mobility/traci/TraCIScenarioManager.h	/^		std::set<std::string> subscribedVehicles; \/**< all vehicles we have already subscribed to *\/$/;"	m	class:Veins::TraCIScenarioManager
subtract	src/veins/base/phyLayer/MappingUtils.cc	/^Mapping* MappingUtils::subtract(const ConstMapping &f1, const ConstMapping &f2)$/;"	f	class:MappingUtils
subtract	src/veins/base/phyLayer/MappingUtils.cc	/^Mapping* MappingUtils::subtract(const ConstMapping &f1, const ConstMapping &f2, Mapping::argument_value_cref_t outOfRangeVal)$/;"	f	class:MappingUtils
swTimes	src/veins/base/phyLayer/PhyUtils.h	/^	simtime_t** swTimes;$/;"	m	class:Veins::Radio
switchHostState	src/veins/base/modules/BaseModule.cc	/^void BaseModule::switchHostState(HostState::States state)$/;"	f	class:BaseModule
switchTo	src/veins/base/phyLayer/PhyUtils.cc	/^simtime_t Radio::switchTo(int newState, simtime_t_cref now)$/;"	f	class:Radio
switchToTx	src/veins/base/phyLayer/Decider.h	/^	virtual void switchToTx() {}$/;"	f	class:Decider
switchToTx	src/veins/modules/phy/Decider80211p.cc	/^void Decider80211p::switchToTx() {$/;"	f	class:Decider80211p
tNetwToMacControlInfoBase	src/veins/base/utils/NetwToMacControlInfo.cc	/^typedef NetwToMacControlInfo  tNetwToMacControlInfoBase;$/;"	t	file:
t_access_category	src/veins/modules/mac/ieee80211p/Mac1609_4.h	/^		enum t_access_category {$/;"	g	class:Mac1609_4
t_channel	src/veins/modules/utility/Consts80211p.h	/^enum t_channel {$/;"	g
takeScreenshot	src/veins/modules/mobility/traci/TraCICommandInterface.cc	/^void TraCICommandInterface::GuiView::takeScreenshot(std::string filename) {$/;"	f	class:Veins::TraCICommandInterface::GuiView
takeScreenshot	src/veins/modules/mobility/traci/TraCIScreenRecorder.h	/^		cMessage* takeScreenshot;$/;"	m	class:Veins::TraCIScreenRecorder
testNumber	src/veins/modules/application/traci/TraCITestApp.h	/^		int testNumber;$/;"	m	class:Veins::TraCITestApp
text	src/veins/modules/world/annotations/AnnotationManager.h	/^				std::string text;$/;"	m	class:Veins::AnnotationManager::Point
thermalNoise	src/veins/base/phyLayer/BasePhyLayer.h	/^	ConstantSimpleConstMapping* thermalNoise;$/;"	m	class:BasePhyLayer
time	src/veins/base/phyLayer/MappingBase.cc	/^const Dimension             Dimension::time      = Dimension::time_static();$/;"	m	class:Dimension	file:
time	src/veins/base/phyLayer/MappingBase.h	/^	simtime_t      time;$/;"	m	class:Argument
time	src/veins/base/phyLayer/MappingBase.h	/^	static const Dimension time;$/;"	m	class:Dimension
time	src/veins/modules/application/platooning/CC_Const.h	/^    double time;         \/\/time at which such information was read from vehicle's sensors$/;"	m	struct:Plexe::VEHICLE_DATA
timeDomain	src/veins/base/phyLayer/MappingBase.h	/^	static const DimensionSet timeDomain;$/;"	m	class:DimensionSet
timeFreqDomain	src/veins/base/phyLayer/MappingBase.h	/^	static const DimensionSet timeFreqDomain;$/;"	m	class:DimensionSet
timeLeftInSlot	src/veins/modules/mac/ieee80211p/Mac1609_4.cc	/^simtime_t Mac1609_4::timeLeftInSlot() const {$/;"	f	class:Mac1609_4
timeLeftTillGuardOver	src/veins/modules/mac/ieee80211p/Mac1609_4.cc	/^simtime_t Mac1609_4::timeLeftTillGuardOver() const {$/;"	f	class:Mac1609_4
time_static	src/veins/base/phyLayer/MappingBase.cc	/^Dimension& Dimension::time_static() {$/;"	f	class:Dimension
time_var	src/veins/modules/application/platooning/messages/PlatooningBeacon_m.h	/^    double time_var;$/;"	m	class:PlatooningBeacon
timeout	src/veins/modules/application/platooning/UnicastProtocol.h	/^		cMessage *timeout;$/;"	m	class:UnicastProtocol
timestamp_var	src/veins/modules/messages/WaveShortMessage_m.h	/^    simtime_t timestamp_var;$/;"	m	class:WaveShortMessage
title	src/veins/modules/world/annotations/AnnotationManager.h	/^				std::string title;$/;"	m	class:Veins::AnnotationManager::Group
to	src/veins/base/phyLayer/ChannelInfo.h	/^		simtime_t to;$/;"	m	class:ChannelInfo::BaseIntersectionIterator
toString	src/veins/base/phyLayer/MappingBase.h	/^	std::string toString(T v, unsigned int length) const {$/;"	f	class:ConstMapping
toString	src/veins/base/phyLayer/MappingBase.h	/^	std::string toString(simtime_t_cref v, unsigned int length) const {$/;"	f	class:ConstMapping
toString	src/veins/base/utils/asserts.h	/^template<class T> std::string toString(const T& v) {$/;"	f
tools	examples/platoonBikes/sumocfg/runner.py	/^    tools = os.path.join(os.environ['SUMO_HOME'], 'tools')$/;"	v
totalCO2Emission	src/veins/modules/mobility/traci/TraCIMobility.h	/^				double totalCO2Emission; \/**< for statistics: total CO2 emission *\/$/;"	m	class:Veins::TraCIMobility::Statistics
totalDistance	src/veins/modules/mobility/traci/TraCIMobility.h	/^				double totalDistance; \/**< for statistics: total distance travelled *\/$/;"	m	class:Veins::TraCIMobility::Statistics
totalTime	src/veins/modules/mobility/traci/TraCIMobility.h	/^				simtime_t totalTime; \/**< for statistics: total time travelled *\/$/;"	m	class:Veins::TraCIMobility::Statistics
traci	src/veins/modules/application/platooning/apps/BaseApp.h	/^		Veins::TraCICommandInterface *traci;$/;"	m	class:BaseApp
traci	src/veins/modules/application/platooning/protocols/BaseProtocol.h	/^		Veins::TraCICommandInterface *traci;$/;"	m	class:BaseProtocol
traci	src/veins/modules/application/traci/TraCIDemo11p.h	/^		TraCICommandInterface* traci;$/;"	m	class:TraCIDemo11p
traci	src/veins/modules/application/traci/TraCITestApp.h	/^		TraCICommandInterface* traci;$/;"	m	class:Veins::TraCITestApp
traci	src/veins/modules/mobility/traci/TraCICommandInterface.h	/^				TraCICommandInterface* traci;$/;"	m	class:Veins::TraCICommandInterface::GuiView
traci	src/veins/modules/mobility/traci/TraCICommandInterface.h	/^				TraCICommandInterface* traci;$/;"	m	class:Veins::TraCICommandInterface::Junction
traci	src/veins/modules/mobility/traci/TraCICommandInterface.h	/^				TraCICommandInterface* traci;$/;"	m	class:Veins::TraCICommandInterface::Lane
traci	src/veins/modules/mobility/traci/TraCICommandInterface.h	/^				TraCICommandInterface* traci;$/;"	m	class:Veins::TraCICommandInterface::Poi
traci	src/veins/modules/mobility/traci/TraCICommandInterface.h	/^				TraCICommandInterface* traci;$/;"	m	class:Veins::TraCICommandInterface::Polygon
traci	src/veins/modules/mobility/traci/TraCICommandInterface.h	/^				TraCICommandInterface* traci;$/;"	m	class:Veins::TraCICommandInterface::Road
traci	src/veins/modules/mobility/traci/TraCICommandInterface.h	/^				TraCICommandInterface* traci;$/;"	m	class:Veins::TraCICommandInterface::Route
traci	src/veins/modules/mobility/traci/TraCICommandInterface.h	/^				TraCICommandInterface* traci;$/;"	m	class:Veins::TraCICommandInterface::Trafficlight
traci	src/veins/modules/mobility/traci/TraCICommandInterface.h	/^				TraCICommandInterface* traci;$/;"	m	class:Veins::TraCICommandInterface::Vehicle
traci2omnet	src/veins/modules/mobility/traci/TraCIConnection.cc	/^Coord TraCIConnection::traci2omnet(TraCICoord coord) const {$/;"	f	class:Veins::TraCIConnection
traci2omnet	src/veins/modules/mobility/traci/TraCIConnection.cc	/^std::list<Coord> TraCIConnection::traci2omnet(const std::list<TraCICoord>& list) const {$/;"	f	class:Veins::TraCIConnection
traci2omnetAngle	src/veins/modules/mobility/traci/TraCIConnection.cc	/^double TraCIConnection::traci2omnetAngle(double angle) const {$/;"	f	class:Veins::TraCIConnection
traci2omnet_functor	src/veins/modules/mobility/traci/TraCIConnection.cc	/^	traci2omnet_functor(const TraCIConnection& owner) : owner(owner) {}$/;"	f	struct:Veins::traci2omnet_functor
traci2omnet_functor	src/veins/modules/mobility/traci/TraCIConnection.cc	/^struct traci2omnet_functor : public std::unary_function<TraCICoord, Coord> {$/;"	s	namespace:Veins	file:
traciInitialized	src/veins/modules/mobility/traci/TraCIScenarioManager.h	/^		bool traciInitialized;$/;"	m	class:Veins::TraCIScenarioManager
traciLineIds	src/veins/modules/world/annotations/AnnotationManager.h	/^				mutable std::list<std::string> traciLineIds;$/;"	m	class:Veins::AnnotationManager::Annotation
traciPoiIds	src/veins/modules/world/annotations/AnnotationManager.h	/^				mutable std::list<std::string> traciPoiIds;$/;"	m	class:Veins::AnnotationManager::Annotation
traciPolygonsIds	src/veins/modules/world/annotations/AnnotationManager.h	/^				mutable std::list<std::string> traciPolygonsIds;$/;"	m	class:Veins::AnnotationManager::Annotation
traciVehicle	src/veins/modules/application/platooning/apps/BaseApp.h	/^		Veins::TraCICommandInterface::Vehicle *traciVehicle;$/;"	m	class:BaseApp
traciVehicle	src/veins/modules/application/platooning/protocols/BaseProtocol.h	/^		Veins::TraCICommandInterface::Vehicle *traciVehicle;$/;"	m	class:BaseProtocol
traciVehicle	src/veins/modules/application/traci/TraCIDemo11p.h	/^		TraCICommandInterface::Vehicle* traciVehicle;$/;"	m	class:TraCIDemo11p
traciVehicle	src/veins/modules/application/traci/TraCITestApp.h	/^		TraCICommandInterface::Vehicle* traciVehicle;$/;"	m	class:Veins::TraCITestApp
traci_proto.dissector	tests/traci/init.lua	/^function traci_proto.dissector(buffer, pinfo, tree)$/;"	f
traci_proto_commandIdToString	tests/traci/init.lua	/^function traci_proto_commandIdToString(id)$/;"	f
trafficLightId	src/veins/modules/mobility/traci/TraCICommandInterface.h	/^				std::string trafficLightId;$/;"	m	class:Veins::TraCICommandInterface::Trafficlight
trafficlight	src/veins/modules/mobility/traci/TraCICommandInterface.h	/^		Trafficlight trafficlight(std::string trafficLightId) {$/;"	f	class:Veins::TraCICommandInterface
txBitrate	src/veins/base/phyLayer/Signal_.h	/^	Mapping* txBitrate;$/;"	m	class:Signal
txOP	src/veins/modules/mac/ieee80211p/Mac1609_4.h	/^						bool txOP;$/;"	m	class:Mac1609_4::EDCA::EDCAQueue
txOverTimer	src/veins/base/phyLayer/BasePhyLayer.h	/^	cMessage* txOverTimer;$/;"	m	class:BasePhyLayer
txPower	src/veins/modules/mac/ieee80211p/Mac1609_4.h	/^		double txPower;$/;"	m	class:Mac1609_4
txPower_mW_var	src/veins/modules/messages/PhyControlMessage_m.h	/^    double txPower_mW_var;$/;"	m	class:PhyControlMessage
type	src/veins/base/modules/BaseBattery.h	/^	int type;$/;"	m	class:DrawAmount
type	src/veins/modules/application/platooning/CC_Const.h	/^    int type;    \/\/type of message. indicates what comes after the header$/;"	m	struct:Plexe::CCDataHeader
type_CCH	src/veins/modules/utility/Consts80211p.h	/^	type_CCH=0,$/;"	e	enum:t_channel
type_SCH	src/veins/modules/utility/Consts80211p.h	/^	type_SCH,$/;"	e	enum:t_channel
type_var	src/veins/base/messages/AirFrame_m.h	/^    int type_var;$/;"	m	class:Veins::AirFrame
type_var	src/veins/modules/application/platooning/messages/UnicastMessage_m.h	/^    int type_var;$/;"	m	class:UnicastMessage
uint16_t	src/veins/base/utils/winsupport.h	/^typedef unsigned short uint16_t;$/;"	t
uint32_t	src/veins/base/utils/winsupport.h	/^typedef unsigned int uint32_t;$/;"	t
uint8_t	src/veins/base/utils/winsupport.h	/^typedef unsigned char uint8_t;$/;"	t
unEquippedHosts	src/veins/modules/mobility/traci/TraCIScenarioManager.h	/^		std::set<std::string> unEquippedHosts;$/;"	m	class:Veins::TraCIScenarioManager
undelayPosition	src/veins/base/phyLayer/MappingUtils.h	/^	Argument undelayPosition(const Argument& pos) const{$/;"	f	class:BaseDelayedIterator
underSensitivity_var	src/veins/modules/messages/AirFrame11p_m.h	/^    bool underSensitivity_var;$/;"	m	class:AirFrame11p
unregisterNic	src/veins/base/connectionManager/BaseConnectionManager.cc	/^bool BaseConnectionManager::unregisterNic(cModule* nicModule)$/;"	f	class:BaseConnectionManager
unsubscribeFromVehicleVariables	src/veins/modules/mobility/traci/TraCIScenarioManager.cc	/^void TraCIScenarioManager::unsubscribeFromVehicleVariables(std::string vehicleId) {$/;"	f	class:TraCIScenarioManager
updateConnections	src/veins/base/connectionManager/BaseConnectionManager.cc	/^void BaseConnectionManager::updateConnections(int nicID,$/;"	f	class:BaseConnectionManager
updateDisplayString	src/veins/modules/mobility/traci/TraCIMobility.cc	/^void TraCIMobility::updateDisplayString() {$/;"	f	class:TraCIMobility
updateInterval	src/veins/base/modules/BaseMobility.h	/^    simtime_t updateInterval;$/;"	m	class:BaseMobility
updateInterval	src/veins/modules/mobility/traci/TraCIScenarioManager.h	/^		simtime_t updateInterval; \/**< time interval of hosts' position updates *\/$/;"	m	class:Veins::TraCIScenarioManager
updateNextPos	src/veins/base/phyLayer/MappingUtils.h	/^	void updateNextPos() {$/;"	f	class:TimeMappingIterator
updateNextPosition	src/veins/base/phyLayer/MappingUtils.h	/^	void updateNextPosition(){$/;"	f	class:MultiDimMappingIterator
updateNicConnections	src/veins/base/connectionManager/BaseConnectionManager.cc	/^void BaseConnectionManager::updateNicConnections(NicEntries& nmap, BaseConnectionManager::NicEntries::mapped_type   nic)$/;"	f	class:BaseConnectionManager
updateNicPos	src/veins/base/connectionManager/BaseConnectionManager.cc	/^void BaseConnectionManager::updateNicPos(int nicID, const Coord* newPos)$/;"	f	class:BaseConnectionManager
updatePosition	src/veins/base/modules/BaseMobility.cc	/^void BaseMobility::updatePosition() {$/;"	f	class:BaseMobility
updatePosition	src/veins/base/phyLayer/MappingUtils.h	/^	void updatePosition() {$/;"	f	class:BaseDelayedIterator
updateSubIterator	src/veins/base/phyLayer/MappingUtils.h	/^	void updateSubIterator() {$/;"	f	class:MultiDimMappingIterator
updateSubIterator	src/veins/base/phyLayer/MappingUtils.h	/^	void updateSubIterator(const Argument& pos) {$/;"	f	class:MultiDimMappingIterator
upperControlIn	src/veins/base/modules/BaseLayer.h	/^    int upperControlIn;$/;"	m	class:BaseLayer
upperControlIn	src/veins/base/phyLayer/BasePhyLayer.h	/^	int upperControlIn;$/;"	m	class:BasePhyLayer
upperControlIn	src/veins/modules/application/platooning/UnicastProtocol.h	/^		int upperLayerIn, upperLayerOut, upperControlIn, upperControlOut;$/;"	m	class:UnicastProtocol
upperControlIn	src/veins/modules/application/platooning/protocols/BaseProtocol.h	/^		int upperLayerIn, upperLayerOut, upperControlIn, upperControlOut, lowerLayerIn, lowerLayerOut;$/;"	m	class:BaseProtocol
upperControlOut	src/veins/base/modules/BaseLayer.h	/^    int upperControlOut;$/;"	m	class:BaseLayer
upperControlOut	src/veins/base/phyLayer/BasePhyLayer.h	/^	int upperControlOut;$/;"	m	class:BasePhyLayer
upperControlOut	src/veins/modules/application/platooning/UnicastProtocol.h	/^		int upperLayerIn, upperLayerOut, upperControlIn, upperControlOut;$/;"	m	class:UnicastProtocol
upperControlOut	src/veins/modules/application/platooning/protocols/BaseProtocol.h	/^		int upperLayerIn, upperLayerOut, upperControlIn, upperControlOut, lowerLayerIn, lowerLayerOut;$/;"	m	class:BaseProtocol
upperLayerIn	src/veins/base/modules/BaseLayer.h	/^    int upperLayerIn;$/;"	m	class:BaseLayer
upperLayerIn	src/veins/base/phyLayer/BasePhyLayer.h	/^	int upperLayerIn;$/;"	m	class:BasePhyLayer
upperLayerIn	src/veins/modules/application/platooning/UnicastProtocol.h	/^		int upperLayerIn, upperLayerOut, upperControlIn, upperControlOut;$/;"	m	class:UnicastProtocol
upperLayerIn	src/veins/modules/application/platooning/protocols/BaseProtocol.h	/^		int upperLayerIn, upperLayerOut, upperControlIn, upperControlOut, lowerLayerIn, lowerLayerOut;$/;"	m	class:BaseProtocol
upperLayerOut	src/veins/base/modules/BaseLayer.h	/^    int upperLayerOut;$/;"	m	class:BaseLayer
upperLayerOut	src/veins/base/phyLayer/BasePhyLayer.h	/^	int upperLayerOut;$/;"	m	class:BasePhyLayer
upperLayerOut	src/veins/modules/application/platooning/UnicastProtocol.h	/^		int upperLayerIn, upperLayerOut, upperControlIn, upperControlOut;$/;"	m	class:UnicastProtocol
upperLayerOut	src/veins/modules/application/platooning/protocols/BaseProtocol.h	/^		int upperLayerIn, upperLayerOut, upperControlIn, upperControlOut, lowerLayerIn, lowerLayerOut;$/;"	m	class:BaseProtocol
use2D	src/veins/base/modules/BaseWorldUtility.h	/^    bool use2D()$/;"	f	class:BaseWorldUtility
use2DFlag	src/veins/base/modules/BaseWorldUtility.h	/^    bool use2DFlag;$/;"	m	class:BaseWorldUtility
useControllerAcceleration	src/veins/modules/application/platooning/apps/BaseApp.h	/^		bool useControllerAcceleration;$/;"	m	class:BaseApp
useControllerAcceleration	src/veins/modules/application/platooning/protocols/BaseProtocol.h	/^		bool useControllerAcceleration;$/;"	m	class:BaseProtocol
usePropagationDelay	src/veins/base/connectionManager/ChannelAccess.h	/^	bool usePropagationDelay;$/;"	m	class:Veins::ChannelAccess
useSCH	src/veins/modules/mac/ieee80211p/Mac1609_4.h	/^		bool useSCH;$/;"	m	class:Mac1609_4
useSendDirect	src/veins/base/connectionManager/ChannelAccess.h	/^	bool useSendDirect;$/;"	m	class:Veins::ChannelAccess
useTorus	src/veins/base/connectionManager/BaseConnectionManager.h	/^	bool useTorus;$/;"	m	class:BaseConnectionManager
useTorus	src/veins/base/modules/BaseWorldUtility.h	/^    bool useTorus(){$/;"	f	class:BaseWorldUtility
useTorus	src/veins/modules/analogueModel/BreakpointPathlossModel.h	/^    const bool useTorus;$/;"	m	class:BreakpointPathlossModel
useTorus	src/veins/modules/analogueModel/SimpleObstacleShadowing.h	/^	const bool useTorus;$/;"	m	class:SimpleObstacleShadowing
useTorus	src/veins/modules/analogueModel/SimplePathlossModel.h	/^	const bool useTorus;$/;"	m	class:SimplePathlossModel
useTorusFlag	src/veins/base/modules/BaseWorldUtility.h	/^    bool useTorusFlag;$/;"	m	class:BaseWorldUtility
used_iterator	src/veins/base/phyLayer/Interpolation.h	/^	typedef _IteratorType                                used_iterator;$/;"	t	class:ConstInterpolateableIterator
value	src/veins/base/modules/BaseBattery.h	/^	double value;$/;"	m	class:DrawAmount
value	src/veins/base/phyLayer/Interpolation.h	/^	value_type value;$/;"	m	class:Interpolated
value	src/veins/base/phyLayer/MappingUtils.h	/^	argument_value_t value;$/;"	m	class:ConstantSimpleConstMapping
value	src/veins/base/phyLayer/MappingUtils.h	/^	value_type value;$/;"	m	class:Interpolated
valueIt	src/veins/base/phyLayer/MappingUtils.h	/^	iterator                             valueIt;$/;"	m	class:MultiDimMappingIterator
valueIt	src/veins/base/phyLayer/MappingUtils.h	/^	iterator     valueIt;$/;"	m	class:TimeMappingIterator
value_cref_type	src/veins/base/phyLayer/Interpolation.h	/^	typedef const value_type& value_cref_type;$/;"	t	class:Interpolated
value_cref_type	src/veins/base/phyLayer/MappingUtils.h	/^	typedef const value_type& value_cref_type;$/;"	t	class:Interpolated
value_ptr_type	src/veins/base/phyLayer/Interpolation.h	/^	typedef value_type*       value_ptr_type;$/;"	t	class:Interpolated
value_ptr_type	src/veins/base/phyLayer/MappingUtils.h	/^	typedef value_type*       value_ptr_type;$/;"	t	class:Interpolated
value_ref_type	src/veins/base/phyLayer/Interpolation.h	/^	typedef value_type&       value_ref_type;$/;"	t	class:Interpolated
value_ref_type	src/veins/base/phyLayer/MappingUtils.h	/^	typedef value_type&       value_ref_type;$/;"	t	class:Interpolated
value_type	src/veins/base/phyLayer/Interpolation.h	/^	typedef V                 value_type;$/;"	t	class:Interpolated
value_type	src/veins/base/phyLayer/MappingBase.h	/^	typedef container_type::value_type      value_type;$/;"	t	class:Argument
value_type	src/veins/base/phyLayer/MappingUtils.h	/^	typedef Mapping*          value_type;$/;"	t	class:Interpolated
values	src/veins/base/phyLayer/MappingBase.h	/^	container_type values;$/;"	m	class:Argument
vehCounter	src/veins/modules/mobility/traci/TraCIBaseTrafficManager.h	/^		int vehCounter;$/;"	m	class:TraCIBaseTrafficManager
vehicle	src/veins/modules/mobility/traci/TraCICommandInterface.h	/^		Vehicle vehicle(std::string nodeId) {$/;"	f	class:Veins::TraCICommandInterface
vehicleCommandInterface	src/veins/modules/mobility/traci/TraCIMobility.h	/^		mutable TraCICommandInterface::Vehicle* vehicleCommandInterface;$/;"	m	class:Veins::TraCIMobility
vehicleData	src/veins/modules/application/platooning/bikeplatoons/BikesApp.h	/^		struct VEHICLE_DATA vehicleData;$/;"	m	class:BikesApp	typeref:struct:BikesApp::VEHICLE_DATA
vehicleData	src/veins/modules/application/platooning/bikes/BikeManeuver.h	/^        struct VEHICLE_DATA vehicleData;$/;"	m	class:BikeManeuver	typeref:struct:BikeManeuver::VEHICLE_DATA
vehicleData	src/veins/modules/application/platooning/maneuver/JoinManeuverApp.h	/^		struct VEHICLE_DATA vehicleData;$/;"	m	class:JoinManeuverApp	typeref:struct:JoinManeuverApp::VEHICLE_DATA
vehicleId_var	src/veins/modules/application/platooning/messages/BikesMessage_m.h	/^    int vehicleId_var;$/;"	m	class:BikesMessage
vehicleId_var	src/veins/modules/application/platooning/messages/ManeuverMessage_m.h	/^    int vehicleId_var;$/;"	m	class:ManeuverMessage
vehicleId_var	src/veins/modules/application/platooning/messages/PlatooningBeacon_m.h	/^    int vehicleId_var;$/;"	m	class:PlatooningBeacon
vehicleInsertQueue	src/veins/modules/mobility/traci/TraCIBaseTrafficManager.h	/^		InsertQueue vehicleInsertQueue;$/;"	m	class:TraCIBaseTrafficManager
vehicleTypeIds	src/veins/modules/mobility/traci/TraCIBaseTrafficManager.h	/^		std::vector<std::string> vehicleTypeIds;$/;"	m	class:TraCIBaseTrafficManager
vehicleType_var	src/veins/modules/application/platooning/messages/BikesMessage_m.h	/^    int vehicleType_var;$/;"	m	class:BikesMessage
vehiclesCount	src/veins/modules/mobility/traci/TraCIBaseTrafficManager.h	/^		std::vector<int> vehiclesCount;$/;"	m	class:TraCIBaseTrafficManager
version	configure	/^            version = file.read().rstrip()$/;"	v
viewId	src/veins/modules/mobility/traci/TraCICommandInterface.h	/^				std::string viewId;$/;"	m	class:Veins::TraCICommandInterface::GuiView
visitedEdges	src/veins/modules/application/traci/TraCITestApp.h	/^		std::set<std::string> visitedEdges; \/**< set of edges this vehicle visited *\/$/;"	m	class:Veins::TraCITestApp
visualRepresentation	src/veins/modules/obstacle/Obstacle.h	/^		AnnotationManager::Annotation* visualRepresentation;$/;"	m	class:Veins::Obstacle
wait_for_connections	sumo-launchd.py	/^def wait_for_connections(sumo_command, shlex, sumo_port, bind_address, do_daemonize, do_kill, pidfile, keep_temp):$/;"	f
wasTransmitting_var	src/veins/modules/messages/AirFrame11p_m.h	/^    bool wasTransmitting_var;$/;"	m	class:AirFrame11p
watch	src/veins/modules/mobility/traci/TraCIMobility.cc	/^void TraCIMobility::Statistics::watch(cSimpleModule& )$/;"	f	class:TraCIMobility::Statistics
world	src/veins/base/connectionManager/ChannelAccess.h	/^	BaseWorldUtility* world;$/;"	m	class:Veins::ChannelAccess
world	src/veins/base/modules/BaseMobility.h	/^    BaseWorldUtility *world;$/;"	m	class:BaseMobility
world	src/veins/base/phyLayer/BasePhyLayer.h	/^	BaseWorldUtility* world;$/;"	m	class:BasePhyLayer
world	src/veins/modules/mobility/traci/TraCIScenarioManager.h	/^		BaseWorldUtility* world;$/;"	m	class:Veins::TraCIScenarioManager
wrapIfOutside	src/veins/base/modules/BaseMobility.cc	/^void BaseMobility::wrapIfOutside(BorderHandling wo,$/;"	f	class:BaseMobility
wrapIfTorus	src/veins/base/connectionManager/BaseConnectionManager.cc	/^int BaseConnectionManager::wrapIfTorus(int value, int max) {$/;"	f	class:BaseConnectionManager
wrapType	src/veins/base/utils/FindModule.h	/^		typedef T wrapType;$/;"	t	class:AccessModuleWrap
wrappedOORMapping	src/veins/base/phyLayer/MappingUtils.h	/^	ConstMappingWrapper* wrappedOORMapping;$/;"	m	class:MultiDimMapping
write	src/veins/modules/mobility/traci/TraCIBuffer.cc	/^template<> void TraCIBuffer::write(TraCICoord inv) {$/;"	f	class:Veins::TraCIBuffer
write	src/veins/modules/mobility/traci/TraCIBuffer.cc	/^template<> void TraCIBuffer::write(std::string inv) {$/;"	f	class:Veins::TraCIBuffer
write	src/veins/modules/mobility/traci/TraCIBuffer.h	/^		template<typename T> void write(T inv) {$/;"	f	class:Veins::TraCIBuffer
writeBuffer	src/veins/modules/mobility/traci/TraCIBuffer.h	/^        void writeBuffer(const unsigned char *buffer, size_t size) {$/;"	f	class:Veins::TraCIBuffer
writeRecvEntry	src/veins/base/phyLayer/PhyUtils.cc	/^void RadioStateAnalogueModel::writeRecvEntry(simtime_t_cref time, Argument::mapped_type_cref value)$/;"	f	class:RadioStateAnalogueModel
wsmData_var	src/veins/modules/messages/WaveShortMessage_m.h	/^    opp_string wsmData_var;$/;"	m	class:WaveShortMessage
wsmLength_var	src/veins/modules/messages/WaveShortMessage_m.h	/^    int wsmLength_var;$/;"	m	class:WaveShortMessage
wsmVersion_var	src/veins/modules/messages/WaveShortMessage_m.h	/^    int wsmVersion_var;$/;"	m	class:WaveShortMessage
x	src/veins/base/connectionManager/BaseConnectionManager.h	/^		int x;$/;"	m	class:BaseConnectionManager::GridCoord
x	src/veins/base/utils/Coord.h	/^    double x;$/;"	m	class:Coord
x	src/veins/modules/mobility/traci/TraCICoord.h	/^	double x;$/;"	m	struct:Veins::TraCICoord
y	src/veins/base/connectionManager/BaseConnectionManager.h	/^		int y;$/;"	m	class:BaseConnectionManager::GridCoord
y	src/veins/base/utils/Coord.h	/^    double y;$/;"	m	class:Coord
y	src/veins/modules/mobility/traci/TraCICoord.h	/^	double y;$/;"	m	struct:Veins::TraCICoord
z	src/veins/base/connectionManager/BaseConnectionManager.h	/^		int z;$/;"	m	class:BaseConnectionManager::GridCoord
z	src/veins/base/utils/Coord.h	/^    double z;$/;"	m	class:Coord
~AirFrame	src/veins/base/messages/AirFrame_m.cc	/^AirFrame::~AirFrame()$/;"	f	class:Veins::AirFrame
~AirFrame11p	src/veins/modules/messages/AirFrame11p_m.cc	/^AirFrame11p::~AirFrame11p()$/;"	f	class:AirFrame11p
~AirFrame11pDescriptor	src/veins/modules/messages/AirFrame11p_m.cc	/^AirFrame11pDescriptor::~AirFrame11pDescriptor()$/;"	f	class:AirFrame11pDescriptor
~AirFrameDescriptor	src/veins/base/messages/AirFrame_m.cc	/^AirFrameDescriptor::~AirFrameDescriptor()$/;"	f	class:Veins::AirFrameDescriptor
~AnalogueModel	src/veins/base/phyLayer/AnalogueModel.h	/^	virtual ~AnalogueModel() {}$/;"	f	class:AnalogueModel
~Annotation	src/veins/modules/world/annotations/AnnotationManager.h	/^				virtual ~Annotation() {}$/;"	f	class:Veins::AnnotationManager::Annotation
~AnnotationDummy	src/veins/modules/world/annotations/AnnotationDummy.cc	/^AnnotationDummy::~AnnotationDummy() {$/;"	f	class:AnnotationDummy
~AnnotationManager	src/veins/modules/world/annotations/AnnotationManager.cc	/^AnnotationManager::~AnnotationManager() {$/;"	f	class:AnnotationManager
~BaseConnectionManager	src/veins/base/connectionManager/BaseConnectionManager.cc	/^BaseConnectionManager::~BaseConnectionManager()$/;"	f	class:BaseConnectionManager
~BaseDecider	src/veins/base/phyLayer/BaseDecider.h	/^	virtual ~BaseDecider() {}$/;"	f	class:BaseDecider
~BaseDelayedIterator	src/veins/base/phyLayer/MappingUtils.h	/^	virtual ~BaseDelayedIterator() {}$/;"	f	class:BaseDelayedIterator
~BaseDelayedMapping	src/veins/base/phyLayer/MappingUtils.h	/^	virtual ~BaseDelayedMapping() {}$/;"	f	class:BaseDelayedMapping
~BaseFilteredIterator	src/veins/base/phyLayer/MappingUtils.h	/^	virtual ~BaseFilteredIterator() {$/;"	f	class:BaseFilteredIterator
~BaseLayer	src/veins/base/modules/BaseLayer.cc	/^BaseLayer::~BaseLayer()$/;"	f	class:BaseLayer
~BasePhyLayer	src/veins/base/phyLayer/BasePhyLayer.cc	/^BasePhyLayer::~BasePhyLayer() {$/;"	f	class:BasePhyLayer
~BaseProtocol	src/veins/modules/application/platooning/protocols/BaseProtocol.cc	/^BaseProtocol::~BaseProtocol() {$/;"	f	class:BaseProtocol
~BaseWaveApplLayer	src/veins/modules/application/ieee80211p/BaseWaveApplLayer.cc	/^BaseWaveApplLayer::~BaseWaveApplLayer() {$/;"	f	class:BaseWaveApplLayer
~BikesMessage	src/veins/modules/application/platooning/messages/BikesMessage_m.cc	/^BikesMessage::~BikesMessage()$/;"	f	class:BikesMessage
~BikesMessageDescriptor	src/veins/modules/application/platooning/messages/BikesMessage_m.cc	/^BikesMessageDescriptor::~BikesMessageDescriptor()$/;"	f	class:BikesMessageDescriptor
~BorderMsg	src/veins/base/messages/BorderMsg_m.cc	/^BorderMsg::~BorderMsg()$/;"	f	class:BorderMsg
~BorderMsgDescriptor	src/veins/base/messages/BorderMsg_m.cc	/^BorderMsgDescriptor::~BorderMsgDescriptor()$/;"	f	class:BorderMsgDescriptor
~ChannelInfo	src/veins/base/phyLayer/ChannelInfo.h	/^	virtual ~ChannelInfo() {}$/;"	f	class:ChannelInfo
~ChannelSenseRequest	src/veins/base/messages/ChannelSenseRequest_m.cc	/^ChannelSenseRequest::~ChannelSenseRequest()$/;"	f	class:ChannelSenseRequest
~ChannelSenseRequestDescriptor	src/veins/base/messages/ChannelSenseRequest_m.cc	/^ChannelSenseRequestDescriptor::~ChannelSenseRequestDescriptor()$/;"	f	class:ChannelSenseRequestDescriptor
~ConcatConstMappingIterator	src/veins/base/phyLayer/MappingUtils.h	/^	virtual ~ConcatConstMappingIterator() {$/;"	f	class:ConcatConstMappingIterator
~ConstDelayedMapping	src/veins/base/phyLayer/MappingUtils.h	/^	virtual ~ConstDelayedMapping() {}$/;"	f	class:ConstDelayedMapping
~ConstMapping	src/veins/base/phyLayer/MappingBase.h	/^	virtual ~ConstMapping() {}$/;"	f	class:ConstMapping
~ConstMappingIterator	src/veins/base/phyLayer/MappingBase.h	/^	virtual ~ConstMappingIterator() {}$/;"	f	class:ConstMappingIterator
~ConstMappingIteratorWrapper	src/veins/base/phyLayer/MappingUtils.h	/^	virtual ~ConstMappingIteratorWrapper() {$/;"	f	class:ConstMappingIteratorWrapper
~CoordSet	src/veins/base/connectionManager/BaseConnectionManager.h	/^		~CoordSet() {$/;"	f	class:BaseConnectionManager::CoordSet
~Decider	src/veins/base/phyLayer/Decider.h	/^	virtual ~Decider() {}$/;"	f	class:Decider
~Decider80211p	src/veins/modules/phy/Decider80211p.cc	/^Decider80211p::~Decider80211p() {}$/;"	f	class:Decider80211p
~Decider80211pToPhy80211pInterface	src/veins/modules/phy/Decider80211pToPhy80211pInterface.h	/^	virtual ~Decider80211pToPhy80211pInterface() {};$/;"	f	class:Decider80211pToPhy80211pInterface
~DeciderResult	src/veins/base/phyLayer/Decider.h	/^	virtual ~DeciderResult() {}$/;"	f	class:DeciderResult
~DeciderToPhyInterface	src/veins/base/phyLayer/DeciderToPhyInterface.h	/^	virtual ~DeciderToPhyInterface() {}$/;"	f	class:DeciderToPhyInterface
~DelayedMapping	src/veins/base/phyLayer/MappingUtils.h	/^	virtual ~DelayedMapping() {}$/;"	f	class:DelayedMapping
~DrawAmount	src/veins/base/modules/BaseBattery.h	/^	virtual ~DrawAmount()$/;"	f	class:DrawAmount
~FilledUpMapping	src/veins/base/phyLayer/MappingUtils.h	/^	virtual ~FilledUpMapping(){$/;"	f	class:FilledUpMapping
~FilteredMappingIterator	src/veins/base/phyLayer/MappingUtils.h	/^	virtual ~FilteredMappingIterator() {}$/;"	f	class:FilteredMappingIterator
~Group	src/veins/modules/world/annotations/AnnotationManager.h	/^				virtual ~Group() {}$/;"	f	class:Veins::AnnotationManager::Group
~InterpolatorBase	src/veins/base/phyLayer/Interpolation.h	/^	virtual ~InterpolatorBase() {}$/;"	f	class:InterpolatorBase
~JakesFading	src/veins/modules/analogueModel/JakesFading.cc	/^JakesFading::~JakesFading() {$/;"	f	class:JakesFading
~Line	src/veins/modules/world/annotations/AnnotationManager.h	/^				virtual ~Line() {}$/;"	f	class:Veins::AnnotationManager::Line
~Linear	src/veins/base/phyLayer/Interpolation.h	/^	virtual ~Linear() {}$/;"	f	class:Linear
~Linear	src/veins/base/phyLayer/MappingUtils.h	/^	virtual ~Linear() {}$/;"	f	class:Linear
~LinearIntplMappingIterator	src/veins/base/phyLayer/MappingUtils.cc	/^LinearIntplMappingIterator::~LinearIntplMappingIterator() {$/;"	f	class:LinearIntplMappingIterator
~ListEntry	src/veins/base/phyLayer/PhyUtils.h	/^		virtual ~ListEntry() {}$/;"	f	class:RadioStateAnalogueModel::ListEntry
~LogNormalShadowing	src/veins/modules/analogueModel/LogNormalShadowing.cc	/^LogNormalShadowing::~LogNormalShadowing() {}$/;"	f	class:LogNormalShadowing
~Mac1609_4	src/veins/modules/mac/ieee80211p/Mac1609_4.h	/^		~Mac1609_4() { };$/;"	f	class:Mac1609_4
~Mac80211Pkt	src/veins/modules/messages/Mac80211Pkt_m.cc	/^Mac80211Pkt::~Mac80211Pkt()$/;"	f	class:Mac80211Pkt
~Mac80211PktDescriptor	src/veins/modules/messages/Mac80211Pkt_m.cc	/^Mac80211PktDescriptor::~Mac80211PktDescriptor()$/;"	f	class:Mac80211PktDescriptor
~Mac80211pToPhy11pInterface	src/veins/modules/mac/ieee80211p/Mac80211pToPhy11pInterface.h	/^		virtual ~Mac80211pToPhy11pInterface() {};$/;"	f	class:Mac80211pToPhy11pInterface
~MacPkt	src/veins/base/messages/MacPkt_m.cc	/^MacPkt::~MacPkt()$/;"	f	class:MacPkt
~MacPktDescriptor	src/veins/base/messages/MacPkt_m.cc	/^MacPktDescriptor::~MacPktDescriptor()$/;"	f	class:MacPktDescriptor
~MacToNetwControlInfo	src/veins/base/utils/MacToNetwControlInfo.h	/^	virtual ~MacToNetwControlInfo() {}$/;"	f	class:MacToNetwControlInfo
~MacToPhyControlInfo	src/veins/base/phyLayer/MacToPhyControlInfo.h	/^	virtual ~MacToPhyControlInfo() {$/;"	f	class:MacToPhyControlInfo
~MacToPhyInterface	src/veins/base/phyLayer/MacToPhyInterface.h	/^	virtual ~MacToPhyInterface() {}$/;"	f	class:MacToPhyInterface
~ManeuverMessage	src/veins/modules/application/platooning/messages/ManeuverMessage_m.cc	/^ManeuverMessage::~ManeuverMessage()$/;"	f	class:ManeuverMessage
~ManeuverMessageDescriptor	src/veins/modules/application/platooning/messages/ManeuverMessage_m.cc	/^ManeuverMessageDescriptor::~ManeuverMessageDescriptor()$/;"	f	class:ManeuverMessageDescriptor
~Mapping	src/veins/base/phyLayer/MappingBase.h	/^	virtual ~Mapping() {}$/;"	f	class:Mapping
~MappingIterator	src/veins/base/phyLayer/MappingBase.h	/^	virtual ~MappingIterator() {}$/;"	f	class:MappingIterator
~MultiDimMapping	src/veins/base/phyLayer/MappingUtils.h	/^	virtual ~MultiDimMapping() {$/;"	f	class:MultiDimMapping
~MultiDimMappingIterator	src/veins/base/phyLayer/MappingUtils.h	/^	virtual ~MultiDimMappingIterator() {$/;"	f	class:MultiDimMappingIterator
~Nearest	src/veins/base/phyLayer/Interpolation.h	/^	virtual ~Nearest() {}$/;"	f	class:Nearest
~NetwToMacControlInfo	src/veins/base/utils/NetwToMacControlInfo.h	/^    virtual ~NetwToMacControlInfo() {};$/;"	f	class:NetwToMacControlInfo
~NextSmaller	src/veins/base/phyLayer/Interpolation.h	/^	virtual ~NextSmaller() {}$/;"	f	class:NextSmaller
~NicEntry	src/veins/base/connectionManager/NicEntry.h	/^    virtual ~NicEntry() {}$/;"	f	class:NicEntry
~NicEntryDebug	src/veins/base/connectionManager/NicEntryDebug.h	/^    virtual ~NicEntryDebug() {}$/;"	f	class:NicEntryDebug
~NicEntryDirect	src/veins/base/connectionManager/NicEntryDirect.h	/^    virtual ~NicEntryDirect() {}$/;"	f	class:NicEntryDirect
~ObstacleControl	src/veins/modules/obstacle/ObstacleControl.cc	/^ObstacleControl::~ObstacleControl() {$/;"	f	class:ObstacleControl
~PhyControlMessage	src/veins/modules/messages/PhyControlMessage_m.cc	/^PhyControlMessage::~PhyControlMessage()$/;"	f	class:PhyControlMessage
~PhyControlMessageDescriptor	src/veins/modules/messages/PhyControlMessage_m.cc	/^PhyControlMessageDescriptor::~PhyControlMessageDescriptor()$/;"	f	class:PhyControlMessageDescriptor
~PhyToMacControlInfo	src/veins/base/phyLayer/PhyToMacControlInfo.h	/^	virtual ~PhyToMacControlInfo() {$/;"	f	class:PhyToMacControlInfo
~PlatooningBeacon	src/veins/modules/application/platooning/messages/PlatooningBeacon_m.cc	/^PlatooningBeacon::~PlatooningBeacon()$/;"	f	class:PlatooningBeacon
~PlatooningBeaconDescriptor	src/veins/modules/application/platooning/messages/PlatooningBeacon_m.cc	/^PlatooningBeaconDescriptor::~PlatooningBeaconDescriptor()$/;"	f	class:PlatooningBeaconDescriptor
~Point	src/veins/modules/world/annotations/AnnotationManager.h	/^				virtual ~Point() {}$/;"	f	class:Veins::AnnotationManager::Point
~Polygon	src/veins/modules/world/annotations/AnnotationManager.h	/^				virtual ~Polygon() {}$/;"	f	class:Veins::AnnotationManager::Polygon
~RSAMConstMappingIterator	src/veins/base/phyLayer/PhyUtils.h	/^	virtual ~RSAMConstMappingIterator() {}$/;"	f	class:RSAMConstMappingIterator
~RSAMMapping	src/veins/base/phyLayer/PhyUtils.h	/^	virtual ~RSAMMapping() {}$/;"	f	class:RSAMMapping
~Radio	src/veins/base/phyLayer/PhyUtils.cc	/^Radio::~Radio()$/;"	f	class:Radio
~RadioStateAnalogueModel	src/veins/base/phyLayer/PhyUtils.h	/^	virtual ~RadioStateAnalogueModel() {}$/;"	f	class:RadioStateAnalogueModel
~SNRThresholdDecider	src/veins/modules/phy/SNRThresholdDecider.h	/^	virtual ~SNRThresholdDecider() {};$/;"	f	class:SNRThresholdDecider
~Signal	src/veins/base/phyLayer/Signal.cc	/^Signal::~Signal()$/;"	f	class:Signal
~SimplePlatooningBeaconing	src/veins/modules/application/platooning/protocols/SimplePlatooningBeaconing.cc	/^SimplePlatooningBeaconing::~SimplePlatooningBeaconing()$/;"	f	class:SimplePlatooningBeaconing
~TraCIConnection	src/veins/modules/mobility/traci/TraCIConnection.cc	/^TraCIConnection::~TraCIConnection() {$/;"	f	class:Veins::TraCIConnection
~TraCIMobility	src/veins/modules/mobility/traci/TraCIMobility.h	/^		~TraCIMobility() {$/;"	f	class:Veins::TraCIMobility
~TraCIScenarioManager	src/veins/modules/mobility/traci/TraCIScenarioManager.cc	/^TraCIScenarioManager::~TraCIScenarioManager() {$/;"	f	class:TraCIScenarioManager
~TraCIScenarioManagerLaunchd	src/veins/modules/mobility/traci/TraCIScenarioManagerLaunchd.cc	/^TraCIScenarioManagerLaunchd::~TraCIScenarioManagerLaunchd()$/;"	f	class:TraCIScenarioManagerLaunchd
~TwoRayInterferenceModel	src/veins/modules/analogueModel/TwoRayInterferenceModel.h	/^		virtual ~TwoRayInterferenceModel() {}$/;"	f	class:TwoRayInterferenceModel
~UnicastMessage	src/veins/modules/application/platooning/messages/UnicastMessage_m.cc	/^UnicastMessage::~UnicastMessage()$/;"	f	class:UnicastMessage
~UnicastMessageDescriptor	src/veins/modules/application/platooning/messages/UnicastMessage_m.cc	/^UnicastMessageDescriptor::~UnicastMessageDescriptor()$/;"	f	class:UnicastMessageDescriptor
~UnicastProtocol	src/veins/modules/application/platooning/UnicastProtocol.cc	/^UnicastProtocol::~UnicastProtocol()$/;"	f	class:UnicastProtocol
~UnicastProtocolControlMessage	src/veins/modules/application/platooning/messages/UnicastProtocolControlMessage_m.cc	/^UnicastProtocolControlMessage::~UnicastProtocolControlMessage()$/;"	f	class:UnicastProtocolControlMessage
~UnicastProtocolControlMessageDescriptor	src/veins/modules/application/platooning/messages/UnicastProtocolControlMessage_m.cc	/^UnicastProtocolControlMessageDescriptor::~UnicastProtocolControlMessageDescriptor()$/;"	f	class:UnicastProtocolControlMessageDescriptor
~WaveAppToMac1609_4Interface	src/veins/modules/mac/ieee80211p/WaveAppToMac1609_4Interface.h	/^		virtual ~WaveAppToMac1609_4Interface() {} ;$/;"	f	class:WaveAppToMac1609_4Interface
~WaveShortMessage	src/veins/modules/messages/WaveShortMessage_m.cc	/^WaveShortMessage::~WaveShortMessage()$/;"	f	class:WaveShortMessage
~WaveShortMessageDescriptor	src/veins/modules/messages/WaveShortMessage_m.cc	/^WaveShortMessageDescriptor::~WaveShortMessageDescriptor()$/;"	f	class:WaveShortMessageDescriptor
